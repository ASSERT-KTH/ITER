bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  criterion  +  1);	      int    rows    =    Math.min(remainders.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion);	      int    rows    =    Math.min(remainders.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  1;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	4	4	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	4	4	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  3;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
7	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRows();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  final  double[][]  residuals  =  jF.getRows();  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRows();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt	      	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    for(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    For(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    for(int  i  =  0;  i  <  2;  --i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
17	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  residuals.length;  ++i)  {	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  remainings	7	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    for(int  i  =  0;  i  <  this.rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  For(int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  For(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    For(int  i  =  0;  i  <  this.rows;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    for(int  i  =  0;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    int  i  =  0;  i  <  this.rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	16	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	16	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	16	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	16	None	replace
31	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainings.length,  criterion  +  1);	      int    rows    =    Math.min(remainings.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
32	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  cost);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  cost);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  cost);	      int    rows    =    Math.min(results.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
33	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getColumns();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  jF.getColumns();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getColumns();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getRows();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  jf.getRows();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jf.getRows();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRemainings();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  jF.getRemainings();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRemainings();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	14	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	14	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  ';'  expected	11	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	11	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	11	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getRows();	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol  columns	9	None	replace
57	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
58	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    for(int  i  =  0;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  For(int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  For(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    For(int  i  =  0;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    int  i  =  0;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  for(int  i  =  0;  i  <  this.cols);  ++i)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  for(int  i  =  0;  i  <  this.cols);  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    for(int  i  =  0;  i  <  this.cols);  ++i)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  [CE]  cannot  find  symbol  columns  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {	  for(int    i    =    0;    i    <    rows.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  columns	14	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    final  int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    for(int  i  =  0;  i  <  2)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    int  i  =  0;  i  <  this.rows;  ++i);	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    final  int  i  =  0;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    int  i  =  0;  i  <  this.cols;  ++i);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {	  for(int    i    =    0;    i    <    columns;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	14	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {	  for(int    i    =    0;    i    <    columns;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	14	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
79	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRemainders();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  jF.getRemainders();  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRemainders();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  criterion);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  criterion);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainingsWeights.length,  criterion);	      int    rows    =    Math.min(remainings.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
81	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  criterion);	      int    rows    =    Math.min(remainings.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  4;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	10	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  4;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	10	replace
85	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion  +  1);	      int    rows    =    Math.min(results.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
86	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  2);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(results.length,  2);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  2);	      int    rows    =    Math.min(results.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  <identifier>  expected	11	None	replace
89	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	6	3	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	6	3	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    2;    ++i)    {    for(int  i  =  0;  i  <  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
98	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  1;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	5	replace
99	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  1;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	5	replace
100	[BUG]  [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redeclarations.length,  criterion);	      int    rows    =    Math.min(results.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
102	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRowSize();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  jF.getRowSize();  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRowSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  double[][]  residuals  =  function.getRowSize();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  function.getRowSize();  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  function.getRowSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  double[][]  residuals  =  getRowSize();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  double[][]  residuals  =  getRowSize();  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  getRowSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residualsWeights[i];  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residualsWeights[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  columns	17	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWidths.length;  ++i)  {  [CE]  cannot  find  symbol  residualsWidths  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residualsWidths.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residualsWidths.length;  ++i)  {	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  residualsWidths	7	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	16	None	replace
112	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;    [BUGGY]  int  rows  =  Math.min(remainders.length,  2);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  2);	      int    rows    =    Math.min(remainders.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
