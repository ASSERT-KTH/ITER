bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.cols;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	5	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	5	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  2;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	5	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	5	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	53	1	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	53	1	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  remainings	53	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	  	for  (int  i  =  0;  i  <  rows;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
9	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();		non-compiled	[CE]  illegal  start  of  expression	54	None	add
10	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }		non-compiled	[CE]  illegal  start  of  expression	54	None	add
11	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =		non-compiled	[CE]  illegal  start  of  expression	54	None	add
12	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	54	None	add
13	[BUG]  [BUGGY]    double[][]  residuals  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    double[][]  residuals  =  jF.getRows();  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    double[][]  residuals  =  jF.getRows();		non-compiled	[CE]  cannot  find  symbol	54	None	add
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
15	[BUG]  [BUGGY]    int  rows  =  Math.min(results.length,  criterion);  [CE]  cannot  find  symbol  results  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    int  rows  =  Math.min(results.length,  criterion);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    int  rows  =  Math.min(results.length,  criterion);		non-compiled	[CE]  cannot  find  symbol  results	54	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);		non-compiled	[CE]  ']'  expected	54	None	add
17	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);		non-compiled	[CE]  illegal  start  of  expression	54	None	add
18	[BUG]  [BUGGY]    int  rows  =  Math.min(remainings.length,  criterion);  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    int  rows  =  Math.min(remainings.length,  criterion);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    int  rows  =  Math.min(remainings.length,  criterion);		non-compiled	[CE]  cannot  find  symbol  remainings	54	None	add
19	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  criterion);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    int  rows  =  Math.min(remainders.length,  criterion);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    int  rows  =  Math.min(remainders.length,  criterion);		non-compiled	[CE]  cannot  find  symbol  remainders	54	None	add
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [CE]  cannot  find  symbol  columns  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  columns	53	None	replace
21	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);		non-compiled	[CE]  ']'  expected	54	None	add
22	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);		non-compiled	[CE]  ']'  expected	54	None	add
