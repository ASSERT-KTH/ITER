bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	30	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	30	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	30	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
5	[BUG]  [BUGGY]  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length  +  1;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  *  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.cols  *  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	5	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  *  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  *  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols  *  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	5	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	14	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	14	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    1;    ++i)    {    for(int  i  =  0;  i  <  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  For(int  i  =  0;  i  <  1;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  For(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    1;    ++i)    {    For(int  i  =  0;  i  <  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    1;    ++i)    {    for(int  i  =  0;  i  <  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  int  i  =  0;  i  <  1;  ++i)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    1;    ++i)    {    int  i  =  0;  i  <  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	47	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	47	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	47	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [CE]  cannot  find  symbol  recipes  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    if(recipes[i]    >    0)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  recipes	89	None	replace
21	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    if(recipes[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
22	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    if(recipes[i]    >    0)    {    continue;    }    	non-compiled	[CE]  '.class'  expected	89	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  columns  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  columns	65	None	replace
25	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    For(int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    For(int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	51	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	51	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    residuals    =    new    double[remainings.length    +    i];    System.arraycopy(variables,    0,    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
30	[BUG]  [BUGGY]  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    residuals    =    new    double[remainings.length    +    i];    System.arraycopy(variables,    0,    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(this.cols[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(this.cols[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(this.cols[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  array  required,  but  int  found	75	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  ';'  expected	40	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  <identifier>  expected	40	None	replace
35	[BUG]  [BUGGY]  if(remaining  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remaining  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remaining  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqr  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqr  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqr	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols);  ++i)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols);  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols);  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    for(int    i    =    0;    i    <    this.cols);    ++i)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
40	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	106	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  j  =  0;  j  <  this.cols;  ++j)  {  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  j  =  0;  j  <  this.cols;  ++j)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  j  =  0;  j  <  this.cols;  ++j)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    }    	non-compiled	[CE]  '.class'  expected	48	None	replace
43	[BUG]  [BUGGY]  final  double  residuals[]  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double  residuals[]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double  residuals[]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
44	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getColumnSize();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getColumnSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getColumnSize();	  double[][]    residuals    =    jF.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
45	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRowSize()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRowSize()  +  1;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRowSize()  +  1;	  double[][]    residuals    =    jF.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
46	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getRowSize();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jf.getRowSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jf.getRowSize();	  double[][]    residuals    =    jF.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
47	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getColumns();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getColumns();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getColumns();	  final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRemainders();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getRemainders();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRemainders();	  final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  final  double[][]  residuals  =  jf.getRows();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jf.getRows();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jf.getRows();	  final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion  +  1);	  int    rows    =    Math.min(redefinitions.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion,  cost);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion,  cost);	  int    rows    =    Math.min(redefinitions.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion,  2);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion,  2);	  int    rows    =    Math.min(redefinitions.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion,  0);	  int    rows    =    Math.min(redefinitions.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRawRemainders();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRawRemainders();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRawRemainders();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
55	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRawSquares();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRawSquares();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRawSquares();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  columns  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol  columns	78	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainingsWeights.length;  ++i)  {  [CE]  cannot  find  symbol  remainingsWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.remainingsWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.remainingsWeights.length;  ++i)  {	  for(int    i    =    0;    i    <    this.remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	22	None	replace
59	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  1);	  int    rows    =    Math.min(results.length,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
60	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  0);	  int    rows    =    Math.min(results.length,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
61	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  2  -  criterion);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  2  -  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  2  -  criterion);	  int    rows    =    Math.min(results.length,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ']'  expected	52	None	replace
63	[BUG]  [BUGGY]  final  double  residuals[]  =  Math.sqrt(remainings[i]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double  residuals[]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double  residuals[]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
64	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  '.class'  expected	52	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
69	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(this.rows[i]);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(this.rows[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(this.rows[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  array  required,  but  int  found	76	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	76	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	50	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  continue;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  continue;  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	105	None	replace
76	[BUG]  [BUGGY]  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	105	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  final  double  i  =  0;  i  <  this.cols.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  final  double  i  =  0;  i  <  this.cols.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  final  double  i  =  0;  i  <  this.cols.length;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
81	[BUG]  [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redeclarations.length,  criterion  +  1);	  int    rows    =    Math.min(redeclarations.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
82	[BUG]  [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion,  0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redeclarations.length,  criterion,  0);	  int    rows    =    Math.min(redeclarations.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
83	[BUG]  [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion,  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redeclarations.length,  criterion,  2);	  int    rows    =    Math.min(redeclarations.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
84	[BUG]  [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redeclarations.length,  criterion,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redeclarations.length,  criterion,  1);	  int    rows    =    Math.min(redeclarations.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
85	[BUG]  [BUGGY]  final  double[][]  remainings  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  remainings  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  remainings  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
86	[BUG]  [BUGGY]  final  double[][]  residuals  =  jf.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  jf  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jf.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jf.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  jf	57	None	replace
87	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRemainings();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getRemainings();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRemainings();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
88	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  ']'  expected	29	None	replace
89	[BUG]  [BUGGY]  final  double  residuals[]  =  Math.rint(results[i]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double  residuals[]  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double  residuals[]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  ']'  expected	29	None	replace
91	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  int  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
92	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {	  For(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	58	None	replace
93	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  this.remainings.length;  ++i)  {	  For(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	58	None	replace
94	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {	  For(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	58	None	replace
95	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  1);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
96	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  0);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
97	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  2  -  residuals.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  2  -  residuals.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  2  -  residuals.length);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
98	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  '.class'  expected	46	None	replace
99	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  5;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  5;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    3;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	11	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  5;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  5;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  5;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    3;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	11	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  4;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    for(int  i  =  0;  i  <  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  For(int  i  =  0;  i  <  4;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  For(int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    For(int  i  =  0;  i  <  4;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	83	None	add
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  int  i  =  0;  i  <  4;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    int  i  =  0;  i  <  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	83	None	add
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  5;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  5;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    for(int  i  =  0;  i  <  5;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
105	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  criterion  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainingsWeights.length,  criterion  +  1);	  int    rows    =    Math.min(remainingsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
106	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainingsWeights.length,  2);	  int    rows    =    Math.min(remainingsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
107	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  criterion,  cost);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  criterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainingsWeights.length,  criterion,  cost);	  int    rows    =    Math.min(remainingsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
108	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  3);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainingsWeights.length,  3);	  int    rows    =    Math.min(remainingsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.resistances.length;  ++i)  {  [CE]  cannot  find  symbol  resistances  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.resistances.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.resistances.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWidths.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  resistances	108	None	replace
110	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  1,  cost);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  1,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion  +  1,  cost);	  int    rows    =    Math.min(results.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
111	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion  *  1);	  int    rows    =    Math.min(results.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
112	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  cost  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  cost  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  cost  +  1);	  int    rows    =    Math.min(results.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  result  =  Math.rint(results[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  result  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  result  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
114	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  1,  residuals.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  1,  residuals.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  criterion  +  1,  residuals.length);	  int    rows    =    Math.min(remainders.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
115	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  *  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  criterion  *  1);	  int    rows    =    Math.min(remainders.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
116	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  1,  residualsWeights.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  1,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  criterion  +  1,  residualsWeights.length);	  int    rows    =    Math.min(remainders.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length  -  1;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows.length  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  *  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows  *  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  *  1;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  *  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows  *  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows  -  2;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	93	3	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  2;  ++i)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows  -  2;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	93	3	replace
122	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRawRemainings();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRawRemainings();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRawRemainings();	  double[][]    residuals    =    jF.getRemainings();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[]  residuals  =  Math.rint(results[i]);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[]  residuals  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[]  residuals  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	28	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  residuals.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	19	3	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length  -  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	19	3	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length  -  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  residuals.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	19	3	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length  -  2;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length  -  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	19	3	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  ';'  expected	41	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  ';'  expected	41	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  =	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  for(int  i  =  1;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  for(int  i  =  1;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    for(int  i  =  1;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
134	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  For(int  i  =  1;  i  <  this.cols;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  For(int  i  =  1;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    For(int  i  =  1;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	98	None	add
135	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  int  i  =  1;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  int  i  =  1;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    int  i  =  1;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	98	None	add
136	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  for(int  i  =  2;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  for(int  i  =  2;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    for(int  i  =  2;  i  <  this.cols;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
137	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  for(int  i  =  1;  i  <  this.cols);  ++i)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  for(int  i  =  1;  i  <  this.cols);  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    for(int  i  =  1;  i  <  this.cols);  ++i)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
139	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  Il  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  Il	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
140	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  Il  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  Il	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  <identifier>  expected	39	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
146	[BUG]  [BUGGY]  double[][]  residuals  =  function.getColumnSize();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  function.getColumnSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  function.getColumnSize();	  double[][]    residuals    =    function.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
147	[BUG]  [BUGGY]  double[][]  residuals  =  function.getRowSize()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  function.getRowSize()  +  1;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  function.getRowSize()  +  1;	  double[][]    residuals    =    function.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
148	[BUG]  [BUGGY]  double[][]  residuals  =  function.getRowSize()  /  2;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  function.getRowSize()  /  2;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  function.getRowSize()  /  2;	  double[][]    residuals    =    function.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    	non-compiled	[CE]  <identifier>  expected	88	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    	non-compiled	[CE]  <identifier>  expected	88	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    	non-compiled	[CE]  <identifier>  expected	88	None	replace
152	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols.length;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  this.cols.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  this.cols.length;  ++i)  {	  for(int    i    =    0;    i    <    this.cols.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	43	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  if(this.rows!=  null)  {  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  continue;  }  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  continue;  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	94	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]	  for(int    i    =    0;    i    <    iterations;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  1;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
158	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.rows;  ++i)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  1;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  For(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  For(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    For(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    int  i  =  0;  i  <  residualsWeights.length;  ++i)  {	  	non-compiled	[CE]  >  expected	20	None	add
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  residuesWeights.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  residuesWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    for(int  i  =  0;  i  <  residuesWeights.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
164	[BUG]  [BUGGY]  double[][]  residuals  =  getColumnSize();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  getColumnSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  getColumnSize();	  double[][]    residuals    =    getRowSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
165	[BUG]  [BUGGY]  final  double[][]  residuals  =  getRowSize();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  getRowSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  getRowSize();	  double[][]    residuals    =    getRowSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
166	[BUG]  [BUGGY]  double[][]  residuals  =  getRowSize()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  getRowSize()  +  1;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  getRowSize()  +  1;	  double[][]    residuals    =    getRowSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
167	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  criterion  +  1);	  int    rows    =    Math.min(resultsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
168	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  2);	  int    rows    =    Math.min(resultsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
169	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion,  cost);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  criterion,  cost);	  int    rows    =    Math.min(resultsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
170	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  criterion,  0);	  int    rows    =    Math.min(resultsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  two;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  two  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  two;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  two;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol  two	14	None	replace
172	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  1,  residualsWeights.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  1,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainings.length,  criterion  +  1,  residualsWeights.length);	  int    rows    =    Math.min(remainings.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
173	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  1,  residuals.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  1,  residuals.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainings.length,  criterion  +  1,  residuals.length);	  int    rows    =    Math.min(remainings.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
174	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	25	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ']'  expected	109	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  For(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  For(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    For(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	92	None	add
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	92	None	add
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  for(int  i  =  1;  i  <  this.rows  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  for(int  i  =  1;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    for(int  i  =  1;  i  <  this.rows  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    final    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    final    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    final    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
186	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    For(int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	60	None	replace
187	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  0,  cost);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  0,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  0,  cost);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
188	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  criterion);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  0,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  0,  criterion);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
189	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  2);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
190	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  factor);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  factor);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  For(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  For(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    For(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	37	None	add
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  1;  i  <  this.rows  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  1;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    for(int  i  =  1;  i  <  this.rows  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
195	[BUG]  [BUGGY]  if(jF!=  null)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(jF!=  null)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(jF!=  null)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
196	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRows();  if(remainings  ==  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getRows();  if(remainings  ==  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRows();  if(remainings  ==  null)  {  return  Math.sqrt(remainings[i]);  }	  final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
197	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  For(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  For(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    For(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	44	None	add
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    int  i  =  0;  i  <  this.cols  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	44	None	add
201	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  for(int  i  =  1;  i  <  this.cols  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  for(int  i  =  1;  i  <  this.cols  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    for(int  i  =  1;  i  <  this.cols  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    for(int  i  =  0;  i  <  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  3;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    For(int  i  =  0;  i  <  3;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  i  <  3;  ++i)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    int  i  =  0;  i  <  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  4;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    for(int  i  =  0;  i  <  4;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
206	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  1;  i  <  this.cols.length;  ++i)  {	  for(int    i    =    1;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	99	None	replace
207	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  2;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  2;  i  <  this.cols;  ++i)  {	  for(int    i    =    1;    i    <    this.cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	5	replace
208	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  this.cols;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  2;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  2;  i  <  this.cols;  ++i)  {	  for(int    i    =    1;    i    <    this.cols;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	5	replace
209	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getColumns();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jf.getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jf.getColumns();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
212	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.rows;  ++i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  this.rows;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  i  =  0;  i  <  this.rows;  ++i);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length;  ++i)  {  int  i  =  0;  i  <  this.rows.length;  ++i);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(remainders.length,  DEFAULT_MAX_ITERATIONS));  ++i)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  Math.min(remainders.length,  DEFAULT_MAX_ITERATIONS));  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  Math.min(remainders.length,  DEFAULT_MAX_ITERATIONS));  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Math.min(remainders.length,  DEFAULT_MAX_ITERATIONS);  ++i)  {  [CE]  cannot  find  symbol  remainders  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  Math.min(remainders.length,  DEFAULT_MAX_ITERATIONS);  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  Math.min(remainders.length,  DEFAULT_MAX_ITERATIONS);  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  remainders	73	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  metrics.length;  ++i)  {  [CE]  cannot  find  symbol  metrics  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  metrics.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  metrics.length;  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  metrics	73	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  For(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  For(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    For(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	72	None	add
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {	  	non-compiled	[CE]  >  expected	72	None	add
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0,  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0,  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    for(int  i  =  0,  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
221	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  2;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	14	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  --i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	14	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
224	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  3;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	14	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  --i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	14	replace
226	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  1;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	14	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  --i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	14	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    for(int  i  =  0;  i  <  residuals.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    For(int  i  =  0;  i  <  residuals.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  int  i  =  0;  i  <  residuals.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  int  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    int  i  =  0;  i  <  residuals.length;  ++i)  {	  	non-compiled	[CE]  >  expected	18	None	add
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  residues.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  residues.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    for(int  i  =  0;  i  <  residues.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
232	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  '.class'  expected	27	None	replace
233	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[Remainings.length  +  i];  System.arraycopy(variables,  0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[Remainings.length  +  i];  System.arraycopy(variables,  0,  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[Remainings.length  +  i];  System.arraycopy(variables,  0,	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    residuals    =    new    double[remainings.length    +    i];    System.arraycopy(variables,    0,    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
234	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows.length;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  this.rows.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  this.rows.length;  ++i)  {	  for(int    i    =    0;    i    <    this.rows.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	36	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getCols();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getCols();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getCols();	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getColumns();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  2)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows.length  +  1;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows.length  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
241	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	14	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	14	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  int  i  =  0;  i  <  this.cols.length;  ++i);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
245	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.cols;  ++i);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  this.cols;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  i  =  0;  i  <  this.cols;  ++i);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  double  i  =  0;  i  <  this.cols.length;  ++i);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  double  i  =  0;  i  <  this.cols.length;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols.length;  ++i)  {  double  i  =  0;  i  <  this.cols.length;  ++i);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(this.results[i]);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(this.results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  Math.sqrt(this.results[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	75	None	replace
248	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  ++i)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  columns.length;  ++i)  {	  For(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	58	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	105	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException(this.cols);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException(this.cols);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException(this.cols);	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
253	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBounds();  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBounds();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBounds();	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
254	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  new  ArrayIndexOutOfBoundsException(this.cols);  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  1;  i  <  this.cols;  ++i)  {  ArrayIndexOutOfBoundsException  i  =  new  ArrayIndexOutOfBoundsException(this.cols);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    1;    i    <    this.cols;    ++i)    {    ArrayIndexOutOfBoundsException  i  =  new  ArrayIndexOutOfBoundsException(this.cols);	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
255	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getRemainders();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jf.getRemainders();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jf.getRemainders();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
257	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.rows  +  3;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	14	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  3;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows  +  3;  ++i)  {	  for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	14	replace
259	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  0);	  int    rows    =    Math.min(resultsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
260	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  '.class'  expected	29	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  i  =  0;  i  <  residuals.length;  ++i)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final  double  i  =  0;  i  <  residuals.length;  ++i)  {	  	non-compiled	[CE]  >  expected	18	None	add
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  =  DEFAULT_MAX_ITERATIONS;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  =  DEFAULT_MAX_ITERATIONS;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  =  DEFAULT_MAX_ITERATIONS;  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  [CE]  cannot  find  symbol  remainders  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  remainders	73	None	replace
265	[BUG]  [BUGGY]  for(final  int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  cannot  assign  a  value  to  final  variable  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(final  int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(final  int  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  i	70	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.results.length;  ++i)  {  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.results.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.results.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWidths.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  results	108	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  double  i  =  0;  i  <  this.cols;  ++i);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  double  i  =  0;  i  <  this.cols;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  double  i  =  0;  i  <  this.cols;  ++i);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  double  i  =  0;  i  <  this.cols;  ++i);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  double  i  =  0;  i  <  this.cols;  ++i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  double  i  =  0;  i  <  this.cols;  ++i);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
270	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  3);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  3);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
271	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  1);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  for(int  i  =  0;  i  <  2)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getColumns();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  i  =  0;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    For(int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  4;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  4;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  For(int  i  =  0;  i  <  4;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    For(int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    int  i  =  0;  ++i)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Requires  failed. ");  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Requires  failed. ");  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    3;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Requires  failed. ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
282	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainings.length,  criterion  *  1);	  int    rows    =    Math.min(remainings.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ']'  expected	110	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  remainings[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  remainings[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  remainings[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ']'  expected	52	None	replace
285	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  2  -  criterion);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  2  -  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  2  -  criterion);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.cols);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.cols);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.cols);	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException(this.cols);  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException(this.cols);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    ArrayIndexOutOfBounds  exception  =  new  ArrayIndexOutOfBoundsException(this.cols);	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.cols  +  1);  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.cols  +  1);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.cols  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRemainders();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRemainders();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double[][]  residuals  =  jF.getRemainders();	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  if(this.rows!=  0)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  if(this.rows!=  0)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    if(this.rows!=  0)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  int  i  =  this.rows  -  1;  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  int  i  =  this.rows  -  1;  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    int  i  =  this.rows  -  1;  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  if(this.rows!=  0)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  if(this.rows!=  0)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    if(this.rows!=  0)  {  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][][]  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  <identifier>  expected	40	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i],  criterion);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i],  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i],  criterion);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	76	None	replace
299	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRemainders()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRemainders()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRemainders()  +  1;	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
300	[BUG]  [BUGGY]  for(final  int  i  =  0;  i  <  2;  ++i)  {  [CE]  cannot  assign  a  value  to  final  variable  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(final  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(final  int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    final    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  i	67	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    final    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
302	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion  +  2);	  int    rows    =    Math.min(redefinitions.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.results.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.results.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.results.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	65	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  int  i  =  this.rows  +  1;  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  int  i  =  this.rows  +  1;  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    int  i  =  this.rows  +  1;  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    for(int  i  =  0;  i  <  this.rows  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  int  i  =  this.rows  +  1;  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  int  i  =  this.rows  +  1;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    int  i  =  this.rows  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.fields;  ++i)  {  [CE]  cannot  find  symbol  fields  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.fields;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.fields;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  fields	23	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  residualsWeights[.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  for(int  i  =  0;  i  <  residualsWeights[.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    for(int  i  =  0;  i  <  residualsWeights[.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  int  i  =  0;  i  <  residualsWeights.length;  ++i);  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  int  i  =  0;  i  <  residualsWeights.length;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    int  i  =  0;  i  <  residualsWeights.length;  ++i);	  	non-compiled	[CE]  >  expected	20	None	add
311	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  residuals  =  new  double[remainings.length  +  i];  System.arraycopy(variables,  0,  }	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    residuals    =    new    double[remainings.length    +    i];    System.arraycopy(variables,    0,    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.rows!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.rows!=  null)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.rows!=  null)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  if(this.rows!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  if(this.rows!=  null)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  if(this.rows!=  null)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
314	[BUG]  [BUGGY]  final  double[][]  residuals  =  remainings.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  remainings.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  remainings.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  remainings	57	None	replace
315	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRemainders();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getRemainders();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRemainders();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	47	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	47	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  0;  i  <  2;  --i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2;    --i)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
321	[BUG]  [BUGGY]  double[][]  residuals  =  getRowSize()  /  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  getRowSize()  /  2;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  getRowSize()  /  2;	  double[][]    residuals    =    getRowSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
322	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  throw  new  Il  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  throw  new  Il	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  result  =  Math.rint(results[i]);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  result  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  result  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
325	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  '.class'  expected	30	None	replace
326	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion  +  2);	  int    rows    =    Math.min(results.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
327	[BUG]  [BUGGY]  for(final  double[][]  rows  =  jF.getRows();  i  <  rows.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(final  double[][]  rows  =  jF.getRows();  i  <  rows.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(final  double[][]  rows  =  jF.getRows();  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  double  i  =  0;  i  <  this.rows;  ++i);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  double  i  =  0;  i  <  this.rows;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  double  i  =  0;  i  <  this.rows;  ++i);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.cols;  ++i);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  double  i  =  0;  i  <  this.rows;  ++i);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  double  i  =  0;  i  <  this.rows;  ++i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  double  i  =  0;  i  <  this.rows;  ++i);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  resultsWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	107	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.values.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.values.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    3;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  5;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  5;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  5;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    3;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
337	[BUG]  [BUGGY]  if(results!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(results!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(results!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    if(recipes[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
338	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRows()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getRows()  +  1;  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRows()  +  1;	  final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  ';'  expected	41	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  <identifier>  expected	41	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  ';'  expected	41	None	replace
342	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRemainderSize();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRemainderSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRemainderSize();	  double[][]    residuals    =    jF.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
343	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.cols  +  3;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	14	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  3;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols  +  3;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	14	replace
345	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
346	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
347	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
348	[BUG]  [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings  ==  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	9	None	replace
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker();  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker();	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  --i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  --i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  --i)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
351	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainders.length,  criterion  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainders.length,  criterion  +  2);	  int    rows    =    Math.min(remainders.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  1;  i  <  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  for(int  i  =  1;  i  <  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    1;    ++i)    {    for(int  i  =  1;  i  <  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	28	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  r  =  Math.rint(results[i]);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  r  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  r  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	28	None	replace
355	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getRemainings();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getRemainings();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getRemainings();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
356	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columns.length;  ++i)  {  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.columns.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.columns.length;  ++i)  {	  for(int    i    =    0;    i    <    columns.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  columns	66	None	replace
357	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  '.class'  expected	111	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  result  =  Math.rint(results[i]);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  result  =  Math.rint(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  result  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
360	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
361	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Matrix  out  of  range. ");  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Matrix  out  of  range. ");  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Matrix  out  of  range. ");	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	46	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
364	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
365	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  '.class'  expected	82	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    +    1;    ++i)    {    int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  type	37	None	add
367	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  i  =  0;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
368	[BUG]  [BUGGY]  double[][]  residuals  =  function.getRowSize()  +  jF.getColumnSize();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  function.getRowSize()  +  jF.getColumnSize();  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  function.getRowSize()  +  jF.getColumnSize();	  double[][]    residuals    =    function.getRowSize();    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
369	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainings.length,  criterion  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainings.length,  criterion  +  2);	  int    rows    =    Math.min(remainings.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
370	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    For(int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  '.class'  expected	60	None	replace
371	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	27	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  for(int  i  =  0;  i  <  2)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  for(int  i  =  0;  i  <  2)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    for(int    i    =    0;    i    <    2)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols;  ++i)  {  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(this.cols!=  null)  {  for(int  i  =  0;  i  <  this.cols	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(this.cols!=    null)    {    for(int    i    =    0;    i    <    this.cols;    ++i)    {    }    final    double    residual    =    residuals[i];    criterion    +=    residual    *    residualsWeights[i];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
375	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    }    	non-compiled	[CE]  ']'  expected	101	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residues[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residues[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residues[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    }    	non-compiled	[CE]  ']'  expected	101	None	replace
377	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion  *  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  criterion  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(redefinitions.length,  criterion  *  2);	  int    rows    =    Math.min(redefinitions.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {	  for(int    i    =    0;    i    <    columns.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  residues	66	None	replace
379	[BUG]  [BUGGY]  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
380	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
381	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getCols();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getCols();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double[][]  residuals  =  jF.getCols();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
382	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  Residues.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  Residues.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    for(int  i  =  0;  i  <  Residues.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
383	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    residuals.length;    ++i)    {    for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    	non-compiled	[CE]  <identifier>  expected	88	None	replace
385	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( "  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  throw  new  IllegalArgumentException( "	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  rows  =	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
387	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getRows();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  <identifier>  expected	39	None	replace
388	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  coefficient);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion,  coefficient);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion,  coefficient);	  int    rows    =    Math.min(results.length,    criterion,    cost);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0;  i  <  DEFAULT_MIN_ITERATIONS;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS;  ++i)  {  for(int  i  =  0;  i  <  DEFAULT_MIN_ITERATIONS;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    for(int  i  =  0;  i  <  DEFAULT_MIN_ITERATIONS;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
390	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  4;  ++i)  {  for(int  i  =  0;  i  <  3;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    4;    ++i)    {    for(int  i  =  0;  i  <  3;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
391	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
392	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ']'  expected	52	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	76	None	replace
394	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    }    	non-compiled	[CE]  ']'  expected	48	None	replace
395	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double[][]  residuals  =  jF.getColumns();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double[][]    residuals    =    jF.getColumns();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol  columns	97	None	replace
396	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  }  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(this.rows!=  null)  {  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    if(this.rows!=    null)    {    for(int    i    =    0;    i    <    this.rows;    ++i)    {    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	94	None	replace
397	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRowRemainders();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.getRowRemainders();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.getRowRemainders();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
398	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.cols;  ++i)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  i  =  0;  i  <  this.cols;  ++i)  {	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    int    i    =    0;    i    <    this.cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
399	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double[][]  cols	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  ';'  expected	41	None	replace
400	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  jF.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    	non-compiled	[CE]  ';'  expected	41	None	replace
401	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  if(remainings!=  null)  {  return  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    iterations;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    if(remainings!=    null)    {    return    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  this.cols  -  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	45	4	replace
403	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  -  1;  ++i)  {  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  -  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.cols  -  1;  ++i)  {	  for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    	compilable	  [FE]  AssertionFailedError  	45	4	replace
404	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  1,  factor);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  criterion  +  1,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  criterion  +  1,  factor);	  int    rows    =    Math.min(results.length,    criterion    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
405	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion  +  1,  criterion);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  criterion  +  1,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(resultsWeights.length,  criterion  +  1,  criterion);	  int    rows    =    Math.min(resultsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
406	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  3);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(results.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(results.length,  3);	  int    rows    =    Math.min(results.length,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
407	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  residuals  =  jF.getRows();	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  '.class'  expected	56	None	replace
408	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residues[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residues[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residues[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  ']'  expected	110	None	replace
409	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  =	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
410	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  rows  =  jF.getRows();  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  cols	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    rows    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double[][]    cols    =    	non-compiled	[CE]  ';'  expected	40	None	replace
411	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  int  i  =  0;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    int  i  =  0;  ++i)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
412	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.cols  +  1;  ++i)  {  for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.cols    +    1;    ++i)    {    for(int  i  =  0;  i  <  this.cols  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
413	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	9	None	replace
414	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.sqrt  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getColumns();  if(cols.length  >  0)  {  return  Math.sqrt	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
415	[BUG]  [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  final  double[][]  cols  =  function.getRows();  if(cols.length  >  0)  {  return  Math.sqrt	  if(remainings    ==    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    final    double[][]    cols    =    function.getRows();    if(cols.length    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	9	None	replace
416	[BUG]  [BUGGY]  final  double[][]  residuals  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  final  double[][]  residuals  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	final  double[][]  residuals  =  jF.getColumns();  for(int  i  =  0;  i  <  remainings.length;  ++i)  {	  final    double[][]    residuals    =    jF.getRows();    for(int    i    =    0;    i    <    remainings.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
417	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	add	for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS  +  1;  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	14	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  DEFAULT_MAX_ITERATIONS  +  1;  ++i)  {	  for(int    i    =    0;    i    <    DEFAULT_MAX_ITERATIONS;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	14	replace
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  int  i  =  0;  i  <  this.rows;  ++i);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    int    i    =    0;    i    <    this.rows;    ++i);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.rows  -  1;  ++i)  {  for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int    i    =    0;    i    <    this.rows    -    1;    ++i)    {    for(int  i  =  0;  i  <  this.rows  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
421	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	int  rows  =  Math.min(remainingsWeights.length,  0);	  int    rows    =    Math.min(remainingsWeights.length,    criterion);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
422	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  '.class'  expected	63	None	replace
423	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  For(int  i  =  0;  i  <  2;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    For(int    i    =    0;    i    <    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
424	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  segments;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  segments  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  segments;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  segments;  ++i)  {  final  double  residual  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    residual    =    Math.sqrt(results[i]);    	non-compiled	[CE]  cannot  find  symbol  segments	107	None	replace
425	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  this.rows;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  For(int  i  =  0;  i  <  this.rows;  ++i)  {	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    For(int    i    =    0;    i    <    this.rows;    ++i)    {    	non-compiled	[CE]  '.class'  expected	24	None	replace
426	[BUG]  [BUGGY]  double[][]  residuals  =  jF.remainings();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  double[][]  residuals  =  jF.remainings();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	double[][]  residuals  =  jF.remainings();	  double[][]    residuals    =    jF.getRemainings();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
427	[BUG]  [BUGGY]  if(remainings!=  null  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;      [BUGGY]  if(remainings!=  null  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	241	241	1	replace	if(remainings!=  null  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  i++)  {  if(recipes[i]  >  0)  {  continue;  }	  if(remainings!=    null)    {    for(int    i    =    0;    i    <    residuals.length;    i++)    {    if(recipes[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
