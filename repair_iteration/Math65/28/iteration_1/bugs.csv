bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  residual  =  this.results[i];  [CE]  cannot  find  symbol  results  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  this.results[i];  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i];	final  double  residual  =  residuals[i];  	non-compiled	[CE]  cannot  find  symbol  results	55	None	replace
2	[BUG]  [BUGGY]  final  double  residual  =  criterions[i];  [CE]  cannot  find  symbol  criterions  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  criterions[i];  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterions[i];	final  double  residual  =  residuals[i];  	non-compiled	[CE]  cannot  find  symbol  criterions	55	None	replace
3	[BUG]  [BUGGY]  final  double  residual  =  jF[i];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  jF[i];  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i];	final  double  residual  =  residuals[i];  	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	55	None	replace
4	[BUG]  [BUGGY]  final  double  residual  =  mMatrixFunctions[i];  [CE]  cannot  find  symbol  mMatrixFunctions  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  mMatrixFunctions[i];  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mMatrixFunctions[i];	final  double  residual  =  residuals[i];  	non-compiled	[CE]  cannot  find  symbol  mMatrixFunctions	55	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	  	final  double  residual  =  residuals[i];  	non-compiled	[CE]  cannot  find  symbol  residual	55	None	replace
6	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }		non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	56	None	add
7	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);		non-compiled	[CE]  ']'  expected	56	None	add
8	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);		non-compiled	[CE]  illegal  start  of  expression	56	None	add
9	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);		non-compiled	[CE]  ']'  expected	56	None	add
10	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }		non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	56	None	add
11	[BUG]  [BUGGY]  final  double  residual  =  ji.remainders[i];  [CE]  cannot  find  symbol  ji  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  ji.remainders[i];  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  ji.remainders[i];	final  double  residual  =  residuals[i];  	non-compiled	[CE]  cannot  find  symbol  ji	55	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  2;	final  double  residual  =  residuals[i];  	compilable	  [FE]  AssertionFailedError  	55	3	replace
13	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  2;	final  double  residual  =  residuals[i];  	compilable	  [FE]  AssertionFailedError  	55	3	replace
14	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	56	None	add
15	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	56	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }		non-compiled	[CE]  illegal  start  of  expression	56	None	add
17	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }		non-compiled	[CE]  illegal  start  of  expression	56	None	add
18	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }		non-compiled	[CE]  illegal  start  of  expression	56	None	add
19	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i];  [CE]  cannot  find  symbol  remainders  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  this.remainders[i];  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i];	final  double  residual  =  residuals[i];  	non-compiled	[CE]  cannot  find  symbol  remainders	55	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);	final  double  residual  =  residuals[i];  	compilable	  [FE]  AssertionFailedError  	55	4	replace
21	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);	final  double  residual  =  residuals[i];  	compilable	  [FE]  AssertionFailedError  	55	4	replace
22	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);		non-compiled	[CE]  ']'  expected	56	None	add
23	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);		non-compiled	[CE]  ']'  expected	56	None	add
24	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);		non-compiled	[CE]  ']'  expected	56	None	add
25	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);		non-compiled	[CE]  ']'  expected	56	None	add
