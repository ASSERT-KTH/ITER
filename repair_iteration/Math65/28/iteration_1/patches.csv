bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	6	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	6	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	25	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	25	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	25	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	25	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	9	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	9	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	9	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	9	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	24	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	24	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	24	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	24	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainders.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainders.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainders.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
37	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  Final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  Final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    Final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);	  	non-compiled	[CE]  not  a  statement	20	None	add
38	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residue  =  residuals[i]  *  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residue  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residue  =  residuals[i]  *  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
39	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residues[i]  *  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residues[i]  *  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residual  =  residues[i]  *  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
40	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i  +  1];  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.remainders[i  +  1];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i  +  1];	  final    double    residual    =    this.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
41	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  /  2;  [CE]  cannot  find  symbol  remainders  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.remainders[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  /  2;	  final    double    residual    =    this.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
42	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  -  1;  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.remainders[i]  -  1;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  -  1;	  final    double    residual    =    this.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
43	[BUG]  [BUGGY]  final  double  residual  =  jF.remainders[i];  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF.remainders[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.remainders[i];	  final    double    residual    =    ji.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	11	None	replace
44	[BUG]  [BUGGY]  final  double  residual  =  jf.remainders[i];  [CE]  cannot  find  symbol  jf  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jf.remainders[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jf.remainders[i];	  final    double    residual    =    ji.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  jf	11	None	replace
45	[BUG]  [BUGGY]  final  double  residual  =  i.remainders[i];  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  i.remainders[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  i.remainders[i];	  final    double    residual    =    ji.remainders[i];    	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
50	[BUG]  [BUGGY]  final  double  residual  =  mRows[i];  [CE]  cannot  find  symbol  mRows  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  mRows[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mRows[i];	  final    double    residual    =    mMatrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  mRows	4	None	replace
51	[BUG]  [BUGGY]  final  double  residual  =  mRaw[i];  [CE]  cannot  find  symbol  mRaw  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  mRaw[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mRaw[i];	  final    double    residual    =    mMatrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  mRaw	4	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  /  2;  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.results[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  /  2;	  final    double    residual    =    this.results[i];    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
55	[BUG]  [BUGGY]  final  double  residual  =  this.results[i  +  1];  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.results[i  +  1];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i  +  1];	  final    double    residual    =    this.results[i];    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
56	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  &  0xff;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.results[i]  &  0xff;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  &  0xff;	  final    double    residual    =    this.results[i];    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  Math.rint(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	21	4	replace
58	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	21	4	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	21	12	replace
60	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	21	12	replace
61	[BUG]  [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(remainings[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion  *  Math.sqrt(remainings[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
62	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(remainings[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(remainings[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	21	None	replace
63	[BUG]  [BUGGY]  final  double  residual  =  criterion[i];  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  criterion[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion[i];	  final    double    residual    =    criterions[i];    	non-compiled	[CE]  array  required,  but  double  found	2	None	replace
64	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residual  =  residuals[i]  /  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residual  =  residuals[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    final  double  residual  =  residuals[i]  /  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	12	None	add
65	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  Final  double  residual  =  residuals[i]  /  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  Final  double  residual  =  residuals[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    Final  double  residual  =  residuals[i]  /  2;	  	non-compiled	[CE]  not  a  statement	12	None	add
66	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  remaining  =  residuals[i]  /  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  remaining  =  residuals[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    final  double  remaining  =  residuals[i]  /  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	12	None	add
67	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residue  =  residuals[i]  /  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residue  =  residuals[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    final  double  residue  =  residuals[i]  /  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	12	None	add
68	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residual  =  residues[i]  /  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residual  =  residues[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    final  double  residual  =  residues[i]  /  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	12	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	10	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	10	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
82	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]);	  final    double    residual    =    jF[i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	3	None	replace
83	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])/  2;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])/  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])/  2;	  final    double    residual    =    jF[i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	3	None	replace
84	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]));  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]));	  final    double    residual    =    jF[i];    	non-compiled	[CE]  ';'  expected	3	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  2  +  1;	  final    double    residual    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	13	12	replace
86	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  2  +  1;	  final    double    residual    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	13	12	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  2;	  final    double    residual    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
88	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  2;	  final    double    residual    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  1;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  1;	  final    double    residual    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
90	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  1;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  1;	  final    double    residual    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
91	[BUG]  [BUGGY]  final  double  residual  =  jF[i  +  1];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF[i  +  1];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i  +  1];	  final    double    residual    =    jF[i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	3	None	replace
92	[BUG]  [BUGGY]  final  double  residual  =  jF[i].remainder;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF[i].remainder;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].remainder;	  final    double    residual    =    jF[i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	3	None	replace
93	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  criterion  =  residuals[i]  /  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  criterion  =  residuals[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    final  double  criterion  =  residuals[i]  /  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	12	None	add
94	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residual  =  residuals[i]  /  3;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  /  2;  final  double  residual  =  residuals[i]  /  3;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2;    final  double  residual  =  residuals[i]  /  3;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	12	None	add
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(resultsWeights[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(resultsWeights[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  if(resultsWeights[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(resultsWeights[i]);	      	non-compiled	[CE]  ']'  expected	5	None	replace
97	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  i);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  i);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remainingsWeights,  i);	      	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	5	None	replace
98	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(resultsWeights[i]);  [CE]  cannot  find  symbol  resultsWeights  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  criterion  +=  Math.sqrt(resultsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	criterion  +=  Math.sqrt(resultsWeights[i]);	      	non-compiled	[CE]  cannot  find  symbol  resultsWeights	5	None	replace
99	[BUG]  [BUGGY]  final  double  residual  =  this.matrixFunctions[i];  [CE]  cannot  find  symbol  matrixFunctions  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.matrixFunctions[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.matrixFunctions[i];	  final    double    residual    =    mMatrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  matrixFunctions	4	None	replace
100	[BUG]  [BUGGY]  final  double  residual  =  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  parameters[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  parameters[i];	  final    double    residual    =    mMatrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	4	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
103	[BUG]  [BUGGY]  final  double  residual  =  ji[i];  [CE]  cannot  find  symbol  ji  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  ji[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  ji[i];	  final    double    residual    =    criterions[i];    	non-compiled	[CE]  cannot  find  symbol  ji	2	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	25	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	25	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
113	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(remainders[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(remainders[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainders	21	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  Math.cos(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
115	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.cos(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	21	1	replace
116	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  i);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  i);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  i);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	21	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  -  1;  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.results[i]  -  1;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  -  1;	  final    double    residual    =    this.results[i];    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
121	[BUG]  [BUGGY]  final  double  residual  =  jacobian.remainders[i];  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jacobian.remainders[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jacobian.remainders[i];	  final    double    residual    =    ji.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	11	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
123	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(remainders[i]);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(remainders[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  *  Math.sqrt(remainders[i]);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
124	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(result);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(result);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  *  Math.sqrt(result);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
125	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(period);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  *  Math.sqrt(period);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  *  Math.sqrt(period);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	6	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	6	None	replace
129	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].remainder;  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.remainders[i].remainder;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].remainder;	  final    double    residual    =    this.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
130	[BUG]  [BUGGY]  final  double  residual  =  mMatrixFunctions[i].remainder;  [CE]  cannot  find  symbol  mMatrixFunctions  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  mMatrixFunctions[i].remainder;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mMatrixFunctions[i].remainder;	  final    double    residual    =    mMatrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  mMatrixFunctions	4	None	replace
131	[BUG]  [BUGGY]  final  double  residual  =  variables[i];  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  variables[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  variables[i];	  final    double    residual    =    mMatrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.results.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  this.results.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.results.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
133	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  /  2;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  jF[i]  /  2;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  /  2;	  final    double    residual    =    jF[i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	3	None	replace
134	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].result;  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.results[i].result;  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].result;	  final    double    residual    =    this.results[i];    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
135	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.sqrt(criterion);	  final    double    residual    =    this.results[i];    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
136	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  remainings[i]  *  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion);  final  double  residual  =  remainings[i]  *  Math.sqrt(criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final  double  residual  =  remainings[i]  *  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	20	None	add
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
138	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remaindersWeights,  i);	      	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	5	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	10	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]    final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	10	None	replace
