bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  residue  =  residuals[i]  /  2;  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residue  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residue  =  residuals[i]  /  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    residue    =    residuals[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residual	67	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2.0;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  2.0;	  final    double    residual    =    residuals[i]    /    2;    final    double    residue    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	67	3	replace
3	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2.0;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2.0;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  2.0;	  final    double    residual    =    residuals[i]    /    2;    final    double    residue    =    residuals[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	67	3	replace
4	[BUG]  [BUGGY]  final  double  residual  =  jF[i].remainder.doubleValue();  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i].remainder.doubleValue();  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].remainder.doubleValue();	  final    double    residual    =    jF[i].remainder;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	92	None	replace
5	[BUG]  [BUGGY]  final  double  residual  =  jF[i].getRMS();  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i].getRMS();  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].getRMS();	  final    double    residual    =    jF[i].remainder;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	92	None	replace
6	[BUG]  [BUGGY]  final  double  residual  =  jF[i].remainder  +  1;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i].remainder  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].remainder  +  1;	  final    double    residual    =    jF[i].remainder;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	92	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	122	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	122	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	122	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	12	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	12	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	24	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	24	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  '.class'  expected	24	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.log(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  Math.log(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    Final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	37	12	replace
16	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.log(criterion);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.log(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.log(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    Final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	37	12	replace
17	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(remainders[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	123	None	replace
18	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(rows[i]);  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(rows[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(rows[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  array  required,  but  int  found	123	None	replace
19	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(rederemainders[i]);  [CE]  cannot  find  symbol  rederemainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(rederemainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(rederemainders[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  rederemainders	123	None	replace
20	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(redegrations[i]);  [CE]  cannot  find  symbol  redegrations  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(redegrations[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(redegrations[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  redegrations	123	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.rows[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.rows[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.rows[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	106	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	106	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	19	None	replace
24	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	19	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	19	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	53	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
29	[BUG]  [BUGGY]  final  double  residual  =  jacobian.remainders[i]  /  2;  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jacobian.remainders[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jacobian.remainders[i]  /  2;	  final    double    residual    =    jacobian.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	121	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(this.rows[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(this.rows[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(this.rows[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	105	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  criterions;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  criterions;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  criterions;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  iterations;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  iterations;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	7	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    2;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
41	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].getRemainder();  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i].getRemainder();  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].getRemainder();	  final    double    residual    =    this.remainders[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  remainders	129	None	replace
42	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].getRMS();  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i].getRMS();  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].getRMS();	  final    double    residual    =    this.remainders[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  remainders	129	None	replace
43	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].remainder  /  2;  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i].remainder  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].remainder  /  2;	  final    double    residual    =    this.remainders[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  remainders	129	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
45	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  '.class'  expected	9	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	127	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(getMatrix()  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(getMatrix()  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  if(getMatrix()  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
49	[BUG]  [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(jF[i])/  2;  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(jF[i])/  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  results[i]  *  Math.rint(jF[i])/  2;	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i])/    2;    	non-compiled	[CE]  cannot  find  symbol  results	83	None	replace
50	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(variables[i])/  2;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(variables[i])/  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(variables[i])/  2;	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i])/    2;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	83	None	replace
51	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(period);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(period);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(period);    	non-compiled	[CE]  cannot  find  symbol  period	125	None	replace
52	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(period,  criterion);  [CE]  cannot  find  symbol  period  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(period,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(period,  criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(period);    	non-compiled	[CE]  cannot  find  symbol  period	125	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor,  cost);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor,  cost);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor,  cost);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	110	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	110	None	replace
55	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	110	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    resultsWeights;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
57	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    resultsWeights;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  '.class'  expected	111	None	replace
58	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i  +  1);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remaindersWeights,  i  +  1);	  int    residualsWeights    =    Math.min(remaindersWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	138	None	replace
59	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  i  +  1);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  i  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remainingsWeights,  i  +  1);	  int    residualsWeights    =    Math.min(remaindersWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	138	None	replace
60	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i  +  2);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i  +  2);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remaindersWeights,  i  +  2);	  int    residualsWeights    =    Math.min(remaindersWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	138	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	104	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	104	None	replace
63	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  '.class'  expected	104	None	replace
64	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion,  i);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion,  i);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	116	None	replace
65	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	116	None	replace
66	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.sqrt(remainings[i]);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.sqrt(remainings[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	116	None	replace
67	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.sqrt(results[i]);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.sqrt(results[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.sqrt(results[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	116	None	replace
68	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  /  2;  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  /  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residues[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residues	68	None	replace
69	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  2;  [CE]  cannot  find  symbol  residues  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residues[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residues	68	None	replace
70	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  /  2.0;  [CE]  cannot  find  symbol  residues  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  /  2.0;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  /  2.0;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residues[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residues	68	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	77	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	77	None	replace
73	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  residual  =  residuals[i]  /  2  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  residual  =  residuals[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2    +    1;    final  double  residual  =  residuals[i]  /  2  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	85	None	add
74	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  Final  double  residual  =  residuals[i]  /  2  +  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  Final  double  residual  =  residuals[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2    +    1;    Final  double  residual  =  residuals[i]  /  2  +  1;	  	non-compiled	[CE]  not  a  statement	85	None	add
75	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  remaining  =  residuals[i]  /  2  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  remaining  =  residuals[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2    +    1;    final  double  remaining  =  residuals[i]  /  2  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	85	None	add
76	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  residue  =  residuals[i]  /  2  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  residue  =  residuals[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2    +    1;    final  double  residue  =  residuals[i]  /  2  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	85	None	add
77	[BUG]  [BUGGY]  final  double  residual  =  criterion[i],  cost;  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion[i],  cost;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion[i],  cost;	  final    double    residual    =    criterion[i];    	non-compiled	[CE]  array  required,  but  double  found	63	None	replace
78	[BUG]  [BUGGY]  final  double  residual  =  criterion[i]  &  0xff;  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion[i]  &  0xff;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion[i]  &  0xff;	  final    double    residual    =    criterion[i];    	non-compiled	[CE]  array  required,  but  double  found	63	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	76	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainingsWeights.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.remainingsWeights.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.remainingsWeights.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
84	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  '.class'  expected	80	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
87	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals[i]  =  Math.rint(remainders[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
88	[BUG]  [BUGGY]  final  double  remaining  =  residuals[i]  /  2;  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  remaining  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  remaining  =  residuals[i]  /  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    remaining    =    residuals[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residual	66	None	replace
89	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  &  0xff;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  &  0xff;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  &  0xff;	  final    double    residual    =    this.results[i]    &    0xff;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	56	None	replace
90	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  -  0xff;  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  -  0xff;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  -  0xff;	  final    double    residual    =    this.results[i]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  results	56	None	replace
91	[BUG]  [BUGGY]  final  double  residual  =  this.rs[i]  &  0xff;  [CE]  cannot  find  symbol  rs  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.rs[i]  &  0xff;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.rs[i]  &  0xff;	  final    double    residual    =    this.results[i]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  rs	56	None	replace
92	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	2	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	2	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	2	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	26	None	replace
96	[BUG]  [BUGGY]  final  double  residual  =  variables[i]  &  0xff;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  variables[i]  &  0xff;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  variables[i]  &  0xff;	  final    double    residual    =    variables[i];    	non-compiled	[CE]  cannot  find  symbol  	131	None	replace
97	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  residual  =  residuals[i]  *  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  residual  =  residuals[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    2;    final  double  residual  =  residuals[i]  *  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	87	None	add
98	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  Final  double  residual  =  residuals[i]  *  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2;  Final  double  residual  =  residuals[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    2;    Final  double  residual  =  residuals[i]  *  2;	  	non-compiled	[CE]  not  a  statement	87	None	add
99	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  remaining  =  residuals[i]  *  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  remaining  =  residuals[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    2;    final  double  remaining  =  residuals[i]  *  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	87	None	add
100	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  residual  =  residues[i]  *  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  residual  =  residues[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    2;    final  double  residual  =  residues[i]  *  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	87	None	add
101	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  residual  =  residuals[i]  *  3;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  residual  =  residuals[i]  *  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    2;    final  double  residual  =  residuals[i]  *  3;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	87	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  3;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
103	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  3;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  3;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  4;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  4;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
105	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  4;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  4;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  4;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	compilable	  [FE]  AssertionFailedError  	94	4	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  3;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	compilable	  [FE]  AssertionFailedError  	94	2	replace
107	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  3;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  3;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	compilable	  [FE]  AssertionFailedError  	94	2	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	15	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	15	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	15	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	15	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	20	None	replace
113	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	20	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	20	None	replace
115	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  /  2  +  1;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  /  2  +  1;	  final    double    residual    =    this.results[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  results	54	None	replace
116	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  /  1;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  /  1;	  final    double    residual    =    this.results[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  results	54	None	replace
117	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  2;  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  2;	  final    double    residual    =    this.results[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  results	54	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
120	[BUG]  [BUGGY]  final  double  residual  =  jF[i  *  1];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i  *  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i  *  1];	  final    double    residual    =    jF[i    +    1];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	91	None	replace
121	[BUG]  [BUGGY]  final  double  residual  =  jF[i  +  1]  *  Math.rint(resultsWeights[i]);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i  +  1]  *  Math.rint(resultsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i  +  1]  *  Math.rint(resultsWeights[i]);	  final    double    residual    =    jF[i    +    1];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	91	None	replace
122	[BUG]  [BUGGY]  final  double  residual  =  jF[i  +  2];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i  +  2];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i  +  2];	  final    double    residual    =    jF[i    +    1];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	91	None	replace
123	[BUG]  [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  remainings[i]  *  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    remainings[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	136	None	replace
124	[BUG]  [BUGGY]  final  double  residual  =  remainders[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  remainders  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  remainders[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  remainders[i]  *  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    remainings[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainders	136	None	replace
125	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  *  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    remainings[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(resultsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(resultsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(resultsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(resultsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	109	None	replace
131	[BUG]  [BUGGY]  int  remainingsWeights  =  Math.min(remainingsWeights,  i  +  1);  [CE]  cannot  find  symbol  residual  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  remainingsWeights  =  Math.min(remainingsWeights,  i  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  remainingsWeights  =  Math.min(remainingsWeights,  i  +  1);	  int    residualsWeights    =    Math.min(remainingsWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  residual	97	None	replace
132	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  i  +  2);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  i  +  2);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remainingsWeights,  i  +  2);	  int    residualsWeights    =    Math.min(remainingsWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	97	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	10	None	replace
134	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].results[i];  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].results[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].results[i];	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
135	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].multivariate;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].multivariate;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].multivariate;	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	30	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
138	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  i);  }	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	25	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	25	None	replace
142	[BUG]  [BUGGY]  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	25	None	replace
143	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(rows[i]);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(rows[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(rows[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(remainings[i]);    	non-compiled	[CE]  array  required,  but  int  found	62	None	replace
144	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterions[i]);  [CE]  cannot  find  symbol  criterions  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterions[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(criterions[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  criterions	62	None	replace
145	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(redefinitions[i]);  [CE]  cannot  find  symbol  redefinitions  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(redefinitions[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(redefinitions[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  redefinitions	62	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  Math.rint(criterion);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	compilable	  [FE]  AssertionFailedError  	58	12	replace
148	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(criterion);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.rint(criterion);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	compilable	  [FE]  AssertionFailedError  	58	12	replace
149	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(jF,  i);  [CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(jF,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(jF,  i);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	non-compiled	[CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;	58	None	replace
150	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(value,  criterion);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(value,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(value,  criterion);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	non-compiled	[CE]  cannot  find  symbol  value	58	None	replace
151	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
153	[BUG]  [BUGGY]  final  double  residual  =  jF.remainders[i  +  1];  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF.remainders[i  +  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.remainders[i  +  1];	  final    double    residual    =    jF.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	43	None	replace
154	[BUG]  [BUGGY]  final  double  residual  =  jF.remainders[i]  +  1;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF.remainders[i]  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.remainders[i]  +  1;	  final    double    residual    =    jF.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	43	None	replace
155	[BUG]  [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(jF[i]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(jF[i]));  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  results[i]  *  Math.rint(jF[i]));	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  ';'  expected	84	None	replace
156	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]  +  1));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]  +  1));  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i]  +  1));	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  ';'  expected	84	None	replace
157	[BUG]  [BUGGY]  final  double  residual  =  Math.rint(resultsWeights[i]));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  Math.rint(resultsWeights[i]));  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  Math.rint(resultsWeights[i]));	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  ';'  expected	84	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
159	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    final  double  residual  =  residuals[i]  *  Math.rint(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	57	None	add
160	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.Rint(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.Rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    final  double  residual  =  residuals[i]  *  Math.Rint(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	57	None	add
161	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  Final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  Final  double  residual  =  residuals[i]  *  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    Final  double  residual  =  residuals[i]  *  Math.rint(criterion);	  	non-compiled	[CE]  not  a  statement	57	None	add
162	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residue  =  residuals[i]  *  Math.rint(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residue  =  residuals[i]  *  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    final  double  residue  =  residuals[i]  *  Math.rint(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	57	None	add
163	[BUG]  [BUGGY]  final  double  residual  =  mMatrix[i];  [CE]  cannot  find  symbol  mMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  mMatrix[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mMatrix[i];	  final    double    residual    =    ji[i];    	non-compiled	[CE]  cannot  find  symbol  mMatrix	103	None	replace
164	[BUG]  [BUGGY]  final  double  residual  =  jacobian[i];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jacobian[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jacobian[i];	  final    double    residual    =    ji[i];    	non-compiled	[CE]  incompatible  types	103	None	replace
165	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
166	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  Final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  Final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    Final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);	  	non-compiled	[CE]  not  a  statement	59	None	add
167	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residue  =  residuals[i]  /  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residue  =  residuals[i]  /  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residue  =  residuals[i]  /  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
168	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  -  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  -  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  -  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
169	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residues[i]  /  Math.sqrt(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residues[i]  /  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residual  =  residues[i]  /  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
170	[BUG]  [BUGGY]  final  double  residual  =  this.resistances[i  +  1];  [CE]  cannot  find  symbol  resistances  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.resistances[i  +  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.resistances[i  +  1];	  final    double    residual    =    this.remainders[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  resistances	40	None	replace
171	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i  +  1]  /  2;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i  +  1]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i  +  1]  /  2;	  final    double    residual    =    this.remainders[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  remainders	40	None	replace
172	[BUG]  [BUGGY]  final  double  residual  =  this.rs[i  +  1];  [CE]  cannot  find  symbol  rs  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.rs[i  +  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.rs[i  +  1];	  final    double    residual    =    this.remainders[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  rs	40	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
176	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [CE]  '.class'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    2);    }    	non-compiled	[CE]  '.class'  expected	49	None	replace
177	[BUG]  [BUGGY]  final  double  residue  =  residuals[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residue  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residue  =  residuals[i]  *  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residue    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residual	38	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	137	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  variables.length;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	137	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	137	None	replace
182	[BUG]  [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(jF[i]);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(jF[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  results[i]  *  Math.rint(jF[i]);	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  results	82	None	replace
183	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(variables[i]);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(variables[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(variables[i]);	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	82	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  2  +  1;	  final    double    residual    =    residuals[i]    /    2    +    1;    	compilable	  [FE]  AssertionFailedError  	86	12	replace
185	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  2  +  1;	  final    double    residual    =    residuals[i]    /    2    +    1;    	compilable	  [FE]  AssertionFailedError  	86	12	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  *  1  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  2  *  1  +  1;	  final    double    residual    =    residuals[i]    /    2    +    1;    	compilable	  [FE]  AssertionFailedError  	86	12	replace
187	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  *  1  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  *  1  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  2  *  1  +  1;	  final    double    residual    =    residuals[i]    /    2    +    1;    	compilable	  [FE]  AssertionFailedError  	86	12	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
191	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainingsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
192	[BUG]  [BUGGY]  final  double  residual  =  this.results[i  +  1]  /  2;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i  +  1]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i  +  1]  /  2;	  final    double    residual    =    this.results[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  results	55	None	replace
193	[BUG]  [BUGGY]  final  double  residual  =  this.results[i  +  2];  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i  +  2];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i  +  2];	  final    double    residual    =    this.results[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  results	55	None	replace
194	[BUG]  [BUGGY]  final  double  residual  =  jF.matrixFunctions[i];  [CE]  cannot  find  symbol  matrixFunctions  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF.matrixFunctions[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.matrixFunctions[i];	  final    double    residual    =    this.matrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  matrixFunctions	99	None	replace
195	[BUG]  [BUGGY]  final  double  residual  =  this.matrixFunctions[i  +  1];  [CE]  cannot  find  symbol  matrixFunctions  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.matrixFunctions[i  +  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.matrixFunctions[i  +  1];	  final    double    residual    =    this.matrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  matrixFunctions	99	None	replace
196	[BUG]  [BUGGY]  final  double  residual  =  this.resistances[i];  [CE]  cannot  find  symbol  resistances  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.resistances[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.resistances[i];	  final    double    residual    =    this.matrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  resistances	99	None	replace
197	[BUG]  [BUGGY]  final  double  residual  =  rMatrix[i];  [CE]  cannot  find  symbol  rMatrix  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  rMatrix[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  rMatrix[i];	  final    double    residual    =    mRaw[i];    	non-compiled	[CE]  cannot  find  symbol  rMatrix	51	None	replace
198	[BUG]  [BUGGY]  final  double  residual  =  rMsg[i];  [CE]  cannot  find  symbol  rMsg  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  rMsg[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  rMsg[i];	  final    double    residual    =    mRaw[i];    	non-compiled	[CE]  cannot  find  symbol  rMsg	51	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
203	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.rint(criterion);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.rint(criterion);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
204	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(criterion,  jF);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(criterion,  jF);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.sqrt(criterion,  jF);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
205	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jF,  i);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jF,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.sqrt(jF,  i);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
206	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.log(criterion);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.log(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.log(criterion);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
207	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(rows,  i);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(rows,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(rows,  i);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(result);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	124	None	replace
208	[BUG]  [BUGGY]  final  double  residual  =  rows[i];  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  rows[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  rows[i];	  final    double    residual    =    mRows[i];    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
209	[BUG]  [BUGGY]  final  double  residual  =  rs[i];  [CE]  cannot  find  symbol  rs  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  rs[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  rs[i];	  final    double    residual    =    mRows[i];    	non-compiled	[CE]  cannot  find  symbol  rs	50	None	replace
210	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  2;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  2;	  final    double    residual    =    jF[i]    /    2;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	133	None	replace
211	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  /  2  +  1;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  /  2  +  1;	  final    double    residual    =    jF[i]    /    2;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	133	None	replace
212	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  /  1;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  /  1;	  final    double    residual    =    jF[i]    /    2;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	133	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
214	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  /  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  /  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    criterion    =    residuals[i]    /    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	93	None	replace
215	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  *  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    criterion    =    residuals[i]    /    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	93	None	replace
216	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  /  2.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  /  2.0;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  /  2.0;	  final    double    residual    =    residuals[i]    /    2;    final    double    criterion    =    residuals[i]    /    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	93	None	replace
217	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  /  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  /  1;	  final    double    residual    =    residuals[i]    /    2;    final    double    criterion    =    residuals[i]    /    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	93	None	replace
218	[BUG]  [BUGGY]  final  double  residual  =  mMatrixSquares[i];  [CE]  cannot  find  symbol  mMatrixSquares  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  mMatrixSquares[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mMatrixSquares[i];	  final    double    residual    =    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  mMatrixSquares	100	None	replace
219	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  /  2);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  /  2);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  /  2);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
220	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  -  1);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  -  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  -  1);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
221	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(rows[i]);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(rows[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(rows[i]);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
222	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(remainings[i]);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
223	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  /  1;  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  /  1;	  final    double    residual    =    this.remainders[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	42	None	replace
224	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  -  2;  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i]  -  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  -  2;	  final    double    residual    =    this.remainders[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	42	None	replace
225	[BUG]  [BUGGY]  final  double  residual  =  this.resistances[i]  -  1;  [CE]  cannot  find  symbol  resistances  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.resistances[i]  -  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.resistances[i]  -  1;	  final    double    residual    =    this.remainders[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  resistances	42	None	replace
226	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  -  2;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  -  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  -  2;	  final    double    residual    =    this.results[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  results	120	None	replace
227	[BUG]  [BUGGY]  final  double  residual  =  this.rs[i]  -  1;  [CE]  cannot  find  symbol  rs  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.rs[i]  -  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.rs[i]  -  1;	  final    double    residual    =    this.results[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  rs	120	None	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  Math.cos(criterion);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	compilable	  [FE]  AssertionFailedError  	115	1	replace
229	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.cos(criterion);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.cos(criterion);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	compilable	  [FE]  AssertionFailedError  	115	1	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  Math.cos(criterion  +  1);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	compilable	  [FE]  AssertionFailedError  	115	3	replace
231	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.cos(criterion  +  1);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	compilable	  [FE]  AssertionFailedError  	115	3	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion  -  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  Math.cos(criterion  -  1);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	compilable	  [FE]  AssertionFailedError  	115	3	replace
233	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion  -  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.cos(criterion  -  1);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	compilable	  [FE]  AssertionFailedError  	115	3	replace
234	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(jF,  residuals[i]);  [CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(jF,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(jF,  residuals[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(remainders[i]);    	non-compiled	[CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;	113	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  results[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  results[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  results[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	21	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.cols[i]);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.cols[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.cols[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	23	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	31	None	replace
242	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  residual  =  residuals[i]  *  Math.cos(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	114	None	add
243	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  Final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  Final  double  residual  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    Final  double  residual  =  residuals[i]  *  Math.cos(criterion);	  	non-compiled	[CE]  not  a  statement	114	None	add
244	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residue  =  residuals[i]  *  Math.cos(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residue  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  residue  =  residuals[i]  *  Math.cos(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	114	None	add
245	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  remaining  =  residuals[i]  *  Math.cos(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  remaining  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  remaining  =  residuals[i]  *  Math.cos(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	114	None	add
246	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residual  =  residuals[i]  /  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residual  =  residuals[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    final  double  residual  =  residuals[i]  /  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	89	None	add
247	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  Final  double  residual  =  residuals[i]  /  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  Final  double  residual  =  residuals[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    Final  double  residual  =  residuals[i]  /  1;	  	non-compiled	[CE]  not  a  statement	89	None	add
248	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residual  =  residuals[i]  /  2;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residual  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    final  double  residual  =  residuals[i]  /  2;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	89	None	add
249	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  remaining  =  residuals[i]  /  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  remaining  =  residuals[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    final  double  remaining  =  residuals[i]  /  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	89	None	add
250	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residue  =  residuals[i]  /  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residue  =  residuals[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    final  double  residue  =  residuals[i]  /  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	89	None	add
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	18	None	replace
252	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion,  0);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(criterion,  0);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(criterion,  0);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	36	None	replace
253	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  /  2  +  1;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  /  2  +  1;	  final    double    residual    =    this.remainders[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  remainders	41	None	replace
254	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  *  2;  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  *  2;	  final    double    residual    =    this.remainders[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  remainders	41	None	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  1;	  final    double    residual    =    residuals[i]    /    1;    	compilable	  [FE]  AssertionFailedError  	90	1	replace
256	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  1;	  final    double    residual    =    residuals[i]    /    1;    	compilable	  [FE]  AssertionFailedError  	90	1	replace
257	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  criterion  +=  Math.sqrt(results[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	criterion  +=  Math.sqrt(results[i]);	  criterion    +=    Math.sqrt(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  results	98	None	replace
258	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  criterion  +=  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	criterion  +=  Math.sqrt(remainings[i]);	  criterion    +=    Math.sqrt(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	98	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  4;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  *  4;	  final    double    residual    =    residuals[i]    *    2;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
260	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  4;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  4;	  final    double    residual    =    residuals[i]    *    2;    	compilable	  [FE]  AssertionFailedError  	88	2	replace
261	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  residues  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
262	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(criterion,  0);  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(criterion,  0);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(criterion,  0);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
263	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(remainings[i]);  [CE]  cannot  find  symbol  residues  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(remainings[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
264	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.rint(criterion);  [CE]  cannot  find  symbol  residues  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.rint(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
265	[BUG]  [BUGGY]  final  double  residual  =  criterion[i]  /  Math.sqrt(remainings[i]);  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion[i]  /  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion[i]  /  Math.sqrt(remainings[i]);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	non-compiled	[CE]  array  required,  but  double  found	60	None	replace
266	[BUG]  [BUGGY]  final  double  residual  =  criterion[i]  /  Math.sqrt(remainders[i]);  [CE]  array  required,  but  double  found  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion[i]  /  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion[i]  /  Math.sqrt(remainders[i]);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	non-compiled	[CE]  array  required,  but  double  found	60	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  Math.rint(i);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	60	12	replace
268	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(i);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.rint(i);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	60	12	replace
269	[BUG]  [BUGGY]  final  double  residuals  =  residuals[i];  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residuals  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residuals  =  residuals[i];	  final    double    residual    =    i.remainders[i];    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	29	None	replace
271	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].remainder;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i].remainder;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i].remainder;	  final    double    residual    =    mMatrixFunctions[i].remainder;    	non-compiled	[CE]  double  cannot  be  dereferenced	130	None	replace
272	[BUG]  [BUGGY]  final  double  residual  =  jF.matrixFunctions[i].remainder;  [CE]  cannot  find  symbol  matrixFunctions  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF.matrixFunctions[i].remainder;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.matrixFunctions[i].remainder;	  final    double    residual    =    mMatrixFunctions[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  matrixFunctions	130	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
274	[BUG]  [BUGGY]  final  double  residual  =  residuals  *  Math.sqrt(remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals  *  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals  *  Math.sqrt(remainings[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  remainings	61	None	replace
275	[BUG]  [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(variables[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion  *  Math.sqrt(variables[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  	61	None	replace
276	[BUG]  [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(rows[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(rows[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion  *  Math.sqrt(rows[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  array  required,  but  int  found	61	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainingsWeights;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.remainingsWeights;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.remainingsWeights;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
281	[BUG]  [BUGGY]  final  double  residual  =  resultsWeights[i]  *  Math.rint(jF[i])/  2;  [CE]  cannot  find  symbol  resultsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  resultsWeights[i]  *  Math.rint(jF[i])/  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  resultsWeights[i]  *  Math.rint(jF[i])/  2;	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i])/    2;    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	83	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(resultsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
283	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jacobianEvaluations[i]);  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jacobianEvaluations[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jacobianEvaluations[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  array  required,  but  int  found	123	None	replace
284	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  residuals[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  residuals[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	123	None	replace
285	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(varianceChecker,  residuals[i]);  [CE]  cannot  find  symbol  varianceChecker  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(varianceChecker,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(varianceChecker,  residuals[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  varianceChecker	123	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
287	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(jacobianEvaluations[i]);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(jacobianEvaluations[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(jacobianEvaluations[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(remainings[i]);    	non-compiled	[CE]  array  required,  but  int  found	62	None	replace
288	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(ji);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(ji);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(ji);	  final    double    residual    =    residuals[i]    *    Math.rint(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	62	None	replace
289	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  /  Math.sqrt(criterion);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  /  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  /  Math.sqrt(criterion);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
290	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jacobianEvaluations[i]);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jacobianEvaluations[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.sqrt(jacobianEvaluations[i]);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
291	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jacobian,  i);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jacobian,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.sqrt(jacobian,  i);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2.0);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2.0);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  /  2.0);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
293	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(redefsWeights,  i);  [CE]  cannot  find  symbol  redefsWeights  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  residualsWeights  =  Math.min(redefsWeights,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(redefsWeights,  i);	  int    residualsWeights    =    Math.min(remainingsWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  redefsWeights	97	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	17	None	replace
295	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.cos(remainings[i]);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	115	None	replace
296	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.cos(remainders[i]);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainders	115	None	replace
297	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(value);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(value);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.cos(value);	  final    double    residual    =    residuals[i]    *    Math.cos(criterion);    	non-compiled	[CE]  cannot  find  symbol  value	115	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
299	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  criterion  =  residuals[i]  /  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  criterion  =  residuals[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    final  double  criterion  =  residuals[i]  /  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	89	None	add
300	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i  +  2];  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i  +  2];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i  +  2];	  final    double    residual    =    this.remainders[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  remainders	40	None	replace
301	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i  +  1]  *  jF;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i  +  1]  *  jF;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i  +  1]  *  jF;	  final    double    residual    =    this.remainders[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  remainders	40	None	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  *  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  2  *  1;	  final    double    residual    =    residuals[i]    /    2    +    1;    	compilable	  [FE]  AssertionFailedError  	86	3	replace
303	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  *  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  2  *  1;	  final    double    residual    =    residuals[i]    /    2    +    1;    	compilable	  [FE]  AssertionFailedError  	86	3	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	16	None	replace
306	[BUG]  [BUGGY]  final  double  ji  =  residuals[i];  [CE]  cannot  find  symbol  residual  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  ji  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  ji  =  residuals[i];	  final    double    residual    =    ji[i];    	non-compiled	[CE]  cannot  find  symbol  residual	103	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
308	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(jF,  i);  [CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(jF,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.rint(jF,  i);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	non-compiled	[CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;	60	None	replace
309	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(jF,  i);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(jF,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.sqrt(jF,  i);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	60	None	replace
310	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.rint(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.rint(remainders[i]);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainders	60	None	replace
311	[BUG]  [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  remainings[i]  *  Math.sqrt(remainders[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    remainings[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	136	None	replace
312	[BUG]  [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(period);  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(period);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  remainings[i]  *  Math.sqrt(period);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    remainings[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	136	None	replace
313	[BUG]  [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  remainings[i]  *  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  remainings[i]  *  Math.sqrt(remainings[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    remainings[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainings	136	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	15	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  criterion  +=  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	15	None	replace
316	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(variables[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(variables[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residue    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  	38	None	replace
317	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(remainders[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  *  Math.sqrt(remainders[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residue    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	38	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  if(remainings[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    if(remainings[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
319	[BUG]  [BUGGY]  final  double  residual  =  residues[i];  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i];	  final    double    residual    =    i.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  residues	45	None	replace
320	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  &  0xff  +  1;  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  &  0xff  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  &  0xff  +  1;	  final    double    residual    =    this.results[i]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  results	56	None	replace
321	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(variables[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(variables[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(variables[i]);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
322	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  +  1);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(resultsWeights[i]  +  1);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainders[i]);  }	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	104	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  +=  Math.rint(rows[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  +=  Math.rint(rows[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  +=  Math.rint(rows[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	77	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  remainders[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  remainders[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  remainders[i]  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	77	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	137	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
328	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  /  2  +  1;  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  /  2  +  1;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residues[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residues	68	None	replace
329	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  /  1;  [CE]  cannot  find  symbol  residues  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  /  1;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residues[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  residues	68	None	replace
330	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  '.class'  expected	21	None	replace
331	[BUG]  [BUGGY]  final  double  residual  =(this.remainders[i]  -  1);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =(this.remainders[i]  -  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =(this.remainders[i]  -  1);	  final    double    residual    =    this.remainders[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	42	None	replace
332	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	criterion  +=  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    Math.sqrt(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	98	None	replace
333	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(result  *  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  criterion  +=  Math.sqrt(result  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	criterion  +=  Math.sqrt(result  *  residuals[i]);	  criterion    +=    Math.sqrt(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  result	98	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.remainings[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.remainings[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  ']'  expected	106	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	11	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  residuals[i]  =  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	6	None	replace
337	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(rows[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(rows[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  residuals[i]  =  Math.rint(rows[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    =    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	6	None	replace
338	[BUG]  [BUGGY]  final  double  residual  =  criterion[i]  *  factor;  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion[i]  *  factor;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion[i]  *  factor;	  final    double    residual    =    criterion[i];    	non-compiled	[CE]  array  required,  but  double  found	63	None	replace
339	[BUG]  [BUGGY]  final  double  residual  =  this.matrixFunctions[i].remainder;  [CE]  cannot  find  symbol  matrixFunctions  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.matrixFunctions[i].remainder;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.matrixFunctions[i].remainder;	  final    double    residual    =    this.matrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  matrixFunctions	99	None	replace
340	[BUG]  [BUGGY]  final  double  residual  =  this.matrixFunctions[i]  -  1;  [CE]  cannot  find  symbol  matrixFunctions  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.matrixFunctions[i]  -  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.matrixFunctions[i]  -  1;	  final    double    residual    =    this.matrixFunctions[i];    	non-compiled	[CE]  cannot  find  symbol  matrixFunctions	99	None	replace
341	[BUG]  [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(ji,  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(ji,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion  *  Math.sqrt(ji,  residuals[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	61	None	replace
342	[BUG]  [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(values[i]);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(values[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion  *  Math.sqrt(values[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  values	61	None	replace
343	[BUG]  [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(ji[i]);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  criterion  *  Math.sqrt(ji[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  criterion  *  Math.sqrt(ji[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	61	None	replace
344	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  '.class'  expected	25	None	replace
345	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remaindersWeights;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.remaindersWeights;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.remaindersWeights;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
346	[BUG]  [BUGGY]  final  double  residual  =  variables[i][0];  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  variables[i][0];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  variables[i][0];	  final    double    residual    =    variables[i];    	non-compiled	[CE]  cannot  find  symbol  	131	None	replace
347	[BUG]  [BUGGY]  final  double  residual  =  variables[i].remainder;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  variables[i].remainder;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  variables[i].remainder;	  final    double    residual    =    variables[i];    	non-compiled	[CE]  cannot  find  symbol  	131	None	replace
348	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])+  1;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])+  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])+  1;	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	84	None	replace
349	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(remainders[i]);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  /  Math.sqrt(remainders[i]);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
350	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(period);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(period);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  /  Math.sqrt(period);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
351	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(results[i]);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  residual  =  residuals[i]  /  Math.sqrt(results[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  residual  =  residuals[i]  /  Math.sqrt(results[i]);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	59	None	add
352	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  criterion  =  residuals[i]  /  2  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  criterion  =  residuals[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2    +    1;    final  double  criterion  =  residuals[i]  /  2  +  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	85	None	add
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.sqrt(remainders[i]  *  factor);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.sqrt(remainders[i]  *  factor);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double[]  residuals  =  Math.sqrt(remainders[i]  *  factor);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
354	[BUG]  [BUGGY]  final  double  residual  =  this.results[i  +  1]  *  jF;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i  +  1]  *  jF;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i  +  1]  *  jF;	  final    double    residual    =    this.results[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  results	55	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
356	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
357	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(period);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(period);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  *  Math.sqrt(period);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(period);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	125	None	replace
358	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jacobian,  jF,  i);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jacobian,  jF,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jacobian,  jF,  i);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	116	None	replace
359	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion,  null);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion,  null);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  criterion,  null);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	116	None	replace
360	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].value;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].value;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].value;	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
361	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].multivariateVectorialFunction;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].multivariateVectorialFunction;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].multivariateVectorialFunction;	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
362	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].multivariateVector;  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].multivariateVector;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].multivariateVector;	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
363	[BUG]  [BUGGY]  int  remainderWeights  =  Math.min(remaindersWeights,  i  +  1);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  remainderWeights  =  Math.min(remaindersWeights,  i  +  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  remainderWeights  =  Math.min(remaindersWeights,  i  +  1);	  int    residualsWeights    =    Math.min(remaindersWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	138	None	replace
364	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residuals[i]  *  Math.cos(result);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residuals[i]  *  Math.cos(result);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  residual  =  residuals[i]  *  Math.cos(result);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	114	None	add
365	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residues[i]  *  Math.cos(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residues[i]  *  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  residual  =  residues[i]  *  Math.cos(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	114	None	add
366	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residuals[i]  *  Math.cos(region);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  residual  =  residuals[i]  *  Math.cos(region);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  residual  =  residuals[i]  *  Math.cos(region);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	114	None	add
367	[BUG]  [BUGGY]  final  double  residual  =  resultsWeights[i]  *  Math.rint(jF[i]);  [CE]  cannot  find  symbol  resultsWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  resultsWeights[i]  *  Math.rint(jF[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  resultsWeights[i]  *  Math.rint(jF[i]);	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	82	None	replace
368	[BUG]  [BUGGY]  final  double  residual  =  mMatrixFunctions[i].remainder  +  1;  [CE]  cannot  find  symbol  mMatrixFunctions  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  mMatrixFunctions[i].remainder  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mMatrixFunctions[i].remainder  +  1;	  final    double    residual    =    mMatrixFunctions[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  mMatrixFunctions	130	None	replace
369	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(variables[i]);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(variables[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(variables[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  	113	None	replace
370	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(result);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	124	None	replace
371	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(value);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(value);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  value	124	None	replace
372	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.lint(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.lint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    final  double  residual  =  residuals[i]  *  Math.lint(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	57	None	add
373	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.rint(result);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residuals[i]  *  Math.rint(result);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    final  double  residual  =  residuals[i]  *  Math.rint(result);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	57	None	add
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  if(remainings[i]  >  0)  {  continue;  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    if(remainings[i]    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
377	[BUG]  [BUGGY]  final  double  residual  =  jF[i  +  1]  *  Math.sqrt(variableMultivariateVectorialFunction.getRowValue(i));  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i  +  1]  *  Math.sqrt(variableMultivariateVectorialFunction.getRowValue(i));  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i  +  1]  *  Math.sqrt(variableMultivariateVectorialFunction.getRowValue(i));	  final    double    residual    =    jF[i    +    1];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	91	None	replace
378	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(value,  i);  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(value,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(value,  i);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	non-compiled	[CE]  cannot  find  symbol  value	58	None	replace
379	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(value);  [CE]  cannot  find  symbol  value  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(value);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(value);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	non-compiled	[CE]  cannot  find  symbol  value	58	None	replace
380	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  /  2  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residuals[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residuals[i]  /  2  +  1;	  final    double    residual    =    residuals[i]    /    2;    final    double    criterion    =    residuals[i]    /    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	93	None	replace
381	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].value;  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i].value;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].value;	  final    double    residual    =    this.remainders[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  remainders	129	None	replace
382	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].remainder  +  1;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i].remainder  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].remainder  +  1;	  final    double    residual    =    this.remainders[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  remainders	129	None	replace
383	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(periods[i]);  [CE]  cannot  find  symbol  periods  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(periods[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(periods[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    Final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  periods	37	None	replace
384	[BUG]  [BUGGY]  final  double  residual  =  jacobian.remainders[i]  -  1;  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jacobian.remainders[i]  -  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jacobian.remainders[i]  -  1;	  final    double    residual    =    jacobian.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	121	None	replace
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.remainders[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(this.remainders[i]);	  for(int    i    =    0;    i    <    this.rows;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainders[i]);    	non-compiled	[CE]  ']'  expected	31	None	replace
386	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  criterion  =  residuals[i]  *  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  2;  final  double  criterion  =  residuals[i]  *  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    2;    final  double  criterion  =  residuals[i]  *  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	87	None	add
387	[BUG]  [BUGGY]  final  double  residual  =  jF[i].multivariateVectorialFunction;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i].multivariateVectorialFunction;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].multivariateVectorialFunction;	  final    double    residual    =    jF[i].remainder;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	92	None	replace
388	[BUG]  [BUGGY]  final  double  residual  =  jF[i].multivariate;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i].multivariate;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].multivariate;	  final    double    residual    =    jF[i].remainder;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	92	None	replace
389	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  -  3;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  -  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  -  3;	  final    double    residual    =    this.results[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  results	120	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	139	None	replace
391	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(jF,  i);  [CE]  cannot  find  symbol  residues  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(jF,  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(jF,  i);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
392	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(remainders[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
393	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(periods[i]);  [CE]  cannot  find  symbol  residues  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(periods[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(periods[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
394	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residues[i]  *  Math.rint(criterion);  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(criterion);  final  double  residual  =  residues[i]  *  Math.rint(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.rint(criterion);    final  double  residual  =  residues[i]  *  Math.rint(criterion);	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	57	None	add
395	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  2);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  2);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  2);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
396	[BUG]  [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(resultsWeights[i])/  2;  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(resultsWeights[i])/  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  results[i]  *  Math.rint(resultsWeights[i])/  2;	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i])/    2;    	non-compiled	[CE]  cannot  find  symbol  results	83	None	replace
397	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	10	None	replace
398	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  '.class'  expected	20	None	replace
399	[BUG]  [BUGGY]  final  double  residual  =  jF[i].value;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i].value;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i].value;	  final    double    residual    =    jF[i].remainder;    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	92	None	replace
400	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].resultSize;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].resultSize;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].resultSize;	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
401	[BUG]  [BUGGY]  final  double  residual  =  this.results[i].results[i].result;  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i].results[i].result;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i].results[i].result;	  final    double    residual    =    this.results[i].result;    	non-compiled	[CE]  cannot  find  symbol  results	134	None	replace
402	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  /  3;  [CE]  cannot  find  symbol  residues  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  /  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  /  3;	  final    double    residual    =    residuals[i]    /    2;    final    double    residual    =    residuals[i]    /    3;    	non-compiled	[CE]  cannot  find  symbol  residues	94	None	replace
403	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i  -  1);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  int  residualsWeights  =  Math.min(remaindersWeights,  i  -  1);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	int  residualsWeights  =  Math.min(remaindersWeights,  i  -  1);	  int    residualsWeights    =    Math.min(remaindersWeights,    i);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	138	None	replace
404	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(remainders[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(remainders[i]);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
405	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(results[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(results[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(results[i]);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
406	[BUG]  [BUGGY]  double  residualsWeights[i]  =  Math.rint(results[i]  /  2);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  double  residualsWeights[i]  =  Math.rint(results[i]  /  2);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	double  residualsWeights[i]  =  Math.rint(results[i]  /  2);	  double    residualsWeights[i]    =    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  ']'  expected	96	None	replace
407	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  criterion  =  residuals[i]  *  Math.cos(criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.cos(criterion);  final  double  criterion  =  residuals[i]  *  Math.cos(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    *    Math.cos(criterion);    final  double  criterion  =  residuals[i]  *  Math.cos(criterion);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	114	None	add
408	[BUG]  [BUGGY]  final  double  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
409	[BUG]  [BUGGY]  Final  double  residual  =  residuals[i]  /  2;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  Final  double  residual  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	Final  double  residual  =  residuals[i]  /  2;	  final    double    residual    =    residuals[i]    /    2;    Final    double    residual    =    residuals[i]    /    2;    	non-compiled	[CE]  not  a  statement	65	None	replace
410	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  &  1xff;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  &  1xff;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  &  1xff;	  final    double    residual    =    this.results[i]    &    0xff;    	non-compiled	[CE]  ';'  expected	56	None	replace
411	[BUG]  [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(resultsWeights[i]));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  results[i]  *  Math.rint(resultsWeights[i]));  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  results[i]  *  Math.rint(resultsWeights[i]));	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  ';'  expected	84	None	replace
412	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(criterion,  resultsWeights[i]));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(criterion,  resultsWeights[i]));  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(criterion,  resultsWeights[i]));	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  ';'  expected	84	None	replace
413	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])-  1;  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])-  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i])-  1;	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]));    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	84	None	replace
414	[BUG]  [BUGGY]  final  double  residual  =  jF[i  +  1]  *  Math.sqrt(remainder);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i  +  1]  *  Math.sqrt(remainder);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i  +  1]  *  Math.sqrt(remainder);	  final    double    residual    =    jF[i    +    1];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	91	None	replace
415	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  if(remainings[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    2;    ++i)    {    if(remainings[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
416	[BUG]  [BUGGY]  final  double  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
417	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residual  =  residues[i]  /  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  1;  final  double  residual  =  residues[i]  /  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    1;    final  double  residual  =  residues[i]  /  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	89	None	add
418	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  if(results[i]  >  0)  {  return  Math.sqrt(getMatrix()  *  i);  }	  for(int    i    =    0;    i    <    results.length;    ++i)    {    if(results[i]    >    0)    {    return    Math.sqrt(getMatrix()    *    i);    }    	non-compiled	[CE]  '.class'  expected	70	None	replace
419	[BUG]  [BUGGY]  final  double  residual  =  msg[i];  [CE]  cannot  find  symbol  msg  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  msg[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  msg[i];	  final    double    residual    =    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  msg	100	None	replace
420	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jacobian,  criterion);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  *  Math.sqrt(jacobian,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  *  Math.sqrt(jacobian,  criterion);	  final    double    residual    =    this.results[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
421	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	137	None	replace
422	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  criterion  +=  Math.sqrt(variables[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.sqrt(variables[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	137	None	replace
423	[BUG]  [BUGGY]  final  double  residual  =  variables[i]  &  coefficients[i];  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  variables[i]  &  coefficients[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  variables[i]  &  coefficients[i];	  final    double    residual    =    variables[i];    	non-compiled	[CE]  cannot  find  symbol  	131	None	replace
424	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  '.class'  expected	1	None	replace
425	[BUG]  [BUGGY]  final  double  residual  =  jacobian.remainders[i  +  1];  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jacobian.remainders[i  +  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jacobian.remainders[i  +  1];	  final    double    residual    =    jacobian.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	121	None	replace
426	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.rint(remainings[i]);	  for(int    i    =    0;    i    <    3;    ++i)    {    final    double    residuals[i]    =    Math.rint(remainings[i]);    	non-compiled	[CE]  '.class'  expected	105	None	replace
427	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(variants[i]);  [CE]  cannot  find  symbol  variants  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(variants[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(variants[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  variants	123	None	replace
428	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(redefinites[i]);  [CE]  cannot  find  symbol  redefinites  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(redefinites[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(redefinites[i]);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residuals[i]    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  redefinites	123	None	replace
429	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  criterion  +=  Math.rint(resultsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(resultsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
430	[BUG]  [BUGGY]  final  double  criterion  =  residues[i]  /  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  criterion  =  residues[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  criterion  =  residues[i]  /  2;	  final    double    residual    =    residuals[i]    /    2;    final    double    criterion    =    residuals[i]    /    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	93	None	replace
431	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(branchValues[i]);  [CE]  cannot  find  symbol  branchValues  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.rint(branchValues[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.rint(branchValues[i]);	  final    double    residual    =    residuals[i]    *    Math.rint(criterion);    	non-compiled	[CE]  cannot  find  symbol  branchValues	58	None	replace
432	[BUG]  [BUGGY]  final  double  residual  =  factor  *  Math.sqrt(remainings[i]);  [CE]  cannot  find  symbol  factor  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  factor  *  Math.sqrt(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  factor  *  Math.sqrt(remainings[i]);	  final    double    residual    =    criterion    *    Math.sqrt(remainings[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	61	None	replace
433	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  residuals[i]  +=  Math.rint(remainings[i]);  }	  for(int    i    =    0;    i    <    remainings.length;    ++i)    {    residuals[i]    +=    Math.rint(remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	77	None	replace
434	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  criterion  =  residuals[i]  /  Math.sqrt(criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.sqrt(criterion);  final  double  criterion  =  residuals[i]  /  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    final  double  criterion  =  residuals[i]  /  Math.sqrt(criterion);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	59	None	add
435	[BUG]  [BUGGY]  final  double  residual  =  mRaw[i]  *  Math.rint(resultsWeights[i]);  [CE]  cannot  find  symbol  mRaw  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  mRaw[i]  *  Math.rint(resultsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mRaw[i]  *  Math.rint(resultsWeights[i]);	  final    double    residual    =    mRaw[i];    	non-compiled	[CE]  cannot  find  symbol  mRaw	51	None	replace
436	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  /  2  +  Math.sqrt(criterion);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i]  /  2  +  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  /  2  +  Math.sqrt(criterion);	  final    double    residual    =    this.remainders[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  remainders	41	None	replace
437	[BUG]  [BUGGY]  final  double  residual  =  this.results[i]  /  2  +  Math.sqrt(criterion);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.results[i]  /  2  +  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.results[i]  /  2  +  Math.sqrt(criterion);	  final    double    residual    =    this.results[i]    /    2;    	non-compiled	[CE]  cannot  find  symbol  results	54	None	replace
438	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(period);  [CE]  cannot  find  symbol  residues  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(period);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(period);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
439	[BUG]  [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(reciterion);  [CE]  cannot  find  symbol  residues  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residues[i]  *  Math.sqrt(reciterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residues[i]  *  Math.sqrt(reciterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residual    =    residues[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residues	39	None	replace
440	[BUG]  [BUGGY]  final  double  result  =  residuals[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  residual  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  result  =  residuals[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  result  =  residuals[i]  *  Math.sqrt(criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(criterion);    final    double    residue    =    residuals[i]    *    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  residual	38	None	replace
441	[BUG]  [BUGGY]  static  final  double  residual  =  residuals[i]  /  2;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  static  final  double  residual  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	static  final  double  residual  =  residuals[i]  /  2;	  final    double    residual    =    residuals[i]    /    1;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
442	[BUG]  [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i],  criterion);  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i],  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF[i]  *  Math.rint(resultsWeights[i],  criterion);	  final    double    residual    =    jF[i]    *    Math.rint(resultsWeights[i]);    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	82	None	replace
443	[BUG]  [BUGGY]  final  double  residual  =  this.mRows[i];  [CE]  cannot  find  symbol  mRows  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.mRows[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.mRows[i];	  final    double    residual    =    mRows[i];    	non-compiled	[CE]  cannot  find  symbol  mRows	50	None	replace
444	[BUG]  [BUGGY]  final  double  residual  =  mSeconds[i];  [CE]  cannot  find  symbol  mSeconds  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  mSeconds[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mSeconds[i];	  final    double    residual    =    mRows[i];    	non-compiled	[CE]  cannot  find  symbol  mSeconds	50	None	replace
445	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(results  *  residuals[i]);  [CE]  cannot  find  symbol  results  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  criterion  +=  Math.sqrt(results  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	criterion  +=  Math.sqrt(results  *  residuals[i]);	  criterion    +=    Math.sqrt(resultsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  results	98	None	replace
446	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i  +  1]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i  +  1]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i  +  1]  *  Math.sqrt(criterion);	  final    double    residual    =    this.remainders[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  remainders	40	None	replace
447	[BUG]  [BUGGY]  final  double  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  >  expected	25	None	replace
448	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  if(results[i]  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    if(resultsWeights[i]    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
450	[BUG]  [BUGGY]  final  double  residual  =  mf.remainders[i];  [CE]  cannot  find  symbol  mf  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  mf.remainders[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  mf.remainders[i];	  final    double    residual    =    jf.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  mf	44	None	replace
451	[BUG]  [BUGGY]  final  double  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    results.length;    ++i)    {    final    double    residuals[i]    =    Math.rint(results[i]);    	non-compiled	[CE]  >  expected	21	None	replace
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  criterion  +=  Math.rint(remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    criterion    +=    Math.rint(remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
453	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i]  -  3;  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i]  -  3;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i]  -  3;	  final    double    residual    =    this.remainders[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  remainders	42	None	replace
454	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }  [BUGGY]      final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]  *  factor);  }	  for(int    i    =    0;    i    <    this.cols;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]    *    factor);    	non-compiled	[CE]  ']'  expected	12	None	replace
455	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].remainders[i];  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i].remainders[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i].remainders[i];	  final    double    residual    =    i.remainders[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None	replace
456	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  residual  =  residues[i]  /  2  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  2  +  1;  final  double  residual  =  residues[i]  /  2  +  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final    double    residual    =    residuals[i]    /    2    +    1;    final  double  residual  =  residues[i]  /  2  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS()	85	None	add
457	[BUG]  [BUGGY]  final  double  residual  =  js[i];  [CE]  cannot  find  symbol  js  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  js[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  js[i];	  final    double    residual    =    ji[i];    	non-compiled	[CE]  cannot  find  symbol  js	103	None	replace
458	[BUG]  [BUGGY]  final  double  residual  =  jF.remainders[i]  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF.remainders[i]  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.remainders[i]  *  Math.sqrt(criterion);	  final    double    residual    =    jF.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	43	None	replace
459	[BUG]  [BUGGY]  final  double  residual  =  jF.remainders[i]  -  1;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  jF.remainders[i]  -  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  jF.remainders[i]  -  1;	  final    double    residual    =    jF.remainders[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	43	None	replace
460	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  i,  criterion);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  i,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  *  Math.sqrt(jF,  i,  criterion);	  final    double    residual    =    residuals[i]    *    Math.sqrt(jF,    i);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	116	None	replace
461	[BUG]  [BUGGY]  final  double  residual  =  this.remainders[i].remainder  -  1;  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  this.remainders[i].remainder  -  1;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  this.remainders[i].remainder  -  1;	  final    double    residual    =    this.remainders[i].remainder;    	non-compiled	[CE]  cannot  find  symbol  remainders	129	None	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.random();  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	add	final  double  residual  =  residuals[i]  /  Math.random();	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	60	2	replace
463	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.random();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.random();  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.random();	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	compilable	  [FE]  AssertionFailedError  	60	2	replace
464	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  /  Math.cos(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {      [BUGGY]  final  double  residual  =  residuals[i]  /  Math.cos(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	242	242	1	replace	final  double  residual  =  residuals[i]  /  Math.cos(remainders[i]);	  final    double    residual    =    residuals[i]    /    Math.sqrt(criterion);    	non-compiled	[CE]  cannot  find  symbol  remainders	60	None	replace
