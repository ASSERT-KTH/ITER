bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    >>    '    	non-compiled	[CE]  ';'  expected	68	None	replace
2	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  '  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  '  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  '	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    >>    '    	non-compiled	[CE]  ';'  expected	68	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]    =    sum    +    1;    jTj[i][0]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
4	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    jTj[i][0]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
5	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    for(int  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	57	None	add
6	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    for(int  i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  1;	  	non-compiled	[CE]  ';'  expected	57	None	add
7	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  2;  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    for(int  jTj[i][0]  =  sum  +  1;  jTj[i][0]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	57	None	add
8	[BUG]  [BUGGY]  double[][]  rows  =  sum.doubleValue()  *  jTj.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  sum.doubleValue()  *  jTj.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  sum.doubleValue()  *  jTj.doubleValue();	  double[][]    rows    =    sum.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
9	[BUG]  [BUGGY]  double[][]  rows  =  sum.doubleValue()  /  jTj.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  sum.doubleValue()  /  jTj.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  sum.doubleValue()  /  jTj.doubleValue();	  double[][]    rows    =    sum.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
10	[BUG]  [BUGGY]  double[][]  rows  =  sum.doubleValue()  +  jTj,  sum.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  sum.doubleValue()  +  jTj,  sum.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  sum.doubleValue()  +  jTj,  sum.doubleValue();	  double[][]    rows    =    sum.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
11	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	66	None	replace
12	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	66	None	replace
13	[BUG]  [BUGGY]  for(int  jTj[i][0]  =  sum;  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[i][0]  =  sum;	  jTj[i][0]    =    sum;    for(int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	3	None	replace
14	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    for(int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	3	None	replace
15	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    for(int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	3	None	replace
16	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  cols);  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  cols);  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  cols);  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    sum);    }    	non-compiled	[CE]  incompatible  types	32	None	replace
17	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    sum);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	32	None	replace
18	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    sum);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	32	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  2;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
20	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  2;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
21	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  2;  }  jTj[i][j]  =  sum  +  2;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  2;  }  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  2;  }  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
22	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    for(int  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	11	None	add
23	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  int  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  int  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    int  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	11	None	add
24	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
25	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
26	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
27	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	13	None	replace
28	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	113	None	replace
29	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	113	None	replace
30	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
31	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
32	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
33	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  sum  +  1;  jTj[i][j]  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  sum  +  1;  jTj[i][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  sum  +  1;  jTj[i][j]  =  0;  }	  jTj[i][j]    =    sum    +    1;    for(int    i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
34	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  cost  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]  =  cost  +  1;	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    total    +    1;    	compilable	  [FE]  AssertionFailedError  	102	2	replace
36	[BUG]  [BUGGY]  jTj[i][j]  =  cost  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  cost  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  cost  +  1;	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    total    +    1;    	compilable	  [FE]  AssertionFailedError  	102	2	replace
37	[BUG]  [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum  +  1);  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum  +  1);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  Sum.valueOf(sum  +  1);	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    total    +    1;    	non-compiled	[CE]  cannot  find  symbol  Sum	102	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[1][j]  =  sum  +  1;	  jTj[1][j]    =    sum;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
39	[BUG]  [BUGGY]  jTj[1][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]  =  sum  +  1;	  jTj[1][j]    =    sum;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
40	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
41	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
42	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jTj[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][0]    =    sum;    jTj[j][0]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	106	2	add
44	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  jTj[j][0]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jTj[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    jTj[j][0]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	106	2	add
45	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  int  jTj[j][0]  =  sum;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  int  jTj[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    int  jTj[j][0]  =  sum;	  	non-compiled	[CE]  ']'  expected	106	None	add
46	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  for(int  j][0]  =  sum;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  for(int  j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    for(int  j][0]  =  sum;	  	non-compiled	[CE]  ';'  expected	106	None	add
47	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  jTj[j][0]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jTj[j][0]  =  Sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    jTj[j][0]  =  Sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	106	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][1]  =  sum  +  1;	  jTj[i][1]    =    sum;    	compilable	  [FE]  AssertionFailedError  	60	2	replace
49	[BUG]  [BUGGY]  jTj[i][1]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][1]  =  sum  +  1;	  jTj[i][1]    =    sum;    	compilable	  [FE]  AssertionFailedError  	60	2	replace
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	31	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	31	None	replace
52	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  '.class'  expected	31	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[0][j]  =  sum;  jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
54	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[0][j]  =  sum;  jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
55	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  for(int  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  for(int  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    for(int  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	122	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[3][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[0][j]  =  sum;  jTj[3][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
57	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[3][j]  =  sum;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[3][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[0][j]  =  sum;  jTj[3][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
58	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j].doubleValue  =  sum;  }  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j].doubleValue  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j].doubleValue  =  sum;  }	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	124	None	replace
59	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  sum;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  sum;  }	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  <identifier>  expected	124	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
61	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
62	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	16	None	add
63	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	16	None	add
64	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  Sum  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  Sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  Sum  +  1;  jTj[i][j]  =  sum  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Sum	16	None	add
65	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][sum];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][sum];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][sum];	  double[][]    jTj    =    new    double[cols][sum];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	81	None	replace
66	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
67	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
68	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	111	2	replace
70	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	111	2	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj  ==  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	111	2	replace
72	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	111	2	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	111	2	replace
74	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  sum;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	111	2	replace
75	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	112	None	replace
76	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	112	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]  =  sum  +  2;	  jTj[0][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
78	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  sum  +  2;	  jTj[0][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
80	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
82	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
83	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	77	None	replace
84	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[j][i]  *  jTj;  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[j][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j][i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	77	None	replace
85	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j][i]    *    jTj;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	77	None	replace
86	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[0][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][i]    =    sum;    jTj[0][i]  =  sum;	  	compilable	  [FE]  OptimizationException  	125	1	add
87	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  jTj[0][i]  =  sum;  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[0][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    jTj[0][i]  =  sum;	  	compilable	  [FE]  OptimizationException  	125	1	add
88	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  sum;  [CE]  ']'  expected  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    for(int  jTj[0][i]  =  sum;	  	non-compiled	[CE]  ']'  expected	125	None	add
89	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[1][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][i]    =    sum;    jTj[1][i]  =  sum;	  	compilable	  [FE]  OptimizationException  	125	1	add
90	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  jTj[1][i]  =  sum;  [FE]  OptimizationException  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[1][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    jTj[1][i]  =  sum;	  	compilable	  [FE]  OptimizationException  	125	1	add
91	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  jTj[0][i]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]          OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[0][i]  =  Sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    jTj[0][i]  =  Sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	125	None	add
92	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	78	None	replace
93	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[j].doubleValue()  *  jTj;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[j].doubleValue()  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[j].doubleValue()  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  incompatible  types	78	None	replace
94	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j].doubleValue()  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j].doubleValue()  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j].doubleValue()  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  incompatible  types	78	None	replace
95	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ']'  expected	18	None	replace
96	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  0;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ']'  expected	18	None	replace
97	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
99	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
100	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
101	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
102	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
103	[BUG]  [BUGGY]  jTj[i][0]  =  SumMatrix.doubleValue();  [CE]  cannot  find  symbol  SumMatrix  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  SumMatrix.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  SumMatrix.doubleValue();	  jTj[i][0]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol  SumMatrix	70	None	replace
104	[BUG]  [BUGGY]  jTj[i][0]  =  Sum.valueOf(jTj,  cols);  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  Sum.valueOf(jTj,  cols);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  Sum.valueOf(jTj,  cols);	  jTj[i][0]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol  Sum	70	None	replace
105	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
106	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]  =  sum  +  2;	  jTj[i][0]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	58	2	replace
108	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  sum  +  2;	  jTj[i][0]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	58	2	replace
109	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	63	None	replace
110	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	63	None	replace
111	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][j]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	replace
112	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][j]    *    jTj;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	34	None	replace
113	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  cols;  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  cols;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][j]  *  cols;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][j]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	34	None	replace
114	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  incompatible  types	128	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	128	None	replace
116	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  incompatible  types	128	None	replace
117	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  incompatible  types	128	None	replace
118	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
119	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][1]    =    sum;    jTj[i][1]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	59	1	add
121	[BUG]  [BUGGY]  jTj[i][1]  =  sum;  jTj[i][1]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][1]    =    sum;    jTj[i][1]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	59	1	add
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][2]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][1]    =    sum;    jTj[i][2]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
123	[BUG]  [BUGGY]  jTj[i][1]  =  sum;  jTj[i][2]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][2]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][1]    =    sum;    jTj[i][2]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	1	add
124	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][1]    =    sum;    jTj[i][0]  =  sum;	  	compilable	  [FE]  OptimizationException  	59	1	add
125	[BUG]  [BUGGY]  jTj[i][1]  =  sum;  jTj[i][0]  =  sum;  [FE]  OptimizationException  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][1]    =    sum;    jTj[i][0]  =  sum;	  	compilable	  [FE]  OptimizationException  	59	1	add
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][3]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][1]    =    sum;    jTj[i][3]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	59	2	add
127	[BUG]  [BUGGY]  jTj[i][1]  =  sum;  jTj[i][3]  =  sum;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  jTj[i][3]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][1]    =    sum;    jTj[i][3]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	59	2	add
128	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	109	None	replace
129	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
130	[BUG]  [BUGGY]  double[][]  rows  =  jTj.doubleValues();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  jTj.doubleValues();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  jTj.doubleValues();	  double[][]    rows    =    sum.doubleValues();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
131	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	84	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	84	None	replace
133	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	84	None	replace
134	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  >=  not  a  statement  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  >=  not  a  statement  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  >=  not  a  statement	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i    	non-compiled	[CE]  not  a  statement	94	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i    	non-compiled	[CE]  not  a  statement	94	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  ++i  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  ++i  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  ++i	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i    	non-compiled	[CE]  not  a  statement	94	None	replace
137	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	119	None	replace
138	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  '  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  '	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  illegal  line  end  in  character  literal	119	None	replace
139	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	119	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	119	None	replace
141	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	80	None	replace
142	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	80	None	replace
143	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][0];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	80	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][0]  =  sum  +  1;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
145	[BUG]  [BUGGY]  jTj[j][0]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]  =  sum  +  1;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][0]  =  sum  +  2;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
147	[BUG]  [BUGGY]  jTj[j][0]  =  sum  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]  =  sum  +  2;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
148	[BUG]  [BUGGY]  int  jTj[0][j]  =  sum;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int  jTj[0][j]  =  sum;	  jTj[0][j]    =    sum;    int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	24	None	replace
149	[BUG]  [BUGGY]  double  jTj[0][j]  =  sum;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double  jTj[0][j]  =  sum;	  jTj[0][j]    =    sum;    int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	24	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	54	None	replace
151	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  '.class'  expected	54	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i][i]  *  jacobian[k][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	54	None	replace
153	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  1;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj    =    0;    j    <    cols;    ++j)    {    double    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  ']'  expected	73	None	replace
154	[BUG]  [BUGGY]  double  jTj[i][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double  jTj[i][j]  =  sum  +  1;	  jTj[i][j]    =    sum    +    1;    for(int    jTj    =    0;    j    <    cols;    ++j)    {    double    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  ']'  expected	73	None	replace
155	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  2;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  2;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj    =    0;    j    <    cols;    ++j)    {    double    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  ']'  expected	73	None	replace
156	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  ';'  expected	127	None	replace
157	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  ';'  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  ';'  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  ';'	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  ';'  expected	127	None	replace
158	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
159	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  ';'  expected  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  ';'  expected  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  ';'  expected	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  ';'  expected	127	None	replace
160	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    double    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	99	None	replace
161	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    double    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	99	None	replace
162	[BUG]  [BUGGY]  double  jTj[i][0]  =  sum;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double  jTj[i][0]  =  sum;	  jTj[i][0]    =    sum;    double    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	99	None	replace
163	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
164	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
165	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]    =    sum    +    3;    jTj[i][j]  =  sum  +  3;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
167	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    jTj[i][j]  =  sum  +  3;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
168	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  jTj[i][j]  =  sum  +  3;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    for(int  jTj[i][j]  =  sum  +  3;	  	non-compiled	[CE]  ']'  expected	75	None	add
169	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  }  jTj[i][j]  =  sum  +  3;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  }  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    jTj[i][j]  =  sum  +  3;  }  jTj[i][j]  =  sum  +  3;	  	non-compiled	[CE]  illegal  start  of  type	75	None	add
170	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    for(int  i][j]  =  sum  +  3;  jTj[i][j]  =  sum  +  3;	  	non-compiled	[CE]  ';'  expected	75	None	add
171	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jacobian[    	non-compiled	[CE]  ']'  expected	46	None	replace
172	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
173	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleVal  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleVal  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleVal	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	89	None	replace
174	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	89	None	replace
175	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  int[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
176	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	49	None	replace
177	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  }	  jTj[0][j]    =    sum;    double    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	90	None	replace
178	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  jTj[0][j]    =    sum;    double    jTj[0][j]    =    sum;    	non-compiled	[CE]  	90	None	replace
179	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  2];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  2];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols  +  2];	  jTj[i][j]    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  incompatible  types	85	None	replace
180	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols  *  1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols  *  1];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols  *  1];	  jTj[i][j]    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  incompatible  types	85	None	replace
181	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][j];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][j];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][j];	  jTj[i][j]    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	56	None	replace
182	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][rows];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][rows];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][rows];	  jTj[i][j]    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	56	None	replace
183	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][jtj];  [CE]  cannot  find  symbol  jtj  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][jtj];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][jtj];	  jTj[i][j]    =    new    double[rows][cols];    	non-compiled	[CE]  cannot  find  symbol  jtj	56	None	replace
184	[BUG]  [BUGGY]  jTj[i][0]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  Sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  Sum;	  jTj[i][0]    =    sum;    jTj[i][0]    =    Sum;    	non-compiled	[CE]  cannot  find  symbol  Sum	5	None	replace
185	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	30	None	replace
186	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	30	None	replace
187	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	30	None	replace
188	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[    	non-compiled	[CE]  ']'  expected	47	None	replace
189	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[    	non-compiled	[CE]  ']'  expected	47	None	replace
190	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[    	non-compiled	[CE]  ']'  expected	47	None	replace
191	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  j  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	62	None	replace
193	[BUG]  [BUGGY]  jTj[0]  =  sum  +  sum;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0]  =  sum  +  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0]  =  sum  +  sum;	  jTj[0]    =    sum;    	non-compiled	[CE]  incompatible  types	108	None	replace
194	[BUG]  [BUGGY]  jTj[0]  =  sum  +  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0]  =  sum  +  1;	  jTj[0]    =    sum;    	non-compiled	[CE]  incompatible  types	108	None	replace
195	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
196	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
197	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
198	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  /  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
199	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][j];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][j];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][j];	  double[][]    jTj    =    new    double[cols][j];    	non-compiled	[CE]  incompatible  types	9	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	21	2	add
201	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	21	2	add
202	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    for(int  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	21	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	21	2	add
204	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	21	2	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	21	2	add
206	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	21	2	add
207	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	83	None	replace
208	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	83	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  /  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]  =  sum  /  2;	  jTj[i][j]    =    sum    +    2;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
210	[BUG]  [BUGGY]  jTj[i][j]  =  sum  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  /  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  sum  /  2;	  jTj[i][j]    =    sum    +    2;    	compilable	  [FE]  AssertionFailedError  	12	2	replace
211	[BUG]  [BUGGY]  for(int  jTj[0][j]  =  sum;  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[0][j]  =  sum;	  jTj[0][j]    =    sum;    for(int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	23	None	replace
212	[BUG]  [BUGGY]  for(int  jTj[1][j]  =  sum;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[1][j]  =  sum;	  jTj[0][j]    =    sum;    for(int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	23	None	replace
213	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	15	None	replace
214	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	15	None	replace
215	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	15	None	replace
216	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  /  2];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	15	None	replace
217	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
218	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
219	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    }    	non-compiled	[CE]  ';'  expected	88	None	replace
220	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    }    	non-compiled	[CE]  ';'  expected	88	None	replace
221	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][sum];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][sum];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][sum];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	10	None	replace
222	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][jTj];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][jTj];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	10	None	replace
223	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols  -  1];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	10	None	replace
224	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	100	None	replace
225	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	118	None	replace
226	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	118	None	replace
227	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >=  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >=  ';'  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >=  ';'	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	118	None	replace
228	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >>  '  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  >>  '	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  illegal  line  end  in  character  literal	118	None	replace
229	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	14	None	replace
230	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
231	[BUG]  [BUGGY]  jTj[0][j]  =  sum;  jTj[2][j]  =  jTj;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum;  jTj[2][j]  =  jTj;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  sum;  jTj[2][j]  =  jTj;	  jTj[0][j]    =    sum;    jTj[2][j]    =    sum;    	non-compiled	[CE]  incompatible  types	123	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  }	  jTj[0][j]    =    sum;    jTj[2][j]    =    sum;    	compilable	  [FE]  AssertionFailedError  	123	2	replace
233	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  }	  jTj[0][j]    =    sum;    jTj[2][j]    =    sum;    	compilable	  [FE]  AssertionFailedError  	123	2	replace
234	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols]  +  sum;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols]  +  sum;  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols]  +  sum;	  double[][]    jTj    =    new    double[cols][rows];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
236	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[0][j]  =  sum;  jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[0][j]  =  sum;  jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
238	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[0][j]  =  sum;  jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
239	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  for(int  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  for(int  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    for(int  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	25	None	add
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[1][j]  =  sum;  jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
241	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[1][j]  =  sum;  jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	25	2	add
242	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	61	None	replace
243	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  int[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	61	None	replace
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	compilable	  [FE]  AssertionFailedError  	104	1	add
245	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	compilable	  [FE]  AssertionFailedError  	104	1	add
246	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	104	None	add
247	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	104	None	add
248	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  JTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  cannot  find  symbol  JTj  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  JTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    JTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  cannot  find  symbol  JTj	104	None	add
249	[BUG]  [BUGGY]  jTj[0][j]  =  sum;  jTj[1][j]  =  jTj;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum;  jTj[1][j]  =  jTj;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  sum;  jTj[1][j]  =  jTj;	  jTj[0][j]    =    sum;    jTj[1][j]    =    sum;    	non-compiled	[CE]  incompatible  types	26	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  }	  jTj[0][j]    =    sum;    jTj[1][j]    =    sum;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
251	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  }	  jTj[0][j]    =    sum;    jTj[1][j]    =    sum;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
252	[BUG]  [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum,  sum);  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum,  sum);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  Sum.valueOf(sum,  sum);	  jTj[i][j]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  Sum	120	None	replace
253	[BUG]  [BUGGY]  jTj[i][j]  =  sum.valueOf(jTj);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum.valueOf(jTj);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  sum.valueOf(jTj);	  jTj[i][j]    =    Sum.valueOf(sum);    	non-compiled	[CE]  double  cannot  be  dereferenced	120	None	replace
254	[BUG]  [BUGGY]  int[][]  jTj  =  new  int[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  int[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  int[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  long[][]    jTj    =    new    long[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
255	[BUG]  [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum,  jTj[i]);  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum,  jTj[i]);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  Sum.valueOf(sum,  jTj[i]);	  jTj[i][j]    =    Sum.valueOf(jTj[i]);    	non-compiled	[CE]  cannot  find  symbol  Sum	50	None	replace
256	[BUG]  [BUGGY]  jTj[i][j]  =  sum.valueOf(jTj[i]);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum.valueOf(jTj[i]);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  sum.valueOf(jTj[i]);	  jTj[i][j]    =    Sum.valueOf(jTj[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
257	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	92	None	replace
258	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jacobian[i];  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	92	None	replace
259	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  cols[i];  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  incompatible  types	92	None	replace
260	[BUG]  [BUGGY]  jTj[0][j]  =  Sum.valueOf(jTj,  cols);  [CE]  cannot  find  symbol  Sum  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  Sum.valueOf(jTj,  cols);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  Sum.valueOf(jTj,  cols);	  jTj[0][j]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol  Sum	95	None	replace
261	[BUG]  [BUGGY]  jTj[0][j]  =  SumMatrix.doubleValue();  [CE]  cannot  find  symbol  SumMatrix  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  SumMatrix.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  SumMatrix.doubleValue();	  jTj[0][j]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol  SumMatrix	95	None	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]    =    sum    +    1;    jTj[0][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
263	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    jTj[0][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
264	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  for(int  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  for(int  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    for(int  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	35	None	add
265	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  }  jTj[0][j]  =  sum  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  }  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    jTj[0][j]  =  sum  +  1;  }  jTj[0][j]  =  sum  +  1;	  	non-compiled	[CE]  illegal  start  of  type	35	None	add
266	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  for(int  jTj[0][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  for(int  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    for(int  jTj[0][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	35	None	add
267	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
268	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
269	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
270	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	79	None	replace
271	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jTj;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	79	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[1][j]    =    sum;    jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
273	[BUG]  [BUGGY]  jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]    =    sum;    jTj[1][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[1][j]    =    sum;    jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
275	[BUG]  [BUGGY]  jTj[1][j]  =  sum;  jTj[2][j]  =  sum;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]    =    sum;    jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
276	[BUG]  [BUGGY]  jTj[1][j]  =  sum;  for(int  jTj[1][j]  =  sum;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  for(int  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]    =    sum;    for(int  jTj[1][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	37	None	add
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[3][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[1][j]    =    sum;    jTj[3][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
278	[BUG]  [BUGGY]  jTj[1][j]  =  sum;  jTj[3][j]  =  sum;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[3][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]    =    sum;    jTj[3][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
279	[BUG]  [BUGGY]  double[][]  rows  =  cols.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  cols.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  cols.doubleValue();	  double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
280	[BUG]  [BUGGY]  JTj[i][j]  =  sum  +  1;  [CE]  cannot  find  symbol  JTj  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  JTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	JTj[i][j]  =  sum  +  1;	  jTj[i][j]    =    sum    +    1;    JTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  cannot  find  symbol  JTj	103	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jacobian[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jacobian[i][j]  =  sum  +  1;	  jTj[i][j]    =    sum    +    1;    JTj[i][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	103	2	replace
282	[BUG]  [BUGGY]  jacobian[i][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jacobian[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jacobian[i][j]  =  sum  +  1;	  jTj[i][j]    =    sum    +    1;    JTj[i][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	103	2	replace
283	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  <  =  2;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  <  =  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  <  =  2;	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    2;    	non-compiled	[CE]  ']'  expected	20	None	replace
284	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    2;    	non-compiled	[CE]  ']'  expected	20	None	replace
285	[BUG]  [BUGGY]  jTj[i][j]  =  SumMatrixFunction.create(sum,  cols);  [CE]  cannot  find  symbol  SumMatrixFunction  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  SumMatrixFunction.create(sum,  cols);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  SumMatrixFunction.create(sum,  cols);	  jTj[i][j]    =    SumMatrixFunction.create(jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol  SumMatrixFunction	91	None	replace
286	[BUG]  [BUGGY]  jTj[i][j]  =  SumMatrixFunction.create(cols,  jTj);  [CE]  cannot  find  symbol  SumMatrixFunction  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  SumMatrixFunction.create(cols,  jTj);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  SumMatrixFunction.create(cols,  jTj);	  jTj[i][j]    =    SumMatrixFunction.create(jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol  SumMatrixFunction	91	None	replace
287	[BUG]  [BUGGY]  jTj[i][j]  =  SumMatrixFunction.create(rows,  cols);  [CE]  cannot  find  symbol  SumMatrixFunction  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  SumMatrixFunction.create(rows,  cols);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  SumMatrixFunction.create(rows,  cols);	  jTj[i][j]    =    SumMatrixFunction.create(jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol  SumMatrixFunction	91	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][i]  =  sum  +  1;	  jTj[0][i]    =    sum;    	compilable	  [FE]  AssertionFailedError  	126	2	replace
289	[BUG]  [BUGGY]  jTj[0][i]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]  =  sum  +  1;	  jTj[0][i]    =    sum;    	compilable	  [FE]  AssertionFailedError  	126	2	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[1][i]  =  sum;	  jTj[0][i]    =    sum;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
291	[BUG]  [BUGGY]  jTj[1][i]  =  sum;  [FE]  AssertionFailedError  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][i]  =  sum;	  jTj[0][i]    =    sum;    	compilable	  [FE]  AssertionFailedError  	126	1	replace
292	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][i];	  double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	82	None	replace
293	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][i];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][i];	  double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  incompatible  types	82	None	replace
294	[BUG]  [BUGGY]  for(int  jTj  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj    =    0;    j    <    cols;    ++j)    {    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	72	None	replace
295	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
296	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols  +  1];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
297	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
298	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
299	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][1]  =  sum;  jTj[i][0]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
300	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  jTj[i][0]  =  sum;  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][1]  =  sum;  jTj[i][0]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
301	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  Sum;  jTj[i][0]  =  sum;  [CE]  cannot  find  symbol  Sum  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  Sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][0]  =  Sum;  jTj[i][0]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	1	None	add
302	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][0]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]          OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][0]  =  Sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  Sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	1	None	add
303	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	29	None	replace
304	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	29	None	replace
305	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	replace
306	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  cols;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  cols;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  cols;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	33	None	replace
307	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  sum  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols],  sum  +  1;	  jTj[i][j]    =    new    double[cols][cols],    sum;    	non-compiled	[CE]  ';'  expected	87	None	replace
308	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[rows][cols],  sum;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[rows][cols],  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[rows][cols],  sum;	  jTj[i][j]    =    new    double[cols][cols],    sum;    	non-compiled	[CE]  ';'  expected	87	None	replace
309	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
310	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
311	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
312	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  sum.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  sum.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols],  sum.doubleValue();	  jTj[i][j]    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
313	[BUG]  [BUGGY]  jTj[0][j]  =  new  double[cols][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  new  double[cols][cols].doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  new  double[cols][cols].doubleValue();	  jTj[i][j]    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
314	[BUG]  [BUGGY]  int  jTj[i][0]  =  sum;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int  jTj[i][0]  =  sum;	  jTj[i][0]    =    sum;    int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	4	None	replace
315	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	4	None	replace
316	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	4	None	replace
317	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    jTj[0][j]    =    sum;    	non-compiled	[CE]  incompatible  types	22	None	replace
318	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    jTj[0][j]    =    sum;    	non-compiled	[CE]  incompatible  types	22	None	replace
319	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	101	None	replace
320	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	101	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    i    =    0;    i    <    cols;    ++i)    {    double    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  ']'  expected	71	None	replace
322	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  2;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  2;  }	  jTj[i][j]    =    sum    +    1;    for(int    i    =    0;    i    <    cols;    ++i)    {    double    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  ']'  expected	71	None	replace
323	[BUG]  [BUGGY]  jTj[i][j]  =  sum.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  sum.doubleValue();	  jTj[i][j]    =    SumMatrix.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
324	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  >>  ';'	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	67	None	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
326	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	2	2	replace
327	[BUG]  [BUGGY]  [][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  [][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
328	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols]  +  sum.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols]  +  sum.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols]  +  sum.doubleValue();	  jTj[i][j]    =    new    double[cols][cols]    +    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	55	None	replace
329	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols.length];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	53	None	replace
330	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	53	None	replace
331	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	53	None	replace
332	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	52	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][2]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][2]  =  sum;	  jTj[i][1]    =    sum;    	compilable	  [FE]  AssertionFailedError  	60	2	replace
334	[BUG]  [BUGGY]  jTj[i][2]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][2]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][2]  =  sum;	  jTj[i][1]    =    sum;    	compilable	  [FE]  AssertionFailedError  	60	2	replace
335	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  double  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    double  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	21	None	add
336	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  [CE]  incompatible  types  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    	non-compiled	[CE]  incompatible  types	2	None	replace
337	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[i][0]  =  jTj;  }  [CE]  incompatible  types  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    	non-compiled	[CE]  incompatible  types	2	None	replace
338	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    jTj[0][j]    =    sum;    	non-compiled	[CE]  incompatible  types	22	None	replace
339	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  new  double[cols][cols];  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  new  double[cols][cols];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j]  =  new  double[cols][cols];  }	  jTj[0][j]    =    sum;    jTj[0][j]    =    sum;    	non-compiled	[CE]  incompatible  types	22	None	replace
340	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  jTj;  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[1][j]  =  jTj;  }	  jTj[0][j]    =    sum;    jTj[1][j]    =    sum;    	non-compiled	[CE]  incompatible  types	26	None	replace
341	[BUG]  [BUGGY]  jTj[0][j]  =  sum;  jTj[1][j]  =  jtj;  [CE]  cannot  find  symbol  jtj  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum;  jTj[1][j]  =  jtj;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  sum;  jTj[1][j]  =  jtj;	  jTj[0][j]    =    sum;    jTj[1][j]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  jtj	26	None	replace
342	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  int  jTj[0][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  int  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    int  jTj[0][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	35	None	add
343	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  double  jTj[0][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  double  jTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    double  jTj[0][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	35	None	add
344	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
345	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  double  jTj[i][0]  =  sum  +  1;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  double  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    double  jTj[i][0]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	57	None	add
346	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  int  jTj[i][0]  =  sum  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  int  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    int  jTj[i][0]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	57	None	add
347	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  jTj[i][0]  =  sum  +  1;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  for(int  jTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    for(int  jTj[i][0]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	57	None	add
348	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  for(int  jTj  =  0;  jTj  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  for(int  jTj  =  0;  jTj  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    for(int  jTj  =  0;  jTj  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	16	None	add
349	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  }	  	non-compiled	[CE]  ']'  expected	16	None	add
350	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	non-compiled	[CE]  ']'  expected	16	None	add
351	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	53	None	replace
352	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	53	None	replace
353	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	101	None	replace
354	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	84	None	replace
355	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][sum];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][sum];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][sum];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	112	None	replace
356	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	52	None	replace
357	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	52	None	replace
358	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
359	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	118	None	replace
360	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[i][1]  =  jTj;  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[i][1]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[i][1]  =  jTj;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[i][0]    =    sum;    	non-compiled	[CE]  incompatible  types	110	None	replace
361	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValu	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	54	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  rows[i][i]  *  jacobian[k][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  rows[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  rows[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	54	None	replace
364	[BUG]  [BUGGY]  jTj[i][j]  =  jTj  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  jTj  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  jTj  +  1;	  jTj[i][j]    =    sum    +    1;    for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
365	[BUG]  [BUGGY]  jTj[1][j]  =  sum;  double  jTj[1][j]  =  sum;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  double  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]    =    sum;    double  jTj[1][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	37	None	add
366	[BUG]  [BUGGY]  jTj[i][j]  =  total  +  1;  [CE]  cannot  find  symbol  total  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  total  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  total  +  1;	  jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    total    +    1;    	non-compiled	[CE]  cannot  find  symbol  total	102	None	replace
367	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jacobian[    	non-compiled	[CE]  ']'  expected	46	None	replace
368	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
369	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
370	[BUG]  [BUGGY]  jTj[i][1]  =  sum;  double  jTj[i][1]  =  sum;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][1]  =  sum;  double  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][1]    =    sum;    double  jTj[i][1]  =  sum;	  	non-compiled	[CE]  ']'  expected	59	None	add
371	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
372	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
373	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  4];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
374	[BUG]  [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum  +  2);  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  Sum.valueOf(sum  +  2);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  Sum.valueOf(sum  +  2);	  jTj[i][j]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  Sum	120	None	replace
375	[BUG]  [BUGGY]  jTj[0][j]  =  Sum.valueOf(sum);  [CE]  cannot  find  symbol  Sum  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  Sum.valueOf(sum);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  Sum.valueOf(sum);	  jTj[i][j]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  Sum	120	None	replace
376	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  0;  jTj[i][j]  =  0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  0;  jTj[i][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  0;  jTj[i][j]  =  0;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ']'  expected	18	None	replace
377	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  1;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ']'  expected	18	None	replace
378	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  cols  +  1;  jTj[i][j]  =  sum  +  1;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  cols  +  1;  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  cols  +  1;  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ']'  expected	18	None	replace
379	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols].doubleValue();	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	10	None	replace
380	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  double  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  double  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    double  jTj[0][j]  =  sum;  jTj[1][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	25	None	add
381	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  sum  +  2;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  sum  +  2;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	11	None	add
382	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	11	None	add
383	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	83	None	replace
384	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	79	None	replace
385	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	79	None	replace
386	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i    	non-compiled	[CE]  not  a  statement	94	None	replace
387	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
388	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
389	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  ']'  expected	13	None	replace
390	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
391	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
392	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    sum);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	32	None	replace
393	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	replace
394	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j][i]  *  jTj;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	33	None	replace
395	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	49	None	replace
396	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	49	None	replace
397	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    double    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	90	None	replace
398	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[	  jTj[0][j]    =    sum;    double    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	90	None	replace
399	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }	  jTj[0][j]    =    sum;    for(int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	23	None	replace
400	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  jTj;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    for(int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	23	None	replace
401	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }	  jTj[0][j]    =    sum;    for(int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	23	None	replace
402	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleVal  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleVal  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleVal	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	30	None	replace
403	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	30	None	replace
404	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  chiSquare;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  chiSquare;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  chiSquare;  }	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  <identifier>  expected	124	None	replace
405	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  inverse;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  inverse;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  inverse;  }	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  <identifier>  expected	124	None	replace
406	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  jTj;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[0][j].  =  jTj;  }	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  <identifier>  expected	124	None	replace
407	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  ']'  expected	92	None	replace
408	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	92	None	replace
409	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  3;  }  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  3;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  3;  }	  	non-compiled	[CE]  ']'  expected	75	None	add
410	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  sum  +  3;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  sum  +  3;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    for(int  i  =  0;  i  <  cols;  ++i)  {  jTj[i][j]  =  sum  +  3;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	75	None	add
411	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  3;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  3;	  	non-compiled	[CE]  ']'  expected	75	None	add
412	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue();	  double[][]    jTj    =    new    double[cols][sum];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	81	None	replace
413	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    for(int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	3	None	replace
414	[BUG]  [BUGGY]  jTj[i][0]  =  sum;  jTj[i][1]  =  jTj;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum;  jTj[i][1]  =  jTj;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  sum;  jTj[i][1]  =  jTj;	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	non-compiled	[CE]  incompatible  types	111	None	replace
415	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  cols;  ++j)  {  jTj[0][i]  =  sum;  }  [CE]  ']'  expected  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  cols;  ++j)  {  jTj[0][i]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  cols;  ++j)  {  jTj[0][i]  =  sum;  }	  	non-compiled	[CE]  ']'  expected	125	None	add
416	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  <  sum;)  {  jTj[0][i]  =  sum;  }  [CE]  ']'  expected  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  <  sum;)  {  jTj[0][i]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    for(int  jTj[0][i]  =  cols;  jTj[0][i]  <  sum;)  {  jTj[0][i]  =  sum;  }	  	non-compiled	[CE]  ']'  expected	125	None	add
417	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  sum;)  {  jTj[0][i]  =  sum;  }  [CE]  ']'  expected  [FE]        OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  sum;)  {  jTj[0][i]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  sum;)  {  jTj[0][i]  =  sum;  }	  	non-compiled	[CE]  ']'  expected	125	None	add
418	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  cols;  ++j)  {  double  jTj[0][i]  =  sum;  }  [CE]  ']'  expected  [FE]          OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  cols;  ++j)  {  double  jTj[0][i]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    for(int  jTj[0][i]  =  cols;  jTj[0][i]  >  cols;  ++j)  {  double  jTj[0][i]  =  sum;  }	  	non-compiled	[CE]  ']'  expected	125	None	add
419	[BUG]  [BUGGY]  jTj[i][0]  =  sum;  jTj[i][1]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum;  jTj[i][1]  =  Sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  sum;  jTj[i][1]  =  Sum;	  jTj[i][0]    =    sum;    jTj[i][0]    =    Sum;    	non-compiled	[CE]  cannot  find  symbol  Sum	5	None	replace
420	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  ';'  expected	127	None	replace
421	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT!=  ';'  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT!=  ';'  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT!=  ';'	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  ';'  expected	127	None	replace
422	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	78	None	replace
423	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jacobian[  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jacobian[  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  jacobian[	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  ']'  expected	78	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][i]  =  sum;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
425	[BUG]  [BUGGY]  jTj[j][i]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][i]  =  sum;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][1]  =  sum;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
427	[BUG]  [BUGGY]  jTj[j][1]  =  sum;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][1]  =  sum;	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
428	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	4	None	replace
429	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    >>    '    	non-compiled	[CE]  ';'  expected	68	None	replace
430	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
431	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
432	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
433	[BUG]  [BUGGY]  jTj[0]  =  sum  +  2;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0]  =  sum  +  2;	  jTj[0]    =    sum;    	non-compiled	[CE]  incompatible  types	108	None	replace
434	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  0;  jTj[i][j]  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  0;  jTj[i][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  0;  jTj[i][j]  =  0;  }	  jTj[i][j]    =    sum    +    1;    for(int    i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
435	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  0;  jTj[i][j]  =  0;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  0;  jTj[i][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  0;  jTj[i][j]  =  0;  }	  jTj[i][j]    =    sum    +    1;    for(int    i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
436	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  1;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]  =  sum  +  3;	  jTj[i][0]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	58	2	replace
438	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  sum  +  3;	  jTj[i][0]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	58	2	replace
439	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  double  jTj[j][0]  =  sum;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  double  jTj[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    double  jTj[j][0]  =  sum;	  	non-compiled	[CE]  ']'  expected	106	None	add
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jacobian[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][0]    =    sum;    jacobian[j][0]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	106	2	add
441	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  jacobian[j][0]  =  sum;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jacobian[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    jacobian[j][0]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	106	2	add
442	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    }    	non-compiled	[CE]  ';'  expected	88	None	replace
443	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    }    	non-compiled	[CE]  ';'  expected	88	None	replace
444	[BUG]  [BUGGY]  double[][]  rows  =  targetValues.doubleValues();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  targetValues.doubleValues();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  targetValues.doubleValues();	  double[][]    rows    =    sum.doubleValues();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
445	[BUG]  [BUGGY]  double[][]  rows  =  inverse.doubleValues();  [CE]  cannot  find  symbol  inverse  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  inverse.doubleValues();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  inverse.doubleValues();	  double[][]    rows    =    sum.doubleValues();    	non-compiled	[CE]  cannot  find  symbol  inverse	121	None	replace
446	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	100	None	replace
447	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	100	None	replace
448	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i][i]  *  jacobian[i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i][i]  *  jacobian[i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i][i]  *  jacobian[i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	62	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	62	None	replace
450	[BUG]  [BUGGY]  jTj[0][j]  =  new  double[cols][cols];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  new  double[cols][cols];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  new  double[cols][cols];	  jTj[i][j]    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	56	None	replace
451	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  incompatible  types	128	None	replace
452	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i][i]  *  jTj;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  cols[i][i]  *  jTj;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  incompatible  types	128	None	replace
453	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  cost;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  cost;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols],  cost;	  jTj[i][j]    =    new    double[cols][cols],    sum;    	non-compiled	[CE]  ';'  expected	87	None	replace
454	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  0,  sum;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols],  0,  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols],  0,  sum;	  jTj[i][j]    =    new    double[cols][cols],    sum;    	non-compiled	[CE]  ';'  expected	87	None	replace
455	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][sum];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][sum];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][sum];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  ++i);  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
456	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  jTj;  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  jTj[2][j]  =  jTj;  }	  jTj[0][j]    =    sum;    jTj[2][j]    =    sum;    	non-compiled	[CE]  incompatible  types	123	None	replace
457	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  *  1];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
458	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	8	None	replace
459	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	66	None	replace
460	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	66	None	replace
461	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[j][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[j][i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[j][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	77	None	replace
462	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  sum;  }	  jTj[i][0]    =    sum;    double    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	99	None	replace
463	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols],  sum;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols],  sum;  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols],  sum;	  double[][]    jTj    =    new    double[cols][rows];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	replace
464	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  0;  }	  jTj[0][j]    =    sum;    int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	24	None	replace
465	[BUG]  [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  0;  }  else  {  jTj[0][j]  =  0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(sum  >  0)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  0;  }  else  {  jTj[0][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(sum  >  0)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  0;  }  else  {  jTj[0][j]  =  0;  }	  jTj[0][j]    =    sum;    int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	24	None	replace
466	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  for(int  jTj  =  0;  jTj  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  for(int  jTj  =  0;  jTj  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    for(int  jTj  =  0;  jTj  <  cols;  ++j)  {  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	104	None	add
467	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  }  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    for(int  i  =  0;  i  <  cols;  ++i)  {  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  }	  	non-compiled	[CE]  ']'  expected	104	None	add
468	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    double  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  ']'  expected	104	None	add
469	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
470	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  3];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  3];  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols  +  3];	  jTj[i][j]    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  incompatible  types	85	None	replace
471	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  /  2];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  /  2];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	6	None	replace
472	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][1];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
473	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
474	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[    	non-compiled	[CE]  ']'  expected	47	None	replace
475	[BUG]  [BUGGY]  long[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  long[][]    jTj    =    new    long[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
476	[BUG]  [BUGGY]  double  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {	  long[][]    jTj    =    new    long[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
477	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  2;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  jTj[i][j];  jTj[i][j]  =  sum  +  2;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    2;    	non-compiled	[CE]  ']'  expected	20	None	replace
478	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  cols  +  1;  jTj[i][j]  =  sum  +  2;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  cols  +  1;  jTj[i][j]  =  sum  +  2;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum  +  1;  for(int  jTj[i][j]  =  cols  +  1;  jTj[i][j]  =  sum  +  2;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    2;    	non-compiled	[CE]  ']'  expected	20	None	replace
479	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  [CE]  ']'  expected  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  int  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    int  jTj[i][0]  =  sum;  jTj[i][0]  =  sum;	  	non-compiled	[CE]  ']'  expected	1	None	add
480	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
481	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
482	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  int  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  int  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    int  jTj[0][j]  =  sum;  jTj[2][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	122	None	add
483	[BUG]  [BUGGY]  double[][]  rows  =  jTj.doubleValue()  +  sum.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  jTj.doubleValue()  +  sum.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  jTj.doubleValue()  +  sum.doubleValue();	  double[][]    rows    =    sum.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
484	[BUG]  [BUGGY]  double[][]  rows  =  sum.doubleValue()  +  jTjF.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  sum.doubleValue()  +  jTjF.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  sum.doubleValue()  +  jTjF.doubleValue();	  double[][]    rows    =    sum.doubleValue()    +    jTj.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
485	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
486	[BUG]  [BUGGY]  double[][]  rows  =  jTj,  sum.doubleValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  jTj,  sum.doubleValue();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  jTj,  sum.doubleValue();	  double[][]    rows    =    jTj.doubleValue();    	non-compiled	[CE]  ';'  expected	27	None	replace
487	[BUG]  [BUGGY]  jTj[i][j]  =  SumMatrixFunction.doubleValue();  [CE]  cannot  find  symbol  SumMatrixFunction  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  SumMatrixFunction.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  SumMatrixFunction.doubleValue();	  jTj[i][j]    =    SumMatrix.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  SumMatrixFunction	51	None	replace
488	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValu    	non-compiled	[CE]  ';'  expected	89	None	replace
489	[BUG]  [BUGGY]  for(int  jTj  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  1;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  1;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum  +  1;  }	  jTj[i][j]    =    sum    +    1;    for(int    jTj    =    0;    j    <    cols;    ++j)    {    double    jTj[i][j]    =    sum    +    1;    }    	non-compiled	[CE]  ']'  expected	73	None	replace
490	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	113	None	replace
491	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  j	  for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    j    	non-compiled	[CE]  ';'  expected	119	None	replace
492	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][0];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	63	None	replace
493	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[j][j]  *  jTj;  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jacobian[j][j]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	replace
494	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols]  *  sum;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  new  double[cols][cols]  *  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  new  double[cols][cols]  *  sum;	  jTj[i][j]    =    new    double[cols][cols]    +    sum;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	55	None	replace
495	[BUG]  [BUGGY]  jTj[0][i]  =  jTj;  [CE]  incompatible  types  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  jTj;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]  =  jTj;	  jTj[0][i]    =    sum;    	non-compiled	[CE]  incompatible  types	126	None	replace
496	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  total  +  2;  [CE]  cannot  find  symbol  total  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  total  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  total  +  2;	  	non-compiled	[CE]  cannot  find  symbol  total	11	None	add
497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  3;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
498	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  sum  +  3;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
499	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  2;  JTj[i][j]  =  sum  +  2;  [CE]  cannot  find  symbol  JTj  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  2;  JTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    2;    JTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  cannot  find  symbol  JTj	11	None	add
500	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
501	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
502	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  jTj;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  int  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	24	None	replace
503	[BUG]  [BUGGY]  jTj[i][0]  =  sum;  }  jTj[j][0]  =  sum;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum;  }  jTj[j][0]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  sum;  }  jTj[j][0]  =  sum;	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
504	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[j][1]  =  jTj;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[j][1]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  jTj[i][0]  =  jTj;  }  else  {  jTj[j][1]  =  jTj;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[j][0]    =    sum;    	non-compiled	[CE]  incompatible  types	111	None	replace
505	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    cols;    }    	non-compiled	[CE]  incompatible  types	128	None	replace
506	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[1][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]    =    sum    +    1;    jTj[1][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
507	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[1][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  jTj[1][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    jTj[1][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
508	[BUG]  [BUGGY]  jTj[0][j]  =  sum  +  1;  JTj[0][j]  =  sum  +  1;  [CE]  cannot  find  symbol  JTj  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  +  1;  JTj[0][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]    =    sum    +    1;    JTj[0][j]  =  sum  +  1;	  	non-compiled	[CE]  cannot  find  symbol  JTj	35	None	add
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  /  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]  =  sum  /  1;	  jTj[i][0]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	58	2	replace
510	[BUG]  [BUGGY]  jTj[i][0]  =  sum  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  /  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]  =  sum  /  1;	  jTj[i][0]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	58	2	replace
511	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  '  [CE]  illegal  line  end  in  character  literal  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  '  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  '	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    >=    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	69	None	replace
512	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  '  [CE]  illegal  line  end  in  character  literal  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  '  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  '	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    >=    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	69	None	replace
513	[BUG]  [BUGGY]  jTj[0][j]  =  Sum.valueOf(jTj,  rows);  [CE]  cannot  find  symbol  Sum  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  Sum.valueOf(jTj,  rows);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  Sum.valueOf(jTj,  rows);	  jTj[0][j]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol  Sum	95	None	replace
514	[BUG]  [BUGGY]  jTj[0][j]  =  Sum.valueOf(jTj[0]);  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  Sum.valueOf(jTj[0]);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  Sum.valueOf(jTj[0]);	  jTj[i][j]    =    Sum.valueOf(jTj[i]);    	non-compiled	[CE]  cannot  find  symbol  Sum	50	None	replace
515	[BUG]  [BUGGY]  jTj[0][j].  =  sum;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j].  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j].  =  sum;	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  <identifier>  expected	124	None	replace
516	[BUG]  [BUGGY]  jTj[0][j].setValue(sum);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j].setValue(sum);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j].setValue(sum);	  jTj[0][j]    =    sum;    jTj[0][j].    =    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	124	None	replace
517	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  j  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  j  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	54	None	replace
518	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  row;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  row;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  row;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	54	None	replace
519	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  ++i)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  ';'  expected	117	None	replace
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  jTj[i][1]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]    =    sum    +    1;    jTj[i][1]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
521	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  jTj[i][1]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  jTj[i][1]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    jTj[i][1]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
522	[BUG]  [BUGGY]  jTj[i][0]  =  sum  +  1;  JTj[i][0]  =  sum  +  1;  [CE]  cannot  find  symbol  JTj  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]  =  sum  +  1;  JTj[i][0]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]    =    sum    +    1;    JTj[i][0]  =  sum  +  1;	  	non-compiled	[CE]  cannot  find  symbol  JTj	57	None	add
523	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  new  double[cols][cols];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	double[][]  rows  =  new  double[cols][cols];	  double[][]    jTj    =    new    double[cols][rows];    	compilable	  [FE]  AssertionFailedError  	7	2	replace
524	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  new  double[cols][cols];  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  new  double[cols][cols];	  double[][]    jTj    =    new    double[cols][rows];    	compilable	  [FE]  AssertionFailedError  	7	2	replace
525	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder;	  double[][]    jTj    =    new    double[cols][rows];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	7	None	replace
526	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j],  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j],  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[i][j],  jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	non-compiled	[CE]  not  a  statement	16	None	add
527	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  total  +  1;  jTj[i][j]  =  sum  +  1;  [CE]  cannot  find  symbol  total  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[i][j]  =  total  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  total  +  1;  jTj[i][j]  =  sum  +  1;	  	non-compiled	[CE]  cannot  find  symbol  total	16	None	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
529	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  1;  jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    1;    jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  1;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
530	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  cols;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  incompatible  types	84	None	replace
531	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	49	None	replace
532	[BUG]  [BUGGY]  jTj[0]  =  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0]  =  jTj.doubleValue();  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0]  =  jTj.doubleValue();	  jTj[i][0]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
533	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  '  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jT  >>  '	          for(int    j    =    0;    j    <    cols;    ++j)    {    double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jT    	non-compiled	[CE]  illegal  line  end  in  character  literal	127	None	replace
534	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
535	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jTj;  }	  jTj[0][j]    =    sum;    double    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	90	None	replace
536	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jtj;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jtj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[0][j]  =  sum;  double  jTj[0][j]  =  jtj;  }	  jTj[0][j]    =    sum;    double    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	90	None	replace
537	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	53	None	replace
538	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  total  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  cannot  find  symbol  total  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  total  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  total  +  1;  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  cannot  find  symbol  total	104	None	add
539	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  Sum  +  1;  jTj[i][j]  =  sum  +  2;  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[i][j]  =  Sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    jTj[i][j]  =  Sum  +  1;  jTj[i][j]  =  sum  +  2;	  	non-compiled	[CE]  cannot  find  symbol  Sum	104	None	add
540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
541	[BUG]  [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]    =    sum    +    1;    jTj[i][j]  =  sum  +  2;  jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]        =        sum        +        1;        jTj[i][j]    =    sum    +    2;    jTj[0][j]  =  sum  +  1;  jTj[i][j]  =  sum  +  2;	  	compilable	  [FE]  AssertionFailedError  	104	2	add
542	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	112	None	replace
543	[BUG]  [BUGGY]  for(int  i][j]  =  0;  jTj[i][j]  =  0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i][j]  =  0;  jTj[i][j]  =  0;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i][j]  =  0;  jTj[i][j]  =  0;	  jTj[i][j]    =    sum    +    1;    for(int    i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
544	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][1]  =  sum;  jTj[i][1]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
545	[BUG]  [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  jTj[i][1]  =  sum;  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][0]    =    sum;    jTj[i][0]  =  sum;  jTj[i][1]  =  sum;  jTj[i][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][0]        =        sum;        jTj[i][0]    =    sum;    jTj[i][1]  =  sum;  jTj[i][1]  =  sum;	  	compilable	  [FE]  OptimizationException  	1	1	add
546	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	79	None	replace
547	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	79	None	replace
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[1][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[1][j]  =  sum;  jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
549	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[1][j]  =  sum;  jTj[2][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[1][j]  =  sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[1][j]  =  sum;  jTj[2][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	122	2	add
550	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  Sum;  jTj[2][j]  =  sum;  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  Sum;  jTj[2][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[0][j]  =  Sum;  jTj[2][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	122	None	add
551	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  total;  [CE]  cannot  find  symbol  total  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[2][j]  =  sum;  jTj[0][j]  =  sum;  jTj[2][j]  =  total;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[2][j]    =    sum;    jTj[0][j]  =  sum;  jTj[2][j]  =  total;	  	non-compiled	[CE]  cannot  find  symbol  total	122	None	add
552	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jTj[i]  *  jTj[i];  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	92	None	replace
553	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i]  *  jTj[i];  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jTj[i]    *    jTj[i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	92	None	replace
554	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  jTj;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  double  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    double    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	99	None	replace
555	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[i][i]  *  jacobian[k][j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[i][i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[i][i]  *  jacobian[k][j];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	14	None	replace
556	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	14	None	replace
557	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  >  expected	14	None	replace
558	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  chiSquare;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  chiSquare;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[j].doubleValue()  *  chiSquare;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	78	None	replace
559	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j].doubleValue()  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j].doubleValue()  *  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[j].doubleValue()  *  jTj;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[j].doubleValue()    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	78	None	replace
560	[BUG]  [BUGGY]  int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	int[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  long[][]    jTj    =    new    long[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
561	[BUG]  [BUGGY]  long[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  long[][]    jTj    =    new    long[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
562	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[1][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[1][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[1][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
563	[BUG]  [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	long[][]  jTj  =  new  long[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jTj;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	61	None	replace
564	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    cols    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    cols[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	15	None	replace
565	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  jTj;  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  }  else  {  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    jTj[i][0]    =    sum;    }    jTj[i][0]    =    sum;    	non-compiled	[CE]  incompatible  types	110	None	replace
566	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
567	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  incompatible  types	52	None	replace
568	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  total  +  3;  [CE]  cannot  find  symbol  total  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  jTj[i][j]  =  total  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    jTj[i][j]  =  total  +  3;	  	non-compiled	[CE]  cannot  find  symbol  total	75	None	add
569	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  JTj[i][j]  =  sum  +  3;  [CE]  cannot  find  symbol  JTj  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  JTj[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    JTj[i][j]  =  sum  +  3;	  	non-compiled	[CE]  cannot  find  symbol  JTj	75	None	add
570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  jacobian[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]    =    sum    +    3;    jacobian[i][j]  =  sum  +  3;	  	compilable	  [FE]  AssertionFailedError  	75	2	add
571	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  3;  jacobian[i][j]  =  sum  +  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  +  3;  jacobian[i][j]  =  sum  +  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]    =    sum    +    3;    jacobian[i][j]  =  sum  +  3;	  	compilable	  [FE]  AssertionFailedError  	75	2	add
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum  +  Math.sqrt(sum);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][0]  =  sum  +  Math.sqrt(sum);	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
573	[BUG]  [BUGGY]  jTj[j][0]  =  sum  +  Math.sqrt(sum);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum  +  Math.sqrt(sum);  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]  =  sum  +  Math.sqrt(sum);	  jTj[j][0]    =    sum;    	compilable	  [FE]  AssertionFailedError  	107	2	replace
574	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  Sum;  jTj[1][j]  =  sum;  [CE]  cannot  find  symbol  Sum  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[1][j]  =  sum;  jTj[0][j]  =  Sum;  jTj[1][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[1][j]    =    sum;    jTj[0][j]  =  Sum;  jTj[1][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	25	None	add
575	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][1]  =  sum;	  jTj[i][1]    =    sum;    	compilable	  [FE]  AssertionFailedError  	60	2	replace
576	[BUG]  [BUGGY]  jTj[0][1]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][1]  =  sum;	  jTj[i][1]    =    sum;    	compilable	  [FE]  AssertionFailedError  	60	2	replace
577	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	113	None	replace
578	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  i  =  0;  i  <  rows;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    rows;    }    	non-compiled	[CE]  not  a  statement	113	None	replace
579	[BUG]  [BUGGY]  double[][]  rows  =  jtj.doubleValues();  [CE]  cannot  find  symbol  jtj  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  jtj.doubleValues();  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  jtj.doubleValues();	  double[][]    rows    =    sum.doubleValues();    	non-compiled	[CE]  cannot  find  symbol  jtj	121	None	replace
580	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  jTj;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj!=  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj!=  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	4	None	replace
581	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  jTj;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[i][0]  =  sum;  int  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	4	None	replace
582	[BUG]  [BUGGY]  jTj[0][j]  =  jTj;  jTj[1][j]  =  jTj;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  jTj;  jTj[1][j]  =  jTj;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  jTj;  jTj[1][j]  =  jTj;	  jTj[0][j]    =    sum;    jTj[1][j]    =    sum;    	non-compiled	[CE]  incompatible  types	26	None	replace
583	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[2][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][i]    =    sum;    jTj[2][i]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	125	1	add
584	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  jTj[2][i]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    OptimizationException    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][i]  =  sum;  jTj[2][i]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][i]    =    sum;    jTj[2][i]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	125	1	add
585	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  rows  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  rows  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jaco	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jaco    	non-compiled	[CE]  ';'  expected	66	None	replace
586	[BUG]  [BUGGY]  jTj[0]  =  sum;  jTj[i][0]  =  Sum;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0]  =  sum;  jTj[i][0]  =  Sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0]  =  sum;  jTj[i][0]  =  Sum;	  jTj[i][0]    =    sum;    jTj[i][0]    =    Sum;    	non-compiled	[CE]  incompatible  types	5	None	replace
587	[BUG]  [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j],  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]    =    sum;    jTj[0][j]  =  sum;  jTj[0][j],  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]        =        sum;        jTj[0][j]    =    sum;    jTj[0][j],  jTj[0][j]  =  sum;  jTj[0][j]  =  sum;	  	non-compiled	[CE]  not  a  statement	21	None	add
588	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[0][j]  =  sum;  for(int  jTj[0][j]  =  0;  }	  jTj[0][j]    =    sum;    for(int    jTj[0][j]    =    sum;    	non-compiled	[CE]  ']'  expected	23	None	replace
589	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  0;  jTj[i][j]  =  0;  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  jTj[i][j]  =  0;  jTj[i][j]  =  0;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  jTj[i][j]  =  0;  jTj[i][j]  =  0;	  jTj[i][j]    =    sum    +    1;    for(int    jTj[i][j]    =    sum    +    1;    jTj[i][j]    =    sum    +    1;    	non-compiled	[CE]  ']'  expected	18	None	replace
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[1][j]    =    sum;    jTj[0][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
591	[BUG]  [BUGGY]  jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[1][j]  =  sum;  jTj[0][j]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[1][j]    =    sum;    jTj[0][j]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
592	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jTj[j][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[j][0]    =    sum;    jTj[j][1]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	106	2	add
594	[BUG]  [BUGGY]  jTj[j][0]  =  sum;  jTj[j][1]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[j][0]  =  sum;  jTj[j][1]  =  sum;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[j][0]    =    sum;    jTj[j][1]  =  sum;	  	compilable	  [FE]  AssertionFailedError  	106	2	add
595	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder;  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  sum);  }	          double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    sum);    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	32	None	replace
596	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  cols[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  incompatible  types	100	None	replace
597	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	100	None	replace
598	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    rows;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	100	None	replace
599	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	13	None	replace
600	[BUG]  [BUGGY]  double[][]  jtj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jtj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jtj  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	13	None	replace
601	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
602	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jTj[i]  *  jacobian[k][j];  }	  double[][]    jTj    =    new    double[cols][cols    +    1];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj[i]    *    jacobian[k][j];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	101	None	replace
603	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  /  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[0][j]  =  sum  /  1;	  jTj[0][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
604	[BUG]  [BUGGY]  jTj[0][j]  =  sum  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[0][j]  =  sum  /  1;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[0][j]  =  sum  /  1;	  jTj[0][j]    =    sum    +    1;    	compilable	  [FE]  AssertionFailedError  	36	2	replace
605	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [CE]  variable  j  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  j  =  i;  j  <  rows;  ++j)  {  sum  +=  jTj.doubleValue()  *  jTj.doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances()	31	None	replace
606	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  rows[i][i]  *  jTj;  }  [CE]  variable  i  is  already  defined  in  method  getCovariances()  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  rows[i][i]  *  jTj;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  rows[i][i]  *  jTj;  }	  for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[i][i]    *    jTj;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCovariances()	62	None	replace
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  /  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	add	jTj[i][j]  =  sum  /  3;	  jTj[i][j]    =    sum    +    3;    	compilable	  [FE]  AssertionFailedError  	76	2	replace
608	[BUG]  [BUGGY]  jTj[i][j]  =  sum  /  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  jTj[i][j]  =  sum  /  3;  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	jTj[i][j]  =  sum  /  3;	  jTj[i][j]    =    sum    +    3;    	compilable	  [FE]  AssertionFailedError  	76	2	replace
609	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  k  =  0;  i  <  rows;  ++i)  {  sum  +=  jacobian[i][i]  *  jacobian[k][i];  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    i    =    0;    i    <    rows;    ++i)    {    sum    +=    jacobian[i][i]    *    jacobian[k][i];    }    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	83	None	replace
610	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    for(int    j    =    i;    j    <    cols;    ++j)    {    sum    +=    j    }    	non-compiled	[CE]  ';'  expected	88	None	replace
611	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols.doubleValue()  *  jTj.doubleValue();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols.doubleValue()  *  jTj.doubleValue();  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  cols.doubleValue()  *  jTj.doubleValue();  }	  double[][]    jTj    =    new    double[cols][cols];    for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    jTj.doubleValue()    *    jTj.doubleValue();    }    	non-compiled	[CE]  incompatible  types	109	None	replace
612	[BUG]  [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  if(jTj  ==  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }  [BUGGY]      jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	if(jTj  ==  null)  {  jTj[i][0]  =  sum;  for(int  jTj[i][0]  =  jTj;  }	  jTj[i][0]    =    sum;    for(int    jTj[i][0]    =    sum;    	non-compiled	[CE]  ']'  expected	3	None	replace
613	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
614	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  sum  +=  jacobian[  }	  double[][]    jTj    =    new    double[rows][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    sum    +=    jacobian[    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
615	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }      [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }  [BUGGY]      jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	285	285	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];  for(int  i  =  0;  i  <  cols;  ++i)  {  rows;  }	  double[][]    cols    =    new    double[cols][cols];    for(int    i    =    0;    i    <    cols;    ++i)    {    rows;    ++i);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
