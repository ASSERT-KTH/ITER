bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
99	[BUG] [BUGGY] for (int j = 0; j < cols; ++j) { [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); [BUGGY] for (int j = 0; j < cols; ++j) { [BUGGY] ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); [BUGGY] [BUGGY] for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double cost factor double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	
