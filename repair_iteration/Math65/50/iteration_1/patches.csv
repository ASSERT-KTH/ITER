bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
2	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
3	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  cost);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  cost);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
4	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  i);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  i);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
5	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji.length);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
6	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  2);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  2);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  2);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
7	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(cols,  factor.length);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor.length);	      int    cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
8	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  cost);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor,  cost);	      int    cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
9	[BUG]  [BUGGY]  int  cols  =  Math.min(factor.length,  column);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(factor.length,  column);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor.length,  column);	      int    cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
10	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  cost);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  cost);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
11	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  factor);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
12	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
13	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor);	      VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
14	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(false);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(false);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
15	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable);	      VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
16	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker();	      VectorialConvergenceChecker    convergenceChecker    =    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
17	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker();	      VectorialConvergenceChecker    convergenceChecker    =    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
18	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jf.getVariableConvergenceChecker();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jf.getVariableConvergenceChecker();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF,  jf.getVariableConvergenceChecker();	      VectorialConvergenceChecker    convergenceChecker    =    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  for(int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  for(int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length;    ++j)    {    for(int  j  =  0;  j  <  ji.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  For(int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  For(int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length;    ++j)    {    For(int  j  =  0;  j  <  ji.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length;    ++j)    {    int  j  =  0;  j  <  ji.length;  ++j)  {	  	non-compiled	[CE]  >  expected	8	None	add
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  for(int  j  =  0;  j  <  factor;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  for(int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    factor;    ++j)    {    for(int  j  =  0;  j  <  factor;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  For(int  j  =  0;  j  <  factor;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  For(int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    factor;    ++j)    {    For(int  j  =  0;  j  <  factor;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    factor;    ++j)    {    int  j  =  0;  j  <  factor;  ++j)  {	  	non-compiled	[CE]  >  expected	6	None	add
25	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(cols.length,  factor,  cost);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  cost);	      cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
26	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(cols,  factor.length);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor.length);	      cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
27	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
28	[BUG]  [BUGGY]  for(int  ji  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  ji  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  ji  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  factor;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  cols  <  factor.length;  ++cols)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  i  =  0;  cols  <  factor.length;  ++cols)  {  ji[i]  *=  factor;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  i  =  0;  cols  <  factor.length;  ++cols)  {  ji[i]  *=  factor;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	9	13	replace
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	9	13	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	9	14	replace
34	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	9	14	replace
35	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factors;  ++j)  {  [CE]  cannot  find  symbol  factors  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factors;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factors;  ++j)  {	  for(int    j    =    0;    j    <    columns;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  factors	14	None	replace
36	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  [CE]  cannot  find  symbol  factors  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factors.length;  ++j)  {	  for(int    j    =    0;    j    <    columns;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  factors	14	None	replace
37	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(factor);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
38	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
39	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
40	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	double  cols  =  Math.min(residualsWeights[i],  factor);	      int    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
41	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	long  cols  =  Math.min(residualsWeights[i],  factor);	      int    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
42	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  cost);	      int    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  3;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	13	replace
44	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  3;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	13	13	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    For(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	10	None	add
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  5;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	11	16	replace
49	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  5;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	11	16	replace
50	[BUG]  [BUGGY]  cols  =  jF.value(cols,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  jF.value(cols,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(cols,  factor);	      cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
51	[BUG]  [BUGGY]  cols  =  jF.value(factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  jF.value(factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor);	      cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
52	[BUG]  [BUGGY]  cols  =  jF.value(factor,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  jF.value(factor,  cols);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  cols);	      cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
53	[BUG]  [BUGGY]  cols  =  jF.value(factor,  columns);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  jF.value(factor,  columns);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  columns);	      cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
54	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(cols,  factor,  cost);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  cost);	      cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
55	[BUG]  [BUGGY]  cols  =  Math.max(cols,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.max(cols,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.max(cols,  factor);	      cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
56	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(cols,  factor,  i);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  i);	      cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
57	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(factor);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
58	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
59	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  ';'  expected	5	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    for(int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
61	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows);  ++j)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows);  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    for(int  j  =  0;  j  <  rows);  ++j)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
62	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    For(int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	12	None	add
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    for(int  j  =  0;  j  <  columns;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
64	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[cols]  *=  factor;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
65	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  coefficient;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  coefficient;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  coefficient;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
66	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor);  ++j)  {  [CE]  no  suitable  method  found  for  min(double[],double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor);  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor);  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double)	13	None	replace
67	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(cols,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor);	      int    cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
68	[BUG]  [BUGGY]  int  cols  =  Math.min(colons.length,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(colons.length,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colons.length,  factor);	      int    cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
69	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  i.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  i.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
70	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance);	      VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
71	[BUG]  [BUGGY]  float  cols  =  Math.min(residualsWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  float  cols  =  Math.min(residualsWeights[i],  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	float  cols  =  Math.min(residualsWeights[i],  factor);	      int    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
72	[BUG]  [BUGGY]  cols  =  Math.min(colons.length,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(colons.length,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(colons.length,  factor);	      cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
73	[BUG]  [BUGGY]  cols  =  Math.min(colons,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(colons,  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(colons,  factor);	      cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
74	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  Math.min(cols,  factor  -  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor  -  1);	      cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
75	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor);	      VectorialConvergenceChecker    convergenceChecker    =    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
76	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(factor);	      VectorialConvergenceChecker    convergenceChecker    =    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
77	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  targetValues);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  targetValues);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  targetValues);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
78	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  1);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  1);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  >  expected	12	None	add
80	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  i;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	7	14	replace
82	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  i;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	7	14	replace
83	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
84	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker();	      VectorialConvergenceChecker    convergenceChecker    =    jF.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
85	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  for(int  j  =  0;  j  <  factor);  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  for(int  j  =  0;  j  <  factor);  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    factor;    ++j)    {    for(int  j  =  0;  j  <  factor);  ++j)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
86	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int  j  =  0;  j  <  ji.length;  ++j)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
87	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  variables;  ++j)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  variables;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  variables;  ++j)  {	  for(int    j    =    0;    j    <    columns;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  	14	None	replace
88	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
89	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(0);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(0);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
90	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
91	[BUG]  [BUGGY]  cols  =  jF.value(factor,  column);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  cols  =  jF.value(factor,  column);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  column);	      cols    =    jF.value(cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
92	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker();	      VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  coefficients.length;  ++j)  {  [CE]  cannot  find  symbol  coefficients  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  coefficients.length;  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  coefficients.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  coefficients	9	None	replace
94	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS);	      int    cols    =    Math.min(residualsWeights,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
95	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2);  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2);  ++j)  {  [BUGGY]    ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2);  ++j)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
96	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
97	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
98	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  coefficients.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  for(int  cols  =  0;  cols  <  coefficients.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  coefficients.length;  ++cols)  {  ji[cols]  *=  factor;  }	      for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
99	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor.length);	      int    cols    =    Math.min(cols.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
100	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);    [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor);  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Double  cols  =  Math.min(residualsWeights[i],  factor);	      int    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
