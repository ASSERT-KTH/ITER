bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
2	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factors.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
3	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  }  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  }	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  coefficients.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  coefficients.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  coefficients.length;  ++j)  {  int  j  =  0;  j  <  factor;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    1;    ++j)    {    for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  For(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  For(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    1;    ++j)    {    For(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	31	None	add
7	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    1;    ++j)    {    int  j  =  0;  j  <  ji.length  -  1;  ++j)  {	  	non-compiled	[CE]  >  expected	31	None	add
8	[BUG]  [BUGGY]  cols  =  jF.value(column,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(column,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(column,  factor);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
9	[BUG]  [BUGGY]  cols  =  factor.value(ji,  column);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  factor.value(ji,  column);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  factor.value(ji,  column);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
10	[BUG]  [BUGGY]  cols  =  jF.value(factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  i);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
11	[BUG]  [BUGGY]  cols  =  jF.value(column);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(column);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(column);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
12	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor  -  1);	  cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
13	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(true);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(true);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
14	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
15	[BUG]  [BUGGY]  int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  >  expected	97	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  i  =  0;  i  <  variables.length;  ++i)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  i  =  0;  i  <  variables.length;  ++i)  {  ji[i]  *=  factor;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
17	[BUG]  [BUGGY]  For(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  '.class'  expected	97	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    5;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	49	12	replace
19	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    5;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	49	12	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  3;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  ji.length  -  3;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	34	14	replace
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  3;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  3;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  ji.length  -  3;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	34	14	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  /  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  ji.length  /  2;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	34	13	replace
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  /  2;  ++j)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  /  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  ji.length  /  2;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	34	13	replace
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    i;    ++j)    {    for(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
25	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  For(int  j  =  0;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  For(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    i;    ++j)    {    For(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	81	None	add
26	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    i;    ++j)    {    int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	81	None	add
27	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  variables.length;  ++j)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  variables.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  variables.length;  ++j)  {	  for(int    j    =    0;    j    <    factors.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  	36	None	replace
28	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor  *  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor  *  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor  *  factor  -  1);	  cols    =    Math.min(cols,    factor    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
29	[BUG]  [BUGGY]  cols  =  Math.max(cols,  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.max(cols,  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.max(cols,  factor  -  1);	  cols    =    Math.min(cols,    factor    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
30	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor  /  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor  /  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor  /  1);	  cols    =    Math.min(cols,    factor    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
31	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
32	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
33	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
34	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
35	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    For(int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
36	[BUG]  [BUGGY]  int  cols  =  Math.max(cols,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.max(cols,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.max(cols,  factor);	  int    cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
37	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols,  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor  -  1);	  int    cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
38	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  0);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  0);	  int    cols    =    Math.min(residualsWeights,    factor,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
39	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  cost);	  int    cols    =    Math.min(residualsWeights,    factor,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
40	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  0);	  int    cols    =    Math.min(residualsWeights,    factor,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
41	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  3);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  3);	  int    cols    =    Math.min(residualsWeights,    factor,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
42	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols,  factor.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor.length  -  1);	  int    cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
43	[BUG]  [BUGGY]  int  cols  =  Math.max(cols,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.max(cols,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.max(cols,  factor.length);	  int    cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
44	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols,  factor.length  -  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor.length  -  2);	  int    cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
45	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols,  factor.length  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor.length  +  1);	  int    cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
46	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(function);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
47	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  ji.length);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
48	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  2);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
49	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  value);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  value);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
50	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  0);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
51	[BUG]  [BUGGY]  cols  =  Math.min(colon,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(colon,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(colon,  factor);	  cols    =    Math.min(colons,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
52	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
53	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  coefficients;  ++j)  {  [CE]  cannot  find  symbol  coefficients  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  coefficients;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  coefficients;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    for(int    j    =    0;    j    <    factor);    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  coefficients	85	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
56	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  For(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  For(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    For(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	33	None	add
57	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    int  j  =  0;  j  <  ji.length  -  2;  ++j)  {	  	non-compiled	[CE]  >  expected	33	None	add
58	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
59	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  5;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {  final  double  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
61	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  3;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    3;    ++j)    {    for(int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
62	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  For(int  j  =  0;  j  <  3;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  For(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    3;    ++j)    {    For(int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	43	None	add
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  3;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    3;    ++j)    {    int  j  =  0;  j  <  3;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	43	None	add
64	[BUG]  [BUGGY]  for(int  ji  =  0;  j  <  cols;  ++j)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  ji  =  0;  j  <  cols;  ++j)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  ji  =  0;  j  <  cols;  ++j)  {  ji[cols]  *=  factor;  }	  for(int    ji    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  ji[i]  *=  factor;  }	  for(int    ji    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
66	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  i  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  i  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  i  +  1);	  int    cols    =    Math.min(residualsWeights,    factor,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
67	[BUG]  [BUGGY]  int  cols  =  Math.min(result,  factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(result,  factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(result,  factor,  i);	  int    cols    =    Math.min(residualsWeights,    factor,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
68	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[i]  *=  factor;  }	  for(int    i    =    0;    cols    <    factor.length;    ++cols)    {    ji[i]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  cols  <  ji.length;  ++cols)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  i  =  0;  cols  <  ji.length;  ++cols)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  i  =  0;  cols  <  ji.length;  ++cols)  {  ji[i]  *=  factor;  }	  for(int    i    =    0;    cols    <    factor.length;    ++cols)    {    ji[i]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  cols  <  factor.length;  ++i)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  i  =  0;  cols  <  factor.length;  ++i)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  i  =  0;  cols  <  factor.length;  ++i)  {  ji[i]  *=  factor;  }	  for(int    i    =    0;    cols    <    factor.length;    ++cols)    {    ji[i]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
71	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
72	[BUG]  [BUGGY]  float  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  float  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	float  cols  =  Math.min(residualsWeights[i],  factor,  cost);	  float    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
73	[BUG]  [BUGGY]  cols  =  factor.value(ji);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  factor.value(ji);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  factor.value(ji);	  cols    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
74	[BUG]  [BUGGY]  cols  =  jF.value(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  cost);	  cols    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
75	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  for(int  j  =  0;  j  <  5;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  for(int  j  =  0;  j  <  5;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    5;    ++j)    {    for(int  j  =  0;  j  <  5;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
76	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  For(int  j  =  0;  j  <  5;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  For(int  j  =  0;  j  <  5;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    5;    ++j)    {    For(int  j  =  0;  j  <  5;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	48	None	add
77	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  for(int  j  =  0;  j  <  6;  ++j)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  for(int  j  =  0;  j  <  6;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    5;    ++j)    {    for(int  j  =  0;  j  <  6;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  int  j  =  0;  j  <  5;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  5;  ++j)  {  int  j  =  0;  j  <  5;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    5;    ++j)    {    int  j  =  0;  j  <  5;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	48	None	add
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  cannot  find  symbol  parameters  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    variables;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  parameters	87	None	replace
80	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker,  jf.getVariableConvergenceChecker();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker,  jf.getVariableConvergenceChecker();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker,  jf.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	18	None	replace
81	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf,  jf.getVariableConvergenceChecker();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf,  jf.getVariableConvergenceChecker();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf,  jf.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	18	None	replace
82	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jf.getRangeConvergenceChecker();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF,  jf.getRangeConvergenceChecker();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF,  jf.getRangeConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	18	None	replace
83	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  two;  ++j)  {  [CE]  cannot  find  symbol  two  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  two;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  two;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    for(int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  two	45	None	replace
84	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(factor);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
85	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getRangeConvergenceChecker();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getRangeConvergenceChecker();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getRangeConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
86	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
87	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
88	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
89	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(function);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(function);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(function);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
90	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(true);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(true);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
91	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(false,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(false,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(false,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
92	[BUG]  [BUGGY]  int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    coefficient;    }    	non-compiled	[CE]  >  expected	65	None	replace
93	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	long  cols  =  Math.min(residualsWeights[i],  factor,  cost);	  long    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
94	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  targetValues,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  targetValues,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  targetValues,  cost);	  int    cols    =    Math.min(residualsWeights,    factor,    targetValues);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
95	[BUG]  [BUGGY]  int  cols  =  Math.min(result,  factor,  targetValues[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(result,  factor,  targetValues[i]);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(result,  factor,  targetValues[i]);	  int    cols    =    Math.min(residualsWeights,    factor,    targetValues);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
96	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
97	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(ji);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(ji);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(ji);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
98	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
99	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variant);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variant);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variant);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
100	[BUG]  [BUGGY]  int  cols  =  Math.min(result,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(result,  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(result,  factor,  cost);	  int    cols    =    Math.min(residualsWeights,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
101	[BUG]  [BUGGY]  cols  =  factor.value(cols,  ji);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  factor.value(cols,  ji);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  factor.value(cols,  ji);	  cols    =    jF.value(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
102	[BUG]  [BUGGY]  cols  =  factor.value(cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  factor.value(cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  factor.value(cols);	  cols    =    jF.value(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
103	[BUG]  [BUGGY]  cols  =  jF.value(cols,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(cols,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(cols,  coefficient);	  cols    =    jF.value(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
104	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(true);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(true);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
105	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
106	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variable,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
107	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variable,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
108	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  variable);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  variable);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variable,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
109	[BUG]  [BUGGY]  int  cols  =  Math.min(colons.length,  factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colons.length,  factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colons.length,  factor,  i);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
110	[BUG]  [BUGGY]  int  cols  =  Math.min(colons.length,  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colons.length,  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colons.length,  factor  -  1);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
111	[BUG]  [BUGGY]  int  cols  =  Math.min(colons.length,  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colons.length,  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colons.length,  factor,  cost);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
112	[BUG]  [BUGGY]  int  cols  =  Math.max(colons.length,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.max(colons.length,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.max(colons.length,  factor);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
113	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
114	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
115	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variate,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
116	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
117	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(cost);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
118	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(variable);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
119	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	62	None	replace
120	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	79	None	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	79	None	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	79	None	replace
123	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  3;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	79	None	replace
124	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Double  cols  =  Math.min(residualsWeights[i],  factor,  cost);	  Double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
125	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Double  cols  =  Math.min(residualsWeights[i],  cost);	  Double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
126	[BUG]  [BUGGY]  Double  cols  =  Math.min(result,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  Double  cols  =  Math.min(result,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Double  cols  =  Math.min(result,  factor);	  Double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
127	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(true);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(true);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
128	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
129	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  cost);  ++j)  {  [CE]  no  suitable  method  found  for  min(double[],double,double)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  cost);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  cost);  ++j)  {	  for(int    j    =    0;    j    <    Math.min(residualsWeights,    factor);    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double,double)	66	None	replace
130	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  i));  ++j)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  i));  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  i));  ++j)  {	  for(int    j    =    0;    j    <    Math.min(residualsWeights,    factor);    ++j)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
131	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  2);  ++j)  {  [CE]  no  suitable  method  found  for  min(double[],double,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  2);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  2);  ++j)  {	  for(int    j    =    0;    j    <    Math.min(residualsWeights,    factor);    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double,int)	66	None	replace
132	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  null);  ++j)  {  [CE]  no  suitable  method  found  for  min(double[],double,<null>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  null);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  null);  ++j)  {	  for(int    j    =    0;    j    <    Math.min(residualsWeights,    factor);    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double,<null>)	66	None	replace
133	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(1);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
134	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(2);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(2);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
135	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
136	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
137	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
138	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
139	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
140	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(cost);	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
141	[BUG]  [BUGGY]  cols  =  Math.max(cols,  factor  *  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.max(cols,  factor  *  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.max(cols,  factor  *  factor);	  cols    =    Math.max(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
142	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	21	None	replace
143	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  i.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  i.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	21	None	replace
144	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor,  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  2);	  cols    =    Math.min(cols,    factor,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
145	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  i  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor,  i  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  i  +  1);	  cols    =    Math.min(cols,    factor,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
146	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor,  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  1);	  cols    =    Math.min(cols,    factor,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
147	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor,  3);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  3);	  cols    =    Math.min(cols,    factor,    i);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
148	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor.length  -  1);	  cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
149	[BUG]  [BUGGY]  cols  =  Math.max(cols,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.max(cols,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.max(cols,  factor.length);	  cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
150	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor.length  -  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor.length  -  2);	  cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
151	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor.length  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor.length  +  1);	  cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
152	[BUG]  [BUGGY]  for(int  ji  =  0;  ji  <  cols;  ++j)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  ji  =  0;  ji  <  cols;  ++j)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  ji  =  0;  ji  <  cols;  ++j)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    ji.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
153	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor,  cost);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(),    factor);    	non-compiled	[CE]  ';'  expected	59	None	replace
154	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  coefficient);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(),    factor);    	non-compiled	[CE]  ';'  expected	59	None	replace
155	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor,  null);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor,  null);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor,  null);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(),    factor);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
156	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	double  cols  =  Math.min(residualsWeights[i],  factor,  cost);	  double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
157	[BUG]  [BUGGY]  double  cols  =  Math.min(result,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  double  cols  =  Math.min(result,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	double  cols  =  Math.min(result,  factor);	  double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
158	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	double  cols  =  Math.min(residualsWeights[i],  cost);	  double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
159	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variant);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
160	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variant);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
161	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  ji.length);	  cols    =    Math.min(cols,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
162	[BUG]  [BUGGY]  int  cols  =  Math.min(column,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(column,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(column,  factor);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
163	[BUG]  [BUGGY]  int  cols  =  Math.min(factor.length,  factor.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor.length,  factor.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor.length,  factor.length  -  1);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
164	[BUG]  [BUGGY]  int  cols  =  Math.min(column,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(column,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(column,  factor.length);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
165	[BUG]  [BUGGY]  int  cols  =  Math.min(factor.length,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor.length,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor.length,  ji.length);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
166	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
167	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
168	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
169	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(ji);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(ji);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(ji);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
170	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(function);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(function);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(function);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
171	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    For(int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  '.class'  expected	46	None	replace
172	[BUG]  [BUGGY]  cols  =  factor.value(ji,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  factor.value(ji,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  factor.value(ji,  cols);	  cols    =    jF.value(factor,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
173	[BUG]  [BUGGY]  cols  =  jF.value(point,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(point,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(point,  cols);	  cols    =    jF.value(factor,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
174	[BUG]  [BUGGY]  cols  =  jF.value(factor,  cols  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  cols  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  cols  +  1);	  cols    =    jF.value(factor,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
175	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor.length  -  1);	  int    cols    =    Math.min(cols.length,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
176	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor.length  +  1);	  int    cols    =    Math.min(cols.length,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
177	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor.length  -  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor.length  -  2);	  int    cols    =    Math.min(cols.length,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
178	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.max(cols.length,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.max(cols.length,  factor.length);	  int    cols    =    Math.min(cols.length,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
179	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(factor);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
180	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(false);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(false);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(false);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
181	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variable);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variable);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variable);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
182	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor,  ji.length);	  int    cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
183	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor,  2);	  int    cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
184	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor,  i);	  int    cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
185	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols.length,  factor,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols.length,  factor,  0);	  int    cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
186	[BUG]  [BUGGY]  cols  =  jF.value(columns,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(columns,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(columns,  factor);	  cols    =    jF.value(factor,    columns);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
187	[BUG]  [BUGGY]  cols  =  factor.value(ji,  columns);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  factor.value(ji,  columns);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  factor.value(ji,  columns);	  cols    =    jF.value(factor,    columns);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
188	[BUG]  [BUGGY]  cols  =  jF.value(factor,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  coefficient);	  cols    =    jF.value(factor,    columns);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
189	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	86	None	replace
190	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  double  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  double  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  double  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	86	None	replace
191	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  final  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length;  ++j)  {  final  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  ji.length;  ++j)  {  final  int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	86	None	replace
192	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  ji.length);	  cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
193	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor,  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  2);	  cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
194	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  i);	  cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
195	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  0);	  cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
196	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf.getVariableConvergenceChecker(factor);	  VectorialConvergenceChecker    convergenceChecker    =    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
197	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.getVariableConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.getVariableConvergenceChecker(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.getVariableConvergenceChecker(factor);	  VectorialConvergenceChecker    convergenceChecker    =    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
198	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
199	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  ji.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
200	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  factor,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  factor,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  factor,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
201	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(variable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
202	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(variable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
203	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variable,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(variable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
204	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  factor;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  factor;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    For(int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  '.class'  expected	23	None	replace
205	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji[i].length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji[i].length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji[i].length);	  int    cols    =    Math.min(residualsWeights,    factor,    ji.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
206	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji.length  -  1);	  int    cols    =    Math.min(residualsWeights,    factor,    ji.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
207	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cols,  factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cols,  factor,  ji.length);	  int    cols    =    Math.min(residualsWeights,    factor,    ji.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
208	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji[i]);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji[i]);	  int    cols    =    Math.min(residualsWeights,    factor,    ji.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
209	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length  -  1;  ++j)  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length  -  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    1;    ++j)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
210	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factors;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factors;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factors;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	62	None	replace
211	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	62	None	replace
212	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variance,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
213	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variable,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variable);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
214	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.values);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.values);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji.values);	  int    cols    =    Math.min(residualsWeights,    factor,    targetValues);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
215	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  value);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  value);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  value);	  int    cols    =    Math.min(residualsWeights,    factor,    targetValues);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
216	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor  +  1;	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(),    factor);    	non-compiled	[CE]  ';'  expected	59	None	replace
217	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor  +  1);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(),  factor  +  1);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(),    factor);    	non-compiled	[CE]  ';'  expected	59	None	replace
218	[BUG]  [BUGGY]  cols  =  jF.value(colon,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(colon,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(colon,  factor);	  cols    =    jF.value(factor,    cols);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
219	[BUG]  [BUGGY]  int  cols  =  Math.min(factor.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor.length,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor.length,  factor.length);	  int    cols    =    Math.min(cols.length,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
220	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  coefficient;  ++j)  {  [CE]  cannot  find  symbol  coefficient  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  coefficient;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  coefficient;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    for(int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  coefficient	22	None	replace
221	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  for(int  j  =  0;  j  <  ji.length  +  1;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  for(int  j  =  0;  j  <  ji.length  +  1;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    1;    ++j)    {    for(int  j  =  0;  j  <  ji.length  +  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
222	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  i.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  i.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  i.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    For(int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
223	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	double  cols  =  Math.min(residualsWeights[i],  factor  -  1);	  double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
224	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS  +  1);	  int    cols    =    Math.min(residualsWeights,    factor,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
225	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  i);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  i);	  int    cols    =    Math.min(residualsWeights,    factor,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
226	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  ji);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor,  ji);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  ji);	  cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
227	[BUG]  [BUGGY]  int  cols  =  Math.min(colon,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colon,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colon,  factor.length);	  int    cols    =    Math.min(cols,    factor.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
228	[BUG]  [BUGGY]  int  cols  =  Math.min(factor,  colons.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor,  colons.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor,  colons.length);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
229	[BUG]  [BUGGY]  int  cols  =  Math.min(factor,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor,  coefficient);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
230	[BUG]  [BUGGY]  float  cols  =  Math.min(resultsWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  float  cols  =  Math.min(resultsWeights[i],  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	float  cols  =  Math.min(resultsWeights[i],  factor);	  float    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
231	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {  double  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
232	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor,  cols);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor,  cols);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(factor,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
233	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  i);  ++j)  {  [CE]  no  suitable  method  found  for  min(double[],double,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  i);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  i);  ++j)  {	  for(int    j    =    0;    j    <    Math.min(residualsWeights,    factor);    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double,int)	66	None	replace
234	[BUG]  [BUGGY]  int  cols  =  Math.min(colon,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colon,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colon,  factor);	  int    cols    =    Math.min(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
235	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[i]  *=  factor;  }	  for(int    i    =    0;    cols    <    factor.length;    ++cols)    {    ji[i]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
236	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[i]  *=  factor;  }	  for(int    i    =    0;    cols    <    factor.length;    ++cols)    {    ji[i]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
237	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
238	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
239	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  1);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
240	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  -value);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  -value);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  -value);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
241	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor  -  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor  -  2);	  cols    =    Math.min(cols,    factor    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
242	[BUG]  [BUGGY]  cols  =  Math.max(cols,  factor  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.max(cols,  factor  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.max(cols,  factor  +  1);	  cols    =    Math.max(cols,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
243	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
244	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
245	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  i.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  i.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
246	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  double  j  =  0;  j  =  ji.length;  ++j)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  double  j  =  0;  j  =  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factor.length;  ++j)  {  final  double  j  =  0;  j  =  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	86	None	replace
247	[BUG]  [BUGGY]  cols  =  jF.value(factor  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor  +  1);	  cols    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
248	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRawConvergenceChecker(true);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getRawConvergenceChecker(true);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getRawConvergenceChecker(true);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  4;  ++j)  {	  for(int    j    =    0;    j    <    3;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	44	14	replace
250	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  4;  ++j)  {	  for(int    j    =    0;    j    <    3;    ++j)    {    	compilable	  [FE]  AssertionFailedError  	44	14	replace
251	[BUG]  [BUGGY]  for(int  ji  =  0;  j  <  ji.length;  ++j)  {  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  ji  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  ji  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    for(int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	19	None	replace
252	[BUG]  [BUGGY]  int  cols  =  Math.min(factor.length,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor.length,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor.length,  i);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
253	[BUG]  [BUGGY]  int  cols  =  Math.min(factor.length,  ji.column);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(factor.length,  ji.column);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(factor.length,  ji.column);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
254	[BUG]  [BUGGY]  cols  =  jF.value(factor,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  2);	  cols    =    jF.value(factor,    columns);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
255	[BUG]  [BUGGY]  cols  =  jF.value(factor,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  3);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  3);	  cols    =    jF.value(factor,    columns);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
256	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(function,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(function);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
257	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  ji);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  ji);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  ji);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
258	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
259	[BUG]  [BUGGY]  cols  =  jF.value(column,  cost);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(column,  cost);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(column,  cost);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
260	[BUG]  [BUGGY]  int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  0;  cols  <  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    ji.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  >  expected	27	None	replace
261	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(variance);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
262	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Double  cols  =  Math.min(residualsWeights[i],  factor,  0);	  Double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
263	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variate);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variate);	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
264	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variant);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variant);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.convergenceChecker(variant);	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
265	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji.length  +  1);	  int    cols    =    Math.min(residualsWeights,    factor,    ji.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
266	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  ji.length  -  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  ji.length  -  2);	  int    cols    =    Math.min(residualsWeights,    factor,    ji.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
267	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factors.length;  ++j)  {  int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	21	None	replace
268	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.value(factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf.value(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf.value(factor);	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
269	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  coefficient;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  coefficient;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  variables.length;  ++cols)  {  ji[cols]  *=  coefficient;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
270	[BUG]  [BUGGY]  int  cols  =  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
271	[BUG]  [BUGGY]  Integer  cols  =  Math.min(residualsWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  Integer  cols  =  Math.min(residualsWeights[i],  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Integer  cols  =  Math.min(residualsWeights[i],  factor);	  long    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
272	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor,  i);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor,  i);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(factor,  i);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
273	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
274	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  cols;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  cols;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  cols  =  0;  cols  <  factor.length;  ++cols)  {  ji[cols]  *=  cols;  }	  for(int    cols    =    0;    cols    <    coefficient.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
275	[BUG]  [BUGGY]  int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  0;  cols  <  coefficient.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    coefficient.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  >  expected	64	None	replace
276	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  factor.length;  ++j)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  factor.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  factor.length;  ++j)  {	  for(int    j    =    0;    j    <    factor.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	30	None	replace
277	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.length;  ++j)  {  [CE]  cannot  find  symbol  columns  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  columns.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  columns.length;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    for(int    j    =    0;    j    <    columns;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  columns	63	None	replace
278	[BUG]  [BUGGY]  cols  =  Math.min(cols,  factor,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols,  factor,  0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols,  factor,  0);	  cols    =    Math.min(cols,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
279	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variant,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(variant);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
280	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  (int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  (int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    (int  j  =  0;  j  <  ji.length  -  2;  ++j)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
281	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate,  coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker(variate);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
282	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variate);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variate);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getResialConvergenceChecker(variate);	  VectorialConvergenceChecker    convergenceChecker    =    getResialConvergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
283	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor,  3);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor,  3);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor,  3);	  cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
284	[BUG]  [BUGGY]  cols  =  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  ji.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    coefficient;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
285	[BUG]  [BUGGY]  int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  >  expected	21	None	replace
286	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(0);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(0);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(0);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
287	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  ji.length);  ++j)  {  [CE]  no  suitable  method  found  for  min(double[],double,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  ji.length);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  Math.min(residualsWeights,  factor,  ji.length);  ++j)  {	  for(int    j    =    0;    j    <    Math.min(residualsWeights,    factor);    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double,int)	66	None	replace
288	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
289	[BUG]  [BUGGY]  cols  =  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  variables.length;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    variables.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
290	[BUG]  [BUGGY]  cols  =  jF.value(factor  *  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor  *  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor  *  factor);	  cols    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
291	[BUG]  [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	79	None	replace
292	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  1,  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  1;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  1,  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    1;    ++j)    {    for(int  j  =  0;  j  <  ji.length  -  1,  ++j)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
293	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(factor,  factor);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
294	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    coefficient.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
295	[BUG]  [BUGGY]  int  j  =  0;  j  <  factor;  ++j)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  j  =  0;  j  <  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  j  =  0;  j  <  factor;  ++j)  {	  for(int    j    =    0;    j    <    factor;    ++j)    {    int    j    =    0;    j    <    factor;    ++j)    {    	non-compiled	[CE]  >  expected	24	None	replace
296	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i);  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    i;    ++j)    {    for(int  j  =  0;  j  <  i);  ++j)  {	  	non-compiled	[CE]  ';'  expected	81	None	add
297	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf,  checker.getVariableConvergenceChecker();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jf,  checker.getVariableConvergenceChecker();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jf,  checker.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    jF,    jf.getVariableConvergenceChecker();    	non-compiled	[CE]  ';'  expected	18	None	replace
298	[BUG]  [BUGGY]  int  j  =  0;  j  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  j  =  0;  j  <  2;  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  j  =  0;  j  <  2;	  for(int    j    =    0;    j    <    2;    ++j)    {    int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
299	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	add	for(int  j  =  0;  j  <  ji.length  -  factor;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	16	replace
300	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  factor;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  factor;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  ji.length  -  factor;  ++j)  {	  for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	16	replace
301	[BUG]  [BUGGY]  int  cols  =  Math.min(variant.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(variant.length,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(variant.length,  factor.length);	  int    cols    =    Math.min(factor.length,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++cols)  {  ji[i]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++cols)  {  ji[i]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  i  =  0;  i  <  cols;  ++cols)  {  ji[i]  *=  factor;  }	  for(int    i    =    0;    cols    <    factor.length;    ++cols)    {    ji[i]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
303	[BUG]  [BUGGY]  int  cols  =  Math.min(colons.length,  factor,  ji.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colons.length,  factor,  ji.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colons.length,  factor,  ji.length);	  int    cols    =    Math.min(cols.length,    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
304	[BUG]  [BUGGY]  for(int  ji  =  0;  ji  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  ji  =  0;  ji  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  ji  =  0;  ji  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    cols    =    0;    cols    <    ji.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
305	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(coefficient);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.value(coefficient);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.value(coefficient);	  VectorialConvergenceChecker    convergenceChecker    =    jF.value(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
306	[BUG]  [BUGGY]  cols  =  jF.value(factor,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(factor,  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(factor,  1);	  cols    =    jF.value(factor,    columns);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
307	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  3);  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  for(int  j  =  0;  j  <  3);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    3;    ++j)    {    for(int  j  =  0;  j  <  3);  ++j)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
308	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  factor  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	Double  cols  =  Math.min(residualsWeights[i],  factor  -  1);	  Double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
309	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  factors;  ++j)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  For(int  j  =  0;  j  <  factors;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	For(int  j  =  0;  j  <  factors;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	62	None	replace
310	[BUG]  [BUGGY]  double  cols  =  Math.min(resultesWeights[i],  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  double  cols  =  Math.min(resultesWeights[i],  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	double  cols  =  Math.min(resultesWeights[i],  factor);	  double    cols    =    Math.min(residualsWeights[i],    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
311	[BUG]  [BUGGY]  cols  =  jF.value(point,  column);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(point,  column);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(point,  column);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
312	[BUG]  [BUGGY]  cols  =  jF.value(row,  column);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  jF.value(row,  column);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  jF.value(row,  column);	  cols    =    jF.value(factor,    column);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
313	[BUG]  [BUGGY]  int  cols  =  Math.min(cocobian.length,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cocobian.length,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cocobian.length,  factor);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
314	[BUG]  [BUGGY]  int  cols  =  Math.min(cocons.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(cocons.length,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(cocons.length,  factor.length);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
315	[BUG]  [BUGGY]  int  cols  =  Math.min(colons.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(colons.length,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(colons.length,  factor.length);	  int    cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
316	[BUG]  [BUGGY]  for(int  ji  =  0;  j  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  ji  =  0;  j  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  ji  =  0;  j  <  cols;  ++cols)  {  ji[cols]  *=  factor;  }	  for(int    ji    =    0;    cols    <    factor.length;    ++cols)    {    ji[cols]    *=    factor;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
317	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.convergenceChecker(factor);	  VectorialConvergenceChecker    convergenceChecker    =    jF.convergenceChecker(factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
318	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  factors.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int  j  =  0;  j  <  factors.length;  ++j)  {  (int  j  =  0;  j  <  ji.length;  ++j)  {	  for(int    j    =    0;    j    <    ji.length;    ++j)    {    (int    j    =    0;    j    <    ji.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
319	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  2);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  2);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights,  factor,  DEFAULT_MAX_ITERATIONS,  2);	  int    cols    =    Math.min(residualsWeights,    factor,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
320	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  2);  ++j)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  for(int  j  =  0;  j  <  ji.length  -  2;  ++j)  {  for(int  j  =  0;  j  <  ji.length  -  2);  ++j)  {  [BUGGY]      ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	for(int    j    =    0;    j    <    ji.length    -    2;    ++j)    {    for(int  j  =  0;  j  <  ji.length  -  2);  ++j)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
321	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  factor.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cols.length,  factor.length);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cols.length,  factor.length);	  cols    =    Math.min(colons.length,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
322	[BUG]  [BUGGY]  cols  =  Math.min(cos,  factor);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  cols  =  Math.min(cos,  factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	cols  =  Math.min(cos,  factor);	  cols    =    Math.min(colons,    factor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
323	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.computeConvergenceChecker(factor);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.computeConvergenceChecker(factor);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.computeConvergenceChecker(factor);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
324	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor,  3);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	193	193	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor,  3);	  int    cols    =    Math.min(residualsWeights[i],    factor,    cost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
