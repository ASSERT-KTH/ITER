bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  1].getValues();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  1].getValues();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  1].getValues();	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols].getValues();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
2	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols.length].getValues();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols.length].getValues();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols.length].getValues();	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols].getValues();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
3	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows].getValues();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows].getValues();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows].getValues();	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols].getValues();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
4	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  range);  [CE]  cannot  find  symbol  range  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  range);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  range);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    cost);    	non-compiled	[CE]  cannot  find  symbol  range	4	None	replace
5	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    cost);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	4	None	replace
6	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  0,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  0,  cost);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  0,  cost);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    cost);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	4	None	replace
7	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  jF);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  jF);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  jF);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    cost);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	4	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	add	jacobian  =  jF.value(residualsWeights);	  jacobian    =    jF.value(variateValues);    	compilable	  [FE]  AssertionFailedError  	17	3	replace
9	[BUG]  [BUGGY]  jacobian  =  jF.value(residualsWeights);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(residualsWeights);	  jacobian    =    jF.value(variateValues);    	compilable	  [FE]  AssertionFailedError  	17	3	replace
10	[BUG]  [BUGGY]  jacobian  =  jF.value(cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(cost);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(cost);	  jacobian    =    jF.value(variateValues);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
11	[BUG]  [BUGGY]  jacobian  =  jF.value(variables);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(variables);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(variables);	  jacobian    =    jF.value(variateValues);    	non-compiled	[CE]  cannot  find  symbol  	17	None	replace
12	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(true);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(true);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(true);	      VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
13	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variable);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variable);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variable);	      VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  	14	None	replace
14	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(false);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
15	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows  -  1];  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows  -  1];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows  -  1];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols    -    1];    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
16	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  *  1];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  *  1];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  *  1];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols    -    1];    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
17	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  2];  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  2];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  2];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols    -    1];    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
18	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  +  1];  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  +  1];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  +  1];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols];    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
19	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols.length];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols.length];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols.length];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols];    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
20	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(true);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(true);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(true);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
21	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variable);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variable);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variable);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
22	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cols);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cols);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	5	None	replace
23	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  false);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  false);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  false);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	5	None	replace
24	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(true);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(true);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(true);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	3	None	replace
25	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variables);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  	3	None	replace
26	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	3	None	replace
27	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  1);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  1);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
28	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  int  cols  =  Math.min(cols,  cols.length);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	int  cols  =  Math.min(cols,  cols.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
29	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  +  1);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	int  cols  =  Math.min(cols.length,  cols.length  +  1);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
30	[BUG]  [BUGGY]  jacobian  =  jF.value(rows,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(rows,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(rows,  cols);	  jacobian    =    jF.value(rows);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	replace
31	[BUG]  [BUGGY]  jacobian  =  jF.value(point,  rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(point,  rows);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(point,  rows);	  jacobian    =    jF.value(rows);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	replace
32	[BUG]  [BUGGY]  jacobian  =  jF.value(rows,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(rows,  cost);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(rows,  cost);	  jacobian    =    jF.value(rows);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	6	None	replace
33	[BUG]  [BUGGY]  jacobian  =  this.value.value(jF);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  this.value.value(jF);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  this.value.value(jF);	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
34	[BUG]  [BUGGY]  jacobian  =  new  MultivariateMatrixFunction(this.value,  jF);  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  new  MultivariateMatrixFunction(this.value,  jF);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  new  MultivariateMatrixFunction(this.value,  jF);	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
35	[BUG]  [BUGGY]  jacobian  =  jF.value(this.value,  cols);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.value,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(this.value,  cols);	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
36	[BUG]  [BUGGY]  jacobian  =  jF.value(totals);  [CE]  cannot  find  symbol  totals  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(totals);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(totals);	  jacobian    =    jF.value(totalValues);    	non-compiled	[CE]  cannot  find  symbol  totals	12	None	replace
37	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
38	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(true);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(true);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(true);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
39	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker().variables;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker().variables;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker().variables;	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jacobian  =  jF.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	add	jacobian    =    jF.value(this.residualsWeights);    jacobian  =  jF.value(this.residualsWeights);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
41	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jacobian  =  jF.value(this.residualsWeights);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jacobian  =  jF.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    jacobian  =  jF.value(this.residualsWeights);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
42	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jcobian  =  jF.value(this.residualsWeights);  [CE]  cannot  find  symbol  jcobian  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jcobian  =  jF.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    jcobian  =  jF.value(this.residualsWeights);	  	non-compiled	[CE]  cannot  find  symbol  jcobian	8	None	add
43	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  cols  =  jF.value(this.residualsWeights);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  cols  =  jF.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    cols  =  jF.value(this.residualsWeights);	  	non-compiled	[CE]  incompatible  types	8	None	add
44	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  Jacobian  =  jF.value(this.residualsWeights);  [CE]  cannot  find  symbol  Jacobian  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  Jacobian  =  jF.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    Jacobian  =  jF.value(this.residualsWeights);	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	8	None	add
45	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  if(jF.value(this.residualsWeights)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	add	jacobian    =    jF.value(this.residualsWeights);    if(jF.value(this.residualsWeights)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	8	16	add
46	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  if(jF.value(this.residualsWeights)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [FE]  FunctionEvaluationException  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  if(jF.value(this.residualsWeights)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    if(jF.value(this.residualsWeights)!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  }	  	compilable	  [FE]  FunctionEvaluationException  	8	16	add
47	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[jF.length];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[jF.length];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[jF.length];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[rows];    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
48	[BUG]  [BUGGY]  jacobian  =  jF.value(cols,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(cols,  cost);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(cols,  cost);	  jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	7	None	replace
49	[BUG]  [BUGGY]  jacobian  =  jF.value(point,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(point,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(point,  cols);	  jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	7	None	replace
50	[BUG]  [BUGGY]  jacobian  =  jF.value(field,  cols);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(field,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(field,  cols);	  jacobian    =    jF.value(cols);    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
51	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(this.residualsWeights,  cols);	  jacobian    =    jF.value(this.residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	9	None	replace
52	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights  +  1);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(this.residualsWeights  +  1);	  jacobian    =    jF.value(this.residualsWeights);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
53	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights  *  2);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights  *  2);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(this.residualsWeights  *  2);	  jacobian    =    jF.value(this.residualsWeights);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
54	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getValue();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getValue();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
55	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getVector();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getVector();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getVector();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
56	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[1];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[1];  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[1];	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[rows];    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
57	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getObject().clone();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getObject().clone();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getObject().clone();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
58	[BUG]  [BUGGY]  jacobian  =  this.residualsWeights.value(jF);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  this.residualsWeights.value(jF);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  this.residualsWeights.value(jF);	  jacobian    =    jF.value(this.residualsWeights);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
59	[BUG]  [BUGGY]  jacobian  =  this.residualsWeights.value();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  this.residualsWeights.value();  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  this.residualsWeights.value();	  jacobian    =    jF.value(this.residualsWeights);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
60	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(function);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
61	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);  [CE]  cannot  find  symbol  variance  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variance);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  variance	13	None	replace
62	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols].length;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols].length;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols].length;	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols];    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
63	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(function);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(function);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(function);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
64	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance);  [CE]  cannot  find  symbol  variance  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variance);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  cannot  find  symbol  variance	2	None	replace
65	[BUG]  [BUGGY]  jacobian  =  new  MultivariateMatrixFunction(this.value);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  new  MultivariateMatrixFunction(this.value);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  new  MultivariateMatrixFunction(this.value);	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
66	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance);  [CE]  cannot  find  symbol  variance  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(variance);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  variance	3	None	replace
67	[BUG]  [BUGGY]  jacobian  =  jF.value(colons,  cols);  [CE]  cannot  find  symbol  colons  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(colons,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(colons,  cols);	  jacobian    =    jF.value(rows);    	non-compiled	[CE]  cannot  find  symbol  colons	6	None	replace
68	[BUG]  [BUGGY]  jacobian  =  jF.value(value);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(value);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(value);	  jacobian    =    jF.value(period);    	non-compiled	[CE]  cannot  find  symbol  value	11	None	replace
69	[BUG]  [BUGGY]  jacobian  =  jF.value(cols,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(cols,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(cols,  cols);	  jacobian    =    jF.value(cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	7	None	replace
70	[BUG]  [BUGGY]  jacobian  =  jF.value(cols,  row);  [CE]  cannot  find  symbol  row  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(cols,  row);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(cols,  row);	  jacobian    =    jF.value(cols);    	non-compiled	[CE]  cannot  find  symbol  row	7	None	replace
71	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jf  =  jF.value(this.residualsWeights);  [CE]  cannot  find  symbol  jf  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jf  =  jF.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    jf  =  jF.value(this.residualsWeights);	  	non-compiled	[CE]  cannot  find  symbol  jf	8	None	add
72	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  null);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  null);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  null);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    cost);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	4	None	replace
73	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows],  cost);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows],  cost);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows],  cost);	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[rows];    	non-compiled	[CE]  ';'  expected	19	None	replace
74	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost,  null);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost,  null);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost,  null);	      VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    cost);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	4	None	replace
75	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	int  cols  =  Math.min(cols.length,  jF.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
76	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  column.length);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  int  cols  =  Math.min(cols.length,  column.length);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	int  cols  =  Math.min(cols.length,  column.length);	      int    cols    =    Math.min(cols.length,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
77	[BUG]  [BUGGY]  jacobian  =  jF.value(last,  cols);  [CE]  cannot  find  symbol  last  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(last,  cols);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(last,  cols);	  jacobian    =    jF.value(cols);    	non-compiled	[CE]  cannot  find  symbol  last	7	None	replace
78	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jf.value(this.residualsWeights);  [CE]  cannot  find  symbol  jf  [FE]    AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  jf.value(this.residualsWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian    =    jF.value(this.residualsWeights);    jf.value(this.residualsWeights);	  	non-compiled	[CE]  cannot  find  symbol  jf	8	None	add
79	[BUG]  [BUGGY]  jacobian  =  jF.value(remainings);  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(remainings);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(remainings);	  jacobian    =    jF.value(totalValues);    	non-compiled	[CE]  cannot  find  symbol  remainings	12	None	replace
80	[BUG]  [BUGGY]  jacobian  =  this.value.value();  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  this.value.value();  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  this.value.value();	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
81	[BUG]  [BUGGY]  jacobian  =  this.value.value;  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  this.value.value;  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  this.value.value;	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
82	[BUG]  [BUGGY]  jacobian  =  this.value.valueToJava2D(jF);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  this.value.valueToJava2D(jF);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  this.value.valueToJava2D(jF);	  jacobian    =    jF.value(this.value);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
83	[BUG]  [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols],  jF.getValues();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols],  jF.getValues();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols],  jF.getValues();	      MultivariateVectorialFunction[][]    jacobian    =    new    MultivariateVectorialFunction[cols].getValues();    	non-compiled	[CE]  ';'  expected	21	None	replace
84	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.object();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.object();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.object();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
85	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.object;  [CE]  cannot  find  symbol  object  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.object;  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.object;	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol  object	15	None	replace
86	[BUG]  [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.getObject();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.getObject();  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)this.getObject();	      MultivariateMatrixFunction    jf    =(MultivariateMatrixFunction)getObject();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
87	[BUG]  [BUGGY]  jacobian  =  jF.value(variatesWeights);  [CE]  cannot  find  symbol  variatesWeights  [FE]              AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(variatesWeights);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(variatesWeights);	  jacobian    =    jF.value(resultsWeights);    	non-compiled	[CE]  cannot  find  symbol  variatesWeights	10	None	replace
88	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variables);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variables);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variables);	      VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  	14	None	replace
89	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variableFunction);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variableFunction);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(variableFunction);	      VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  	14	None	replace
90	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate);  [CE]  cannot  find  symbol  variate  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker(variate);	      VectorialConvergenceChecker    convergenceChecker    =    getVisibilityChecker();    	non-compiled	[CE]  cannot  find  symbol  variate	2	None	replace
91	[BUG]  [BUGGY]  jacobian  =  jF.value(last);  [CE]  cannot  find  symbol  last  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  jacobian  =  jF.value(last);  [BUGGY]    if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(last);	  jacobian    =    jF.value(period);    	non-compiled	[CE]  cannot  find  symbol  last	11	None	replace
92	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(false);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
93	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);  [CE]  cannot  find  symbol  variate  [FE]          AssertionFailedError    [CONTEXT]    protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);  [BUGGY]    jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(variate);	      VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol  variate	13	None	replace
