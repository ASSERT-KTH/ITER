bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    int  cols  =  Math.min(cols.length,  cols.length);		non-compiled	[CE]  int  cannot  be  dereferenced	90	None	add
2	[BUG]  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker();  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    VectorialConvergenceChecker  convergenceChecker  =  getVisibilityChecker();		non-compiled	[CE]  cannot  find  symbol	90	None	add
3	[BUG]  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker();  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker();  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker();		non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	90	None	add
4	[BUG]  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost);  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  cost);		non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	90	None	add
5	[BUG]  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this);  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this);		non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	90	None	add
6	[BUG]  [BUGGY]  jacobian  =  jF.value(rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(rows);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(rows);	jacobian  =  jF.value(point);  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	89	None	replace
7	[BUG]  [BUGGY]  jacobian  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(cols);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(cols);	jacobian  =  jF.value(point);  	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	89	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	add	jacobian  =  jF.value(this.residualsWeights);	jacobian  =  jF.value(point);  	compilable	  [FE]  AssertionFailedError  	89	3	replace
9	[BUG]  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(this.residualsWeights);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(this.residualsWeights);	jacobian  =  jF.value(point);  	compilable	  [FE]  AssertionFailedError  	89	3	replace
10	[BUG]  [BUGGY]  jacobian  =  jF.value(resultsWeights);  [CE]  cannot  find  symbol  resultsWeights  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(resultsWeights);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(resultsWeights);	jacobian  =  jF.value(point);  	non-compiled	[CE]  cannot  find  symbol  resultsWeights	89	None	replace
11	[BUG]  [BUGGY]  jacobian  =  jF.value(period);  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(period);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(period);	jacobian  =  jF.value(point);  	non-compiled	[CE]  cannot  find  symbol  period	89	None	replace
12	[BUG]  [BUGGY]  jacobian  =  jF.value(totalValues);  [CE]  cannot  find  symbol  totalValues  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(totalValues);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(totalValues);	jacobian  =  jF.value(point);  	non-compiled	[CE]  cannot  find  symbol  totalValues	89	None	replace
13	[BUG]  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker();  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker();		non-compiled	[CE]  cannot  find  symbol	90	None	add
14	[BUG]  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker();  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker();		non-compiled	[CE]  cannot  find  symbol	90	None	add
15	[BUG]  [BUGGY]    MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getObject();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getObject();  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    MultivariateMatrixFunction  jf  =(MultivariateMatrixFunction)getObject();		non-compiled	[CE]  cannot  find  symbol	90	None	add
16	[BUG]  [BUGGY]  jacobian  =  jF.value(this.value);  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(this.value);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(this.value);	jacobian  =  jF.value(point);  	non-compiled	[CE]  cannot  find  symbol  value	89	None	replace
17	[BUG]  [BUGGY]  jacobian  =  jF.value(variateValues);  [CE]  cannot  find  symbol  variateValues  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]  jacobian  =  jF.value(variateValues);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	jacobian  =  jF.value(variateValues);	jacobian  =  jF.value(point);  	non-compiled	[CE]  cannot  find  symbol  variateValues	89	None	replace
18	[BUG]  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  1];  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  1];  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols  -  1];		non-compiled	[CE]  cannot  find  symbol	90	None	add
19	[BUG]  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows];  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows];  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[rows];		non-compiled	[CE]  cannot  find  symbol	90	None	add
20	[BUG]  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols];  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols];  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols];		non-compiled	[CE]  cannot  find  symbol	90	None	add
21	[BUG]  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols].getValues();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  [BUGGY]    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols].getValues();  [BUGGY]  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	185	185	1	replace	    MultivariateVectorialFunction[][]  jacobian  =  new  MultivariateVectorialFunction[cols].getValues();		non-compiled	[CE]  cannot  find  symbol	90	None	add
