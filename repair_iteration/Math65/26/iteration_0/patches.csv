bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  1;  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  1;	double  criterion  =  0;  	compilable	  [FE]  AssertionFailedError  	51	12	replace
2	[BUG]  [BUGGY]  double  criterion  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  1;  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  1;	double  criterion  =  0;  	compilable	  [FE]  AssertionFailedError  	51	12	replace
3	[BUG]  [BUGGY]  double  criterion  =  Math.rint(results.length);  [CE]  cannot  find  symbol  results  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  Math.rint(results.length);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(results.length);	double  criterion  =  0;  	non-compiled	[CE]  cannot  find  symbol  results	51	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  0L;  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  0L;	double  criterion  =  0;  	compilable	  [FE]  AssertionFailedError  	51	1	replace
5	[BUG]  [BUGGY]  double  criterion  =  0L;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  0L;  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0L;	double  criterion  =  0;  	compilable	  [FE]  AssertionFailedError  	51	1	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  criterion  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	  	double  criterion  =  0;  	non-compiled	[CE]  cannot  find  symbol  criterion	51	None	replace
7	[BUG]  [BUGGY]    double[][]  rows  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    double[][]  rows  =  jF.getRows();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    double[][]  rows  =  jF.getRows();		non-compiled	[CE]  cannot  find  symbol	52	None	add
8	[BUG]  [BUGGY]    double[][]  residuals  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    double[][]  residuals  =  jF.getRows();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    double[][]  residuals  =  jF.getRows();		non-compiled	[CE]  cannot  find  symbol	52	None	add
9	[BUG]  [BUGGY]    int  cols  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  cols  =  getColumnCount();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  cols  =  getColumnCount();		non-compiled	[CE]  cannot  find  symbol	52	None	add
10	[BUG]  [BUGGY]    double[][]  rows  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    double[][]  rows  =  jF.getColumns();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    double[][]  rows  =  jF.getColumns();		non-compiled	[CE]  cannot  find  symbol	52	None	add
11	[BUG]  [BUGGY]    int  rows  =  getRowCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  getRowCount();  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	52	None	add
12	[BUG]  [BUGGY]    int  rows  =  Math.min(remainings.length,  jF.length);  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(remainings.length,  jF.length);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(remainings.length,  jF.length);		non-compiled	[CE]  cannot  find  symbol  remainings	52	None	add
13	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  jF.length);  [CE]  cannot  find  symbol  remainders  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(remainders.length,  jF.length);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(remainders.length,  jF.length);		non-compiled	[CE]  cannot  find  symbol  remainders	52	None	add
14	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  0);  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(remainders.length,  0);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(remainders.length,  0);		non-compiled	[CE]  cannot  find  symbol  remainders	52	None	add
15	[BUG]  [BUGGY]    int  rows  =  Math.min(remainings.length,  0);  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(remainings.length,  0);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(remainings.length,  0);		non-compiled	[CE]  cannot  find  symbol  remainings	52	None	add
16	[BUG]  [BUGGY]  double  criterion  =  Math.min(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  Math.min(results.length,  2);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(results.length,  2);	double  criterion  =  0;  	non-compiled	[CE]  cannot  find  symbol  results	51	None	replace
17	[BUG]  [BUGGY]  double  criterion  =  Math.min(results.length,  0);  [CE]  cannot  find  symbol  results  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  Math.min(results.length,  0);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(results.length,  0);	double  criterion  =  0;  	non-compiled	[CE]  cannot  find  symbol  results	51	None	replace
18	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix());  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix());	double  criterion  =  0;  	non-compiled	[CE]  cannot  find  symbol	51	None	replace
19	[BUG]  [BUGGY]  double  criterion  =  Math.min(remainders.length,  2);  [CE]  cannot  find  symbol  remainders  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]  double  criterion  =  Math.min(remainders.length,  2);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(remainders.length,  2);	double  criterion  =  0;  	non-compiled	[CE]  cannot  find  symbol  remainders	51	None	replace
20	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  2);  [CE]  cannot  find  symbol  remainders  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(remainders.length,  2);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(remainders.length,  2);		non-compiled	[CE]  cannot  find  symbol  remainders	52	None	add
21	[BUG]  [BUGGY]    int  rows  =  Math.min(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(results.length,  2);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(results.length,  2);		non-compiled	[CE]  cannot  find  symbol  results	52	None	add
22	[BUG]  [BUGGY]    int  rows  =  Math.min(results.length,  0);  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  [BUGGY]    int  rows  =  Math.min(results.length,  0);  [BUGGY]  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	    int  rows  =  Math.min(results.length,  0);		non-compiled	[CE]  cannot  find  symbol  results	52	None	add
