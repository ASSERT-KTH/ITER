bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  1);	      int    rows    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	14	None	replace
2	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  1);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(results.length,  1);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  1);	      int    rows    =    Math.min(remainders.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	14	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint(cols[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint(cols[i]);  }  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint(cols[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  double  criterion  =  Math.min(results.length,  1);  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.min(results.length,  1);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(results.length,  1);	  double    criterion    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
8	[BUG]  [BUGGY]  double  criterion  =  Math.min(results.length,  3);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.min(results.length,  3);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(results.length,  3);	  double    criterion    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
9	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  jF.length);  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(results.length,  jF.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  jF.length);	      int    rows    =    Math.min(remainings.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  results	12	None	replace
10	[BUG]  [BUGGY]  int  rows  =  Math.min(resistances.length,  jF.length);  [CE]  cannot  find  symbol  resistances  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(resistances.length,  jF.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resistances.length,  jF.length);	      int    rows    =    Math.min(remainings.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  resistances	12	None	replace
11	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  jF.length  +  1);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainings.length,  jF.length  +  1);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  jF.length  +  1);	      int    rows    =    Math.min(remainings.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	12	None	replace
12	[BUG]  [BUGGY]  double[][]  rows  =  jf.getRows();  [CE]  cannot  find  symbol  jf  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  rows  =  jf.getRows();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jf.getRows();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	7	None	replace
13	[BUG]  [BUGGY]  double[][]  rows  =  jF.getCols();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  rows  =  jF.getCols();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jF.getCols();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
14	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  getRowCount()  -  1;  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getRowCount()  -  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
15	[BUG]  [BUGGY]  int  rows  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  getRowCount()  +  1;  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getRowCount()  +  1;	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
16	[BUG]  [BUGGY]  int  rows  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  getColumnCount();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getColumnCount();	      int    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
17	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  0);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(results.length,  0,  0);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  0,  0);	      int    rows    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  results	22	None	replace
18	[BUG]  [BUGGY]  double  criterion  =  0L;  double  criterion  =  0L;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  0L;  double  criterion  =  0L;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0L;    double  criterion  =  0L;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	4	None	add
19	[BUG]  [BUGGY]  double  criterion  =  0L;  Double  criterion  =  0L;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  0L;  Double  criterion  =  0L;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0L;    Double  criterion  =  0L;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	4	None	add
20	[BUG]  [BUGGY]  double  criterion  =  0L;  int  criterion  =  0L;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  0L;  int  criterion  =  0L;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0L;    int  criterion  =  0L;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	4	None	add
21	[BUG]  [BUGGY]  double  criterion  =  0L;  long  criterion  =  0L;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  0L;  long  criterion  =  0L;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0L;    long  criterion  =  0L;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	4	None	add
22	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  3);  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(results.length,  3);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  3);	      int    rows    =    Math.min(results.length,    2);    	non-compiled	[CE]  cannot  find  symbol  results	21	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  0.0;	  double    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
24	[BUG]  [BUGGY]  double  criterion  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0.0;	  double    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
25	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  cols  =  getColumnCount()  -  1;  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  getColumnCount()  -  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
26	[BUG]  [BUGGY]  int  cols  =  getRowCount();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  cols  =  getRowCount();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  getRowCount();	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
27	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  cols  =  getColumnCount()  +  1;  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  getColumnCount()  +  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
28	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length);  [CE]  cannot  find  symbol  remainders  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residuals.length);	      int    rows    =    Math.min(remainders.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	13	None	replace
29	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  -  1);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  -  1);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  jF.length  -  1);	      int    rows    =    Math.min(remainders.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	13	None	replace
30	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows.length);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.rint(rows.length);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows.length);	  double    criterion    =    Math.rint(results.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
31	[BUG]  [BUGGY]  double  criterion  =  Math.rint(resultsWeights.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.rint(resultsWeights.length);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(resultsWeights.length);	  double    criterion    =    Math.rint(results.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	3	None	replace
32	[BUG]  [BUGGY]  double  criterion  =  Math.rint(remainings.length);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.rint(remainings.length);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(remainings.length);	  double    criterion    =    Math.rint(results.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	3	None	replace
33	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  cost);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  cost);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  cost);	  double    criterion    =    Math.sqrt(getMatrix());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
34	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  jF);	  double    criterion    =    Math.sqrt(getMatrix());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
35	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  residuals);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  residuals);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  residuals);	  double    criterion    =    Math.sqrt(getMatrix());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
36	[BUG]  [BUGGY]  double[][]  rows  =  jF,  cols.getColumns();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  rows  =  jF,  cols.getColumns();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jF,  cols.getColumns();	      double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  ';'  expected	10	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  2;	  double    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	2	12	replace
38	[BUG]  [BUGGY]  double  criterion  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  2;	  double    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	2	12	replace
39	[BUG]  [BUGGY]  double  criterion  =  Math.min(results.length,  4);  [CE]  cannot  find  symbol  results  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.min(results.length,  4);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(results.length,  4);	  double    criterion    =    Math.min(results.length,    2);    	non-compiled	[CE]  cannot  find  symbol  results	16	None	replace
40	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  residuals  =  jF.getColumns();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.getColumns();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
41	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getRows();  [CE]  cannot  find  symbol  jf  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  residuals  =  jf.getRows();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jf.getRows();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	8	None	replace
42	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRemainings();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  residuals  =  jF.getRemainings();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.getRemainings();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
43	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  1);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainings.length,  1);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  1);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	15	None	replace
44	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  2);  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainings.length,  2);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  2);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	15	None	replace
45	[BUG]  [BUGGY]  double  remainders  =  Math.min(remainders.length,  2);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  remainders  =  Math.min(remainders.length,  2);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remainders.length,  2);	  double    criterion    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
46	[BUG]  [BUGGY]  double  criterion  =  Math.min(remainders.length,  1);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.min(remainders.length,  1);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(remainders.length,  1);	  double    criterion    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	19	None	replace
47	[BUG]  [BUGGY]  double  criterion  =  1;  double  criterion  =  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  1;  double  criterion  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    1;    double  criterion  =  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	1	None	add
48	[BUG]  [BUGGY]  double  criterion  =  1;  Double  criterion  =  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  1;  Double  criterion  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    1;    Double  criterion  =  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	1	None	add
49	[BUG]  [BUGGY]  double  criterion  =  1;  int  criterion  =  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  1;  int  criterion  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    1;    int  criterion  =  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	1	None	add
50	[BUG]  [BUGGY]  double  criterion  =  1;  long  criterion  =  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  1;  long  criterion  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    1;    long  criterion  =  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	1	None	add
51	[BUG]  [BUGGY]  double  criterion  =  1;  criterion  =  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  1;  criterion  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    1;    criterion  =  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	1	None	add
52	[BUG]  [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  0);  [CE]  cannot  find  symbol  resultsWeights  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  0);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(resultsWeights.length,  0);	  double    criterion    =    Math.min(results.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	17	None	replace
53	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRemainders();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  residuals  =  jF.getRemainders();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.getRemainders();	      double[][]    residuals    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  3;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  3;	  double    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	2	12	replace
55	[BUG]  [BUGGY]  double  criterion  =  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  3;  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  3;	  double    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	2	12	replace
56	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.rint(variables.length);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length);	  double    criterion    =    Math.rint(results.length);    	non-compiled	[CE]  cannot  find  symbol  	3	None	replace
57	[BUG]  [BUGGY]  double  criterion  =  Math.rint(resultsWidth);  [CE]  cannot  find  symbol  resultsWidth  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.rint(resultsWidth);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(resultsWidth);	  double    criterion    =    Math.rint(results.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWidth	3	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(result  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(result  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(result  >  0)  {	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(recipes  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(recipes  >  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(recipes  >  0)  {	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  3);  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  3);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  3);	      int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	20	None	replace
63	[BUG]  [BUGGY]  double[][]  rows  =  this.jF.getRows();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  rows  =  this.jF.getRows();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  this.jF.getRows();	      double[][]    rows    =    jF.getRows();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
64	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  jF.length);  [CE]  cannot  find  symbol  remainingsWeights  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  jF.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainingsWeights.length,  jF.length);	      int    rows    =    Math.min(remainings.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	12	None	replace
65	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  jF.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  jF.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  jF.length);	      int    rows    =    Math.min(remainings.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	12	None	replace
66	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  /  getRowCount());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  /  getRowCount());  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix()  /  getRowCount());	  double    criterion    =    Math.sqrt(getMatrix());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
67	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  0);  [CE]  cannot  find  symbol  remainingsWeights  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  0);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainingsWeights.length,  0);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	15	None	replace
68	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  0);  [CE]  cannot  find  symbol  resultsWeights  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  0);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  0);	      int    rows    =    Math.min(remainings.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	15	None	replace
69	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  +  1);  [CE]  cannot  find  symbol  remainders  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  +  1);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  jF.length  +  1);	      int    rows    =    Math.min(remainders.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	13	None	replace
70	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWeights.length);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWeights.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residualsWeights.length);	      int    rows    =    Math.min(remainders.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	13	None	replace
71	[BUG]  [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  2);  [CE]  cannot  find  symbol  resultsWeights  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  2);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(resultsWeights.length,  2);	  double    criterion    =    Math.min(results.length,    2);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	16	None	replace
72	[BUG]  [BUGGY]  double[][]  rows  =  this.jF.getColumns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  rows  =  this.jF.getColumns();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  this.jF.getColumns();	      double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
73	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  factor);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  factor);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  factor);	  double    criterion    =    Math.sqrt(getMatrix());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	      	non-compiled	[CE]  ']'  expected	6	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	      	non-compiled	[CE]  ']'  expected	6	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	      	non-compiled	[CE]  ']'  expected	6	None	replace
78	[BUG]  [BUGGY]  double[][]  rows  =  jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double[][]  rows  =  jf.getColumns();  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jf.getColumns();	      double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	10	None	replace
79	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  Math.sqrt(getRMS());	  double    criterion    =    0L;    	compilable	  [FE]  StackOverflowError  	5	14	replace
80	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRMS());	  double    criterion    =    0L;    	compilable	  [FE]  StackOverflowError  	5	14	replace
81	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  residuals.length);  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  int  rows  =  Math.min(remainings.length,  residuals.length);  [BUGGY]    double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  residuals.length);	      int    rows    =    Math.min(remainings.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	12	None	replace
82	[BUG]  [BUGGY]  double  criterion  =  Math.rint(remainders.length);  [CE]  cannot  find  symbol  remainders  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {    [BUGGY]  double  criterion  =  Math.rint(remainders.length);  [BUGGY]    for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(remainders.length);	  double    criterion    =    Math.rint(results.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	3	None	replace
