bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
2	[BUG]  [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getColumnsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
3	[BUG]  [BUGGY]  double  criterion  =  getRowWidth();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  getRowWidth();  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  getRowWidth();	  double    criterion    =    3;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
7	[BUG]  [BUGGY]  Double  criterion  =  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  Double  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	Double  criterion  =  1;	  double    criterion    =    1;    Double    criterion    =    1;    	non-compiled	[CE]  incompatible  types	48	None	replace
8	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  double  criterion  =  Math.sqrt(getRMS());  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  double  criterion  =  Math.sqrt(getRMS());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    Math.sqrt(getRMS());    double  criterion  =  Math.sqrt(getRMS());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	79	None	add
9	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  Double  criterion  =  Math.sqrt(getRMS());  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]      StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  Double  criterion  =  Math.sqrt(getRMS());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    Math.sqrt(getRMS());    Double  criterion  =  Math.sqrt(getRMS());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	79	None	add
10	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  int  criterion  =  Math.sqrt(getRMS());  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  int  criterion  =  Math.sqrt(getRMS());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    Math.sqrt(getRMS());    int  criterion  =  Math.sqrt(getRMS());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	79	None	add
11	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  criterion  =  Math.sqrt(getRMS());  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  criterion  =  Math.sqrt(getRMS());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    Math.sqrt(getRMS());    criterion  =  Math.sqrt(getRMS());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	79	None	add
12	[BUG]  [BUGGY]  Double  criterion  =  0L;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  Double  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	Double  criterion  =  0L;	  double    criterion    =    0L;    Double    criterion    =    0L;    	non-compiled	[CE]  incompatible  types	19	None	replace
13	[BUG]  [BUGGY]  Double  criterion  =  0;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  Double  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	Double  criterion  =  0;	  double    criterion    =    0L;    Double    criterion    =    0L;    	non-compiled	[CE]  incompatible  types	19	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  1.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	24	12	replace
15	[BUG]  [BUGGY]  double  criterion  =  1.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  1.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	24	12	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  10.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  10.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	24	12	replace
17	[BUG]  [BUGGY]  double  criterion  =  10.0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  10.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  10.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	24	12	replace
18	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jacobian);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jacobian);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  jacobian);	  double    criterion    =    Math.sqrt(getMatrix(),    cost);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
23	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows,  cols.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows,  cols.length);	  double    criterion    =    Math.rint(rows.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
24	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows,  rows.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows,  rows.length);	  double    criterion    =    Math.rint(rows.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
25	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows,  rowCount);  [CE]  cannot  find  symbol  rowCount  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows,  rowCount);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows,  rowCount);	  double    criterion    =    Math.rint(rows.length);    	non-compiled	[CE]  cannot  find  symbol  rowCount	30	None	replace
26	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows,  cost);  [CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows,  cost);	  double    criterion    =    Math.rint(rows.length);    	non-compiled	[CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;	30	None	replace
27	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  residualsWeights.length);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  residualsWeights.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  residualsWeights.length);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  results	70	None	replace
28	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWeights.length  -  1);  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWeights.length  -  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residualsWeights.length  -  1);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	70	None	replace
29	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWeights.length  +  1);  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWeights.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residualsWeights.length  +  1);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	70	None	replace
30	[BUG]  [BUGGY]  double  remainders  =  Math.min(remainders.length,  1);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.min(remainders.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remainders.length,  1);	  double    criterion    =    Math.min(remainders.length,    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
31	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  2);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  0,  2);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  0,  2);	  int    rows    =    Math.min(results.length,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
32	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  1);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  0,  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  0,  1);	  int    rows    =    Math.min(results.length,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
33	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  results.length);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  0,  results.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  0,  results.length);	  int    rows    =    Math.min(results.length,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
34	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  jF.length  +  1);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  jF.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  jF.length  +  1);	  int    rows    =    Math.min(remainings.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  results	11	None	replace
35	[BUG]  [BUGGY]  int  rows  =  Math.min(resistances.length,  jF.length  +  1);  [CE]  cannot  find  symbol  resistances  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resistances.length,  jF.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resistances.length,  jF.length  +  1);	  int    rows    =    Math.min(remainings.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  resistances	11	None	replace
36	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  jF.length  +  1);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  jF.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainingsWeights.length,  jF.length  +  1);	  int    rows    =    Math.min(remainings.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	11	None	replace
37	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  4);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  4);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  4);	  int    rows    =    Math.min(results.length,    3);    	non-compiled	[CE]  cannot  find  symbol  results	22	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	76	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	76	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	76	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [CE]  ']'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	76	None	replace
42	[BUG]  [BUGGY]  double  criterion  =  2;  double  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  double  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    2;    double  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	37	None	add
43	[BUG]  [BUGGY]  double  criterion  =  2;  Double  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  Double  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    2;    Double  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	37	None	add
44	[BUG]  [BUGGY]  double  criterion  =  2;  int  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  int  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    2;    int  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	37	None	add
45	[BUG]  [BUGGY]  double  criterion  =  2;  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    2;    criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	37	None	add
46	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRowSize());  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRowSize());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRowSize());	  double    criterion    =    Math.sqrt(getRMS());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
47	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  Math.sqrt(getRMS()  +  1);	  double    criterion    =    Math.sqrt(getRMS());    	compilable	  [FE]  StackOverflowError  	80	14	replace
48	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  +  1);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRMS()  +  1);	  double    criterion    =    Math.sqrt(getRMS());    	compilable	  [FE]  StackOverflowError  	80	14	replace
49	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRow());  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRow());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRow());	  double    criterion    =    Math.sqrt(getRMS());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
50	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  /  getRowCount());  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  /  getRowCount());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRMS()  /  getRowCount());	  double    criterion    =    Math.sqrt(getRMS());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
51	[BUG]  [BUGGY]  double[][]  rows  =  mf.getColumns();  [CE]  cannot  find  symbol  mf  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  mf.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  mf.getColumns();	  double[][]    rows    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol  mf	78	None	replace
52	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  jF.length  +  1);  [CE]  cannot  find  symbol  resultsWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  jF.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  jF.length  +  1);	  int    rows    =    Math.min(resultsWeights.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	65	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint(cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
57	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  *  getRowCount());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  *  getRowCount());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix()  *  getRowCount());	  double    criterion    =    Math.sqrt(getMatrix()    /    getRowCount());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
58	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  /  getColumnCount());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  /  getColumnCount());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix()  /  getColumnCount());	  double    criterion    =    Math.sqrt(getMatrix()    /    getRowCount());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
59	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  /  getRowCount()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix()  /  getRowCount()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix()  /  getRowCount()  +  1);	  double    criterion    =    Math.sqrt(getMatrix()    /    getRowCount());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	77	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	77	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	77	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	77	None	replace
64	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  residualsWeights.length);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  residualsWeights.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  residualsWeights.length);	  int    rows    =    Math.min(remainings.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	81	None	replace
65	[BUG]  [BUGGY]  int  rows  =  Math.min(resistances.length,  residuals.length);  [CE]  cannot  find  symbol  resistances  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resistances.length,  residuals.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resistances.length,  residuals.length);	  int    rows    =    Math.min(remainings.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  resistances	81	None	replace
66	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  residualsWidths);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  residualsWidths);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  residualsWidths);	  int    rows    =    Math.min(remainings.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	81	None	replace
67	[BUG]  [BUGGY]  double[][]  residuals  =  jF.remainings();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jF.remainings();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.remainings();	  double[][]    residuals    =    jF.getRemainings();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
68	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getRemainings();  [CE]  cannot  find  symbol  jf  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jf.getRemainings();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jf.getRemainings();	  double[][]    residuals    =    jF.getRemainings();    	non-compiled	[CE]  cannot  find  symbol  jf	42	None	replace
69	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRawRemainings();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jF.getRawRemainings();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.getRawRemainings();	  double[][]    residuals    =    jF.getRemainings();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    	non-compiled	[CE]  ';'  expected	3	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    	non-compiled	[CE]  ';'  expected	3	None	replace
72	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length  +  1);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residuals.length  +  1);	  int    rows    =    Math.min(remainders.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	69	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
77	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  parameters);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  parameters);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  parameters);	  double    criterion    =    Math.sqrt(getMatrix(),    residuals);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
78	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
79	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  getColumnCount()  -  2;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getColumnCount()  -  2;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  long  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	long  criterion  =  0L;	  double    criterion    =    0L;    long    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	21	4	replace
81	[BUG]  [BUGGY]  long  criterion  =  0L;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  long  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	long  criterion  =  0L;	  double    criterion    =    0L;    long    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	21	4	replace
82	[BUG]  [BUGGY]  int  criterion  =  0L;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  criterion  =  0L;	  double    criterion    =    0L;    long    criterion    =    0L;    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
83	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  cols  =  getRowCount()  -  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  getRowCount()  -  1;	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
84	[BUG]  [BUGGY]  int  cols  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  cols  =  getRowCount()  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  getRowCount()  +  1;	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
85	[BUG]  [BUGGY]  double  criterion  =  0;  int  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0;  int  criterion  =  0;	  double    criterion    =    0L;    int    criterion    =    0L;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	20	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	int  criterion  =  0;	  double    criterion    =    0L;    int    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	20	4	replace
87	[BUG]  [BUGGY]  int  criterion  =  0;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  criterion  =  0;	  double    criterion    =    0L;    int    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	20	4	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(result    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(result  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(result  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(result  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(result    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(result    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(result    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
92	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  cols  =  getColumnCount()  /  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  getColumnCount()  /  1;	  int    cols    =    getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
93	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  factor,  cost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  factor,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  factor,  cost);	  double    criterion    =    Math.sqrt(getMatrix(),    factor);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
94	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  coefficient);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  coefficient);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  coefficient);	  double    criterion    =    Math.sqrt(getMatrix(),    factor);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
95	[BUG]  [BUGGY]  double  criterion  =  0.0;  double  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0.0;  double  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0.0;    double  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	23	None	add
96	[BUG]  [BUGGY]  double  criterion  =  0.0;  Double  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0.0;  Double  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0.0;    Double  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	23	None	add
97	[BUG]  [BUGGY]  double  criterion  =  0.0;  int  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0.0;  int  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0.0;    int  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	23	None	add
98	[BUG]  [BUGGY]  double  criterion  =  0.0;  long  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0.0;  long  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0.0;    long  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	23	None	add
99	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF,  cost);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  jF,  cost);	  double    criterion    =    Math.sqrt(getMatrix(),    jF);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
100	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  maxIterations);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  maxIterations);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  maxIterations);	  double    criterion    =    Math.sqrt(getMatrix(),    jF);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
101	[BUG]  [BUGGY]  double[][]  rows  =  mf.getRows();  [CE]  cannot  find  symbol  mf  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  mf.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  mf.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  mf	12	None	replace
102	[BUG]  [BUGGY]  double[][]  rows  =  m.getRows();  [CE]  cannot  find  symbol  m  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  m.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  m.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  m	12	None	replace
103	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length  -  1);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
104	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length  -  2);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length  -  2);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
105	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length  +  1);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
106	[BUG]  [BUGGY]  double[][]  residuals  =  jf.getRemainders();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jf.getRemainders();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jf.getRemainders();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol  jf	53	None	replace
107	[BUG]  [BUGGY]  double[][]  residuals  =  jF.remainders();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jF.remainders();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.remainders();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
108	[BUG]  [BUGGY]  double[][]  residuals  =  jF.getRawRemainders();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jF.getRawRemainders();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF.getRawRemainders();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
109	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  1);  [CE]  cannot  find  symbol  resultsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  1);	  int    rows    =    Math.min(resultsWeights.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	68	None	replace
110	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  2);  [CE]  cannot  find  symbol  resultsWeights  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  2);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  2);	  int    rows    =    Math.min(resultsWeights.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	68	None	replace
111	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  0,  0);  [CE]  cannot  find  symbol  resultsWeights  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  0,  0);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  0,  0);	  int    rows    =    Math.min(resultsWeights.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	68	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	int  criterion  =  1;	  double    criterion    =    1;    long    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	50	5	replace
113	[BUG]  [BUGGY]  int  criterion  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  criterion  =  1;	  double    criterion    =    1;    long    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	50	5	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  long  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	long  criterion  =  1;	  double    criterion    =    1;    long    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	50	5	replace
115	[BUG]  [BUGGY]  long  criterion  =  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  long  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	long  criterion  =  1;	  double    criterion    =    1;    long    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	50	5	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  Math.rint(rows);	  double    criterion    =    Math.rint(resultsWidth);    	compilable	  [FE]  AssertionFailedError  	57	12	replace
117	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows);	  double    criterion    =    Math.rint(resultsWidth);    	compilable	  [FE]  AssertionFailedError  	57	12	replace
118	[BUG]  [BUGGY]  double  criterion  =  Math.rint(resultsWeights);  [CE]  cannot  find  symbol  resultsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(resultsWeights);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(resultsWeights);	  double    criterion    =    Math.rint(resultsWidth);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	57	None	replace
119	[BUG]  [BUGGY]  double  criterion  =  Math.rint(resultsWeight);  [CE]  cannot  find  symbol  resultsWeight  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(resultsWeight);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(resultsWeight);	  double    criterion    =    Math.rint(resultsWidth);    	non-compiled	[CE]  cannot  find  symbol  resultsWeight	57	None	replace
120	[BUG]  [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  1);  [CE]  cannot  find  symbol  resultsWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(resultsWeights.length,  1);	  double    criterion    =    Math.min(resultsWeights.length,    0);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	52	None	replace
121	[BUG]  [BUGGY]  double  criterion  =  Math.rint(remainingsWeights.length);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(remainingsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(remainingsWeights.length);	  double    criterion    =    Math.rint(remainings.length);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	32	None	replace
122	[BUG]  [BUGGY]  double[][]  rows  =  jf.getCols();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  jf.getCols();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jf.getCols();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  cannot  find  symbol  jf	13	None	replace
123	[BUG]  [BUGGY]  double  remainders  =  Math.min(remainders.length,  2  -  residuals.length);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.min(remainders.length,  2  -  residuals.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remainders.length,  2  -  residuals.length);	  double    remainders    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None	replace
124	[BUG]  [BUGGY]  double  remainders  =  Math.min(remainders.length,  3);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.min(remainders.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remainders.length,  3);	  double    remainders    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
127	[BUG]  [BUGGY]  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint(cols[i]);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint(cols[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint(cols[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
129	[BUG]  [BUGGY]  double[][]  rows  =  cols,  jF.getColumns();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  cols,  jF.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  cols,  jF.getColumns();	  double[][]    rows    =    jF,    cols.getColumns();    	non-compiled	[CE]  ';'  expected	36	None	replace
130	[BUG]  [BUGGY]  double[][]  rows  =  cols,  jF.getRows();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  cols,  jF.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  cols,  jF.getRows();	  double[][]    rows    =    jF,    cols.getColumns();    	non-compiled	[CE]  ';'  expected	36	None	replace
131	[BUG]  [BUGGY]  double[][]  rows  =  cols.getRows();  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  cols.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  cols.getRows();	  double[][]    rows    =    jF,    cols.getColumns();    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
132	[BUG]  [BUGGY]  double[][]  rows  =  jF,  cols.getRows();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  jF,  cols.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jF,  cols.getRows();	  double[][]    rows    =    jF,    cols.getColumns();    	non-compiled	[CE]  ';'  expected	36	None	replace
133	[BUG]  [BUGGY]  double  remainders  =  Math.rint(remainders.length);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.rint(remainders.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.rint(remainders.length);	  double    criterion    =    Math.rint(remainders.length);    	non-compiled	[CE]  double  cannot  be  dereferenced	82	None	replace
134	[BUG]  [BUGGY]  double  residualsWidth  =  Math.rint(remainders.length);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  residualsWidth  =  Math.rint(remainders.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  residualsWidth  =  Math.rint(remainders.length);	  double    criterion    =    Math.rint(remainders.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	82	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	1	replace
136	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  0;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	1	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  0;  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	12	replace
138	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  1;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0;  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	12	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  0;  criterion  =  0.0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	1	replace
140	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  0.0;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0;  criterion  =  0.0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	1	replace
141	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  jF.length  -  1);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  jF.length  -  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  jF.length  -  1);	  int    rows    =    Math.min(remainders.length,    jF.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  results	29	None	replace
142	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length  -  1);  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length  -  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residuals.length  -  1);	  int    rows    =    Math.min(remainders.length,    jF.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	29	None	replace
143	[BUG]  [BUGGY]  int  rows  =  Math.min(resistances.length,  jF.length  -  1);  [CE]  cannot  find  symbol  resistances  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resistances.length,  jF.length  -  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resistances.length,  jF.length  -  1);	  int    rows    =    Math.min(remainders.length,    jF.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  resistances	29	None	replace
144	[BUG]  [BUGGY]  int  rows  =  Math.min(redeclarations.length,  jF.length);  [CE]  cannot  find  symbol  redeclarations  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(redeclarations.length,  jF.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(redeclarations.length,  jF.length);	  int    rows    =    Math.min(results.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  redeclarations	9	None	replace
145	[BUG]  [BUGGY]  double  criterion  =  3;  double  criterion  =  3;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  3;  double  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    3;    double  criterion  =  3;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	54	None	add
146	[BUG]  [BUGGY]  double  criterion  =  3;  Double  criterion  =  3;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  3;  Double  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    3;    Double  criterion  =  3;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	54	None	add
147	[BUG]  [BUGGY]  double  criterion  =  3;  int  criterion  =  3;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  3;  int  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    3;    int  criterion  =  3;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	54	None	add
148	[BUG]  [BUGGY]  double  criterion  =  3;  long  criterion  =  3;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  3;  long  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    3;    long  criterion  =  3;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	54	None	add
149	[BUG]  [BUGGY]  double[][]  residuals  =  ji.getRows();  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  ji.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  ji.getRows();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  ji	41	None	replace
150	[BUG]  [BUGGY]  double[][]  residuals  =  mf.getRows();  [CE]  cannot  find  symbol  mf  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  mf.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  mf.getRows();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  mf	41	None	replace
151	[BUG]  [BUGGY]  double[][]  residuals  =  m.getRows();  [CE]  cannot  find  symbol  m  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  m.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  m.getRows();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  m	41	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
156	[BUG]  [BUGGY]  double[][]  rows  =  _jF.getRows();  [CE]  cannot  find  symbol  _jF  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  _jF.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  _jF.getRows();	  double[][]    rows    =    this.jF.getRows();    	non-compiled	[CE]  cannot  find  symbol  _jF	63	None	replace
157	[BUG]  [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  3);  [CE]  cannot  find  symbol  resultsWeights  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(resultsWeights.length,  3);	  double    criterion    =    Math.min(resultsWeights.length,    2);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	71	None	replace
158	[BUG]  [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  4);  [CE]  cannot  find  symbol  resultsWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.min(resultsWeights.length,  4);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(resultsWeights.length,  4);	  double    criterion    =    Math.min(resultsWeights.length,    2);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	71	None	replace
159	[BUG]  [BUGGY]  int  criterion  =  this.remainings.length;  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  this.remainings.length;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  criterion  =  this.remainings.length;	  double    criterion    =    1;    int    criterion    =    1;    	non-compiled	[CE]  cannot  find  symbol  remainings	49	None	replace
160	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  getRowCount()  /  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getRowCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
161	[BUG]  [BUGGY]  int  rows  =  getColumnsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  getColumnsCount()  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getColumnsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  results.length;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
165	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights,  jF.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights,  jF.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights,  jF.length);	  int    rows    =    Math.min(resistances.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	10	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
167	[BUG]  [BUGGY]  double  criterion  =  3;  criterion  =  3;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  3;  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    3;    criterion  =  3;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	54	None	add
168	[BUG]  [BUGGY]  int  cols  =  this.getColumnCount();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  cols  =  this.getColumnCount();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  cols  =  this.getColumnCount();	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(result    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  resultsWeights;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
171	[BUG]  [BUGGY]  double  criterion  =  Math.rint(rows,  columnCount);  [CE]  cannot  find  symbol  columnCount  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(rows,  columnCount);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(rows,  columnCount);	  double    criterion    =    Math.rint(rows.length);    	non-compiled	[CE]  cannot  find  symbol  columnCount	30	None	replace
172	[BUG]  [BUGGY]  double[][]  rows  =  jF.getSeconds();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  jF.getSeconds();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  jF.getSeconds();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
173	[BUG]  [BUGGY]  double[][]  rows  =  cols.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  cols.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  cols.getColumns();	  double[][]    rows    =    jF,    cols.getColumns();    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
174	[BUG]  [BUGGY]  double[][]  rows  =  function.getRows();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  function.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  function.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
175	[BUG]  [BUGGY]  double[][]  rows  =  task.getRows();  [CE]  cannot  find  symbol  task  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  task.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  task.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  task	12	None	replace
176	[BUG]  [BUGGY]  double  remainders  =  Math.min(remainders,  2);  [CE]  cannot  find  symbol  criterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.min(remainders,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remainders,  2);	  double    remainders    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  criterion	45	None	replace
177	[BUG]  [BUGGY]  double  remainders  =  Math.min(remaindersWeights,  2);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.min(remaindersWeights,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remaindersWeights,  2);	  double    remainders    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	45	None	replace
178	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  2);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  2);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainingsWeights.length,  2);	  int    rows    =    Math.min(remainings.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	44	None	replace
179	[BUG]  [BUGGY]  double  criterion  =  0.0;  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0.0;  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    0.0;    criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	23	None	add
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
181	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jacobianEvaluations);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jacobianEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  jacobianEvaluations);	  double    criterion    =    Math.sqrt(getMatrix(),    cost);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
182	[BUG]  [BUGGY]  Double  criterion  =  0;  criterion  =  0;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  Double  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	Double  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	non-compiled	[CE]  incompatible  types	51	None	replace
183	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF,  factor);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  jF,  factor);	  double    criterion    =    Math.sqrt(getMatrix(),    jF);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
184	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  long  criterion  =  Math.sqrt(getRMS());  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS());  long  criterion  =  Math.sqrt(getRMS());  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    Math.sqrt(getRMS());    long  criterion  =  Math.sqrt(getRMS());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	79	None	add
185	[BUG]  [BUGGY]  double  criterion  =  0;  Double  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  0;  Double  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  0;  Double  criterion  =  0;	  double    criterion    =    1;    Double    criterion    =    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	48	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
188	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  residualsWeights.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  residualsWeights.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  residualsWeights.length);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	70	None	replace
189	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights,  residuals.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights,  residuals.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights,  residuals.length);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	70	None	replace
190	[BUG]  [BUGGY]  int  rows  =  Math.min(remaindersWeights.length,  residualsWeights.length);  [CE]  cannot  find  symbol  remaindersWeights  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remaindersWeights.length,  residualsWeights.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remaindersWeights.length,  residualsWeights.length);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	70	None	replace
191	[BUG]  [BUGGY]  int  rows  =  getColumnsCount();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  getColumnsCount();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  getColumnsCount();	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
192	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length,  residualsWeights.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length,  residualsWeights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length,  residualsWeights.length);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
193	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length,  variables.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length,  variables.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length,  variables.length);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
194	[BUG]  [BUGGY]  int  rows  =  Math.min(redefinitions.length,  jF.length);  [CE]  cannot  find  symbol  redefinitions  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(redefinitions.length,  jF.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(redefinitions.length,  jF.length);	  int    rows    =    Math.min(results.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  redefinitions	9	None	replace
195	[BUG]  [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  residuals.length);  [CE]  cannot  find  symbol  resultsWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resultsWeights.length,  residuals.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resultsWeights.length,  residuals.length);	  int    rows    =    Math.min(remainders.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	28	None	replace
196	[BUG]  [BUGGY]  int  rows  =  Math.min(resistances.length,  residualsWeights.length);  [CE]  cannot  find  symbol  resistances  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(resistances.length,  residualsWeights.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(resistances.length,  residualsWeights.length);	  int    rows    =    Math.min(remainders.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  resistances	28	None	replace
197	[BUG]  [BUGGY]  double[][]  rows  =  function.getColumns();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  function.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  function.getColumns();	  double[][]    rows    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
198	[BUG]  [BUGGY]  double[][]  rows  =  task.getColumns();  [CE]  cannot  find  symbol  task  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  task.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  task.getColumns();	  double[][]    rows    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol  task	78	None	replace
199	[BUG]  [BUGGY]  double[][]  residuals  =  function.getRows();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  function.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  function.getRows();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
200	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  Math.sqrt(getRMS()  /  2);	  double    criterion    =    Math.sqrt(getRMS());    	compilable	  [FE]  StackOverflowError  	80	14	replace
201	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  /  2);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRMS()  /  2);	  double    criterion    =    Math.sqrt(getRMS());    	compilable	  [FE]  StackOverflowError  	80	14	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
204	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  0,  3);  [CE]  cannot  find  symbol  results  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  0,  3);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  0,  3);	  int    rows    =    Math.min(results.length,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  results	17	None	replace
205	[BUG]  [BUGGY]  double[][]  residuals  =  jF,  function.getRemainders();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jF,  function.getRemainders();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF,  function.getRemainders();	  double[][]    residuals    =    jF.getRemainders();    	non-compiled	[CE]  ';'  expected	53	None	replace
206	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  1);  [CE]  cannot  find  symbol  remainingsWeights  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainingsWeights.length,  1);	  int    rows    =    Math.min(remainings.length,    1);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	43	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	77	None	replace
208	[BUG]  [BUGGY]  int  rows  =  Math.min(remaindersWeights.length,  jF.length);  [CE]  cannot  find  symbol  remaindersWeights  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remaindersWeights.length,  jF.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remaindersWeights.length,  jF.length);	  int    rows    =    Math.min(resultsWeights.length,    jF.length);    	non-compiled	[CE]  cannot  find  symbol  remaindersWeights	65	None	replace
209	[BUG]  [BUGGY]  double  criterion  =  2;  long  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  long  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double    criterion    =    2;    long  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	37	None	add
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.r	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
211	[BUG]  [BUGGY]  double  criterion  =  Math.rint(resultsWights.length);  [CE]  cannot  find  symbol  resultsWights  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(resultsWights.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(resultsWights.length);	  double    criterion    =    Math.rint(resultsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  resultsWights	31	None	replace
212	[BUG]  [BUGGY]  int  criterion  =  0;  int  criterion  =  0L;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  0;  int  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  criterion  =  0;  int  criterion  =  0L;	  double    criterion    =    0L;    long    criterion    =    0L;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	21	None	replace
213	[BUG]  [BUGGY]  int  criterion  =  0;  long  criterion  =  0L;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  criterion  =  0;  long  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  criterion  =  0;  long  criterion  =  0L;	  double    criterion    =    0L;    long    criterion    =    0L;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	21	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  resultsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(results[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(results[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
217	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  +  2);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  +  2);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  jF.length  +  2);	  int    rows    =    Math.min(remainders.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	69	None	replace
218	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  *  2  +  1);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  *  2  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  jF.length  *  2  +  1);	  int    rows    =    Math.min(remainders.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	69	None	replace
219	[BUG]  [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  residuals.length);  [CE]  cannot  find  symbol  remainingsWeights  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainingsWeights.length,  residuals.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainingsWeights.length,  residuals.length);	  int    rows    =    Math.min(remainings.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainingsWeights	81	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
221	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables);	  double    criterion    =    Math.rint(resultsWidth);    	non-compiled	[CE]  cannot  find  symbol  	57	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    	non-compiled	[CE]  ';'  expected	4	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
224	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  residuals.length);  [CE]  cannot  find  symbol  results  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(results.length,  residuals.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(results.length,  residuals.length);	  int    rows    =    Math.min(remainders.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	28	None	replace
225	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWidths.length);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  residualsWidths.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  residualsWidths.length);	  int    rows    =    Math.min(remainders.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	28	None	replace
226	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	final  double  criterion  =  Math.rint(results[i]);  if(criterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(result    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
227	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  -  2);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  jF.length  -  2);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  jF.length  -  2);	  int    rows    =    Math.min(remainders.length,    jF.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	29	None	replace
228	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length,  residuals.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length,  residuals.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length,  residuals.length);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
229	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variables.length,  factor);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variables.length,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variables.length,  factor);	  double    criterion    =    Math.rint(variables.length);    	non-compiled	[CE]  cannot  find  symbol  	56	None	replace
230	[BUG]  [BUGGY]  double  criterion  =  Math.min(remainders.length,  0);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.min(remainders.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.min(remainders.length,  0);	  double    criterion    =    Math.min(resultsWeights.length,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	52	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  cols  =  function.getRows();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  result[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getColumns();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    result[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
233	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  3);  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  3);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  3);	  int    rows    =    Math.min(remainings.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainings	44	None	replace
234	[BUG]  [BUGGY]  double[][]  residuals  =  this.matrixFunction.getRows();  [CE]  cannot  find  symbol  matrixFunction  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  this.matrixFunction.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  this.matrixFunction.getRows();	  double[][]    residuals    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  matrixFunction	41	None	replace
235	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  residuals.length  +  1);  [CE]  cannot  find  symbol  remainings  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  residuals.length  +  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  residuals.length  +  1);	  int    rows    =    Math.min(remainings.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
236	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  jF.length  -  1);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  jF.length  -  1);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  jF.length  -  1);	  int    rows    =    Math.min(remainings.length,    jF.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
237	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  remainingsWeights.length);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  remainingsWeights.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  remainingsWeights.length);	  int    rows    =    Math.min(remainders.length,    residualsWeights.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	70	None	replace
238	[BUG]  [BUGGY]  double[][]  rows  =  this.matrixFunction.getColumns();  [CE]  cannot  find  symbol  matrixFunction  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  this.matrixFunction.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  this.matrixFunction.getColumns();	  double[][]    rows    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol  matrixFunction	78	None	replace
239	[BUG]  [BUGGY]  double[][]  rows  =  this.jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  this.jf.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  this.jf.getColumns();	  double[][]    rows    =    jf.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	78	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  long  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	long  criterion  =  0;	  double    criterion    =    0L;    long    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	21	4	replace
241	[BUG]  [BUGGY]  long  criterion  =  0;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  long  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	long  criterion  =  0;	  double    criterion    =    0L;    long    criterion    =    0L;    	compilable	  [FE]  AssertionFailedError  	21	4	replace
242	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  Math.sqrt(getRMS()  +  2);	  double    criterion    =    Math.sqrt(getRMS());    	compilable	  [FE]  StackOverflowError  	80	14	replace
243	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  +  2);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getRMS()  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getRMS()  +  2);	  double    criterion    =    Math.sqrt(getRMS());    	compilable	  [FE]  StackOverflowError  	80	14	replace
244	[BUG]  [BUGGY]  double[][]  residuals  =  jF,  function.getRemainings();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  residuals  =  jF,  function.getRemainings();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  residuals  =  jF,  function.getRemainings();	  double[][]    residuals    =    jF.getRemainings();    	non-compiled	[CE]  ';'  expected	42	None	replace
245	[BUG]  [BUGGY]  double  criterion  =  Math.rint(variant);  [CE]  cannot  find  symbol  variant  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.rint(variant);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.rint(variant);	  double    criterion    =    Math.rint(resultsWidth);    	non-compiled	[CE]  cannot  find  symbol  variant	57	None	replace
246	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF,  coefficient);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  jF,  coefficient);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  jF,  coefficient);	  double    criterion    =    Math.sqrt(getMatrix(),    jF);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
247	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  factors);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  Math.sqrt(getMatrix(),  factors);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  Math.sqrt(getMatrix(),  factors);	  double    criterion    =    Math.sqrt(getMatrix(),    cost);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainders[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  ']'  expected	75	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double[][]  cols  =  function.getColumns();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  residuals[i]  =  Math.rint	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double[][]    cols    =    function.getRows();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    residuals[i]    =    Math.rint(cols[i]);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
251	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  0,  0);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  0,  0);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainders.length,  0,  0);	  int    rows    =    Math.min(results.length,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  remainders	17	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainders[i]);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainders[i]);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(results[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(results[i]);    	non-compiled	[CE]  ']'  expected	76	None	replace
254	[BUG]  [BUGGY]  double  residuals  =  Math.min(remainders.length,  2);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  residuals  =  Math.min(remainders.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  residuals  =  Math.min(remainders.length,  2);	  double    remainders    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	45	None	replace
255	[BUG]  [BUGGY]  double  remainders  =  Math.min(remainders,  residuals.length);  [CE]  cannot  find  symbol  criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  remainders  =  Math.min(remainders,  residuals.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  remainders  =  Math.min(remainders,  residuals.length);	  double    remainders    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  criterion	45	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	add	double  criterion  =  2;  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	12	replace
257	[BUG]  [BUGGY]  double  criterion  =  2;  criterion  =  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  criterion  =  2;  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  criterion  =  2;  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	51	12	replace
258	[BUG]  [BUGGY]  double[][]  rows  =  this.matrixFunction.getRows();  [CE]  cannot  find  symbol  matrixFunction  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  this.matrixFunction.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  this.matrixFunction.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  matrixFunction	12	None	replace
259	[BUG]  [BUGGY]  double[][]  rows  =  this.jf.getRows();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double[][]  rows  =  this.jf.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double[][]  rows  =  this.jf.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	12	None	replace
260	[BUG]  [BUGGY]  double  residuals  =  Math.rint(remainders.length);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  double  residuals  =  Math.rint(remainders.length);  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	double  residuals  =  Math.rint(remainders.length);	  double    criterion    =    Math.rint(remainders.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	82	None	replace
261	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  remainings.length);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  remainings.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	int  rows  =  Math.min(remainings.length,  remainings.length);	  int    rows    =    Math.min(remainings.length,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	81	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
263	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	final  double  criterion  =  Math.rint(results[i]);  if(reciterion  >  0)  {	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(results[i]);    if(recipes    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	240	240	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residuals[i]  =  Math.sqrt(remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residuals[i]    =    Math.sqrt(remainings[i]);    	non-compiled	[CE]  ']'  expected	77	None	replace
