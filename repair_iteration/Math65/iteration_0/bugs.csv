bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] double chiSquare = 0; [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { [BUGGY] double chiSquare = 0; [BUGGY] for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { [BUGGY] [BUGGY] double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	255	255	1	add	
3	[BUG] [BUGGY] for (int i = 0; i < rows; ++i) { [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; [BUGGY] for (int i = 0; i < rows; ++i) { [BUGGY] final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; [BUGGY] [BUGGY] for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	add	
5	[BUG] [BUGGY] final double residual = residuals[i]; [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { [BUGGY] final double residual = residuals[i]; [BUGGY] chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	257	257	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { [BUGGY] [BUGGY] final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	257	257	1	add	
7	[BUG] [BUGGY] chiSquare += residual * residual / residualsWeights[i]; [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; [BUGGY] chiSquare += residual * residual / residualsWeights[i]; [BUGGY] } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; [BUGGY] [BUGGY] chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	
9	[BUG] [BUGGY] return chiSquare; [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } [BUGGY] return chiSquare; [BUGGY] } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } [BUGGY] [BUGGY] return chiSquare; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getChiSquare [RETURN_TYPE] double  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues double chiSquare cost criterion factor residual double[][] jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	260	260	1	add	
11	[BUG] [BUGGY] return inverse.getData(); [FE] AssertionFailedError testCircleFitting [CONTEXT] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [BUGGY] return inverse.getData(); [BUGGY] } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	294	294	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); [BUGGY] [BUGGY] return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } [CLASS] AbstractLeastSquaresOptimizer [METHOD] getCovariances [RETURN_TYPE] double[][]  [VARIABLES] InvalidMatrixException ime boolean VectorialConvergenceChecker checker convergenceChecker double[] ji objective point residuals residualsWeights targetValues RealMatrix inverse double chiSquare cost criterion factor residual sum double[][] jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	294	294	1	add	
13	[BUG] [BUGGY] double[] errors = new double[cols]; [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } [BUGGY] double[] errors = new double[cols]; [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } [BUGGY] [BUGGY] double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	317	317	1	add	
15	[BUG] [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); [BUGGY] double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; [BUGGY] [BUGGY] final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	318	318	1	add	
17	[BUG] [BUGGY] double[][] covar = getCovariances(); [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); [BUGGY] double[][] covar = getCovariances(); [BUGGY] for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); [BUGGY] [BUGGY] double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	add	
19	[BUG] [BUGGY] for (int i = 0; i < errors.length; ++i) { [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); [BUGGY] for (int i = 0; i < errors.length; ++i) { [BUGGY] errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testCircleFitting [CONTEXT] public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); [BUGGY] [BUGGY] for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } [CLASS] AbstractLeastSquaresOptimizer [METHOD] guessParametersErrors [RETURN_TYPE] double[]  [VARIABLES] boolean VectorialConvergenceChecker checker convergenceChecker double[] errors ji objective point residuals residualsWeights targetValues double c chiSquare cost criterion factor residual sum double[][] covar jTj jacobian DifferentiableMultivariateVectorialFunction function MultivariateMatrixFunction jF int DEFAULT_MAX_ITERATIONS cols i index iterations j jacobianEvaluations k maxEvaluations maxIterations objectiveEvaluations rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	320	320	1	add	
