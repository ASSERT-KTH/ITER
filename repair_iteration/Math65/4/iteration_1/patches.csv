bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  chiSquare  +=  residual  *  remaining  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  remaining  /  residuals[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  remaining  /  residuals[i];	      chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
2	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
3	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
4	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	6	None	replace
5	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	16	None	replace
7	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	16	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	9	1	replace
11	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	9	1	replace
12	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remaining)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remaining)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remaining)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	9	None	replace
13	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji)/  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(ji)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	9	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	9	1	replace
15	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	9	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	13	1	add
17	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	13	1	add
18	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  double  chiSquare  +=  residual  *  i  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  double  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    residuals[i];    double  chiSquare  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	13	None	add
19	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  remaining  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	13	None	add
20	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	13	None	add
21	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residues[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	13	None	add
22	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  residual);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
23	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  cost);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  cost);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
24	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  residual);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
25	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  1);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  +  1);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
26	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  jacobian[i];	  chiSquare    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  2  /  residuals[i];	  chiSquare    +=    residual    *    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	7	1	replace
28	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  /  residuals[i];	  chiSquare    +=    residual    *    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	7	1	replace
29	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  parameters[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  /  parameters[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  parameters[i];	  chiSquare    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  chiSquare  +=  residual  *(remaining  *  rows[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *(remaining  *  rows[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *(remaining  *  rows[i]);	  chiSquare    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	7	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
32	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	18	None	replace
33	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
34	[BUG]  [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  +=  Math.sqrt(remainder);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	compilable	  [FE]  AssertionFailedError  	3	1	add
36	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	compilable	  [FE]  AssertionFailedError  	3	1	add
37	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  remaining  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
38	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  remaining  *  residual  /  residualsWeights[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  remaining  *  residual  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  remaining  *  residual  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
39	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residue  /  residualsWeights[i];  [CE]  cannot  find  symbol  residue  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residue  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residue  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	3	None	add
40	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	non-compiled	[CE]  ';'  expected	3	None	add
41	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remaining  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remaining  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remaining  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	10	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	10	1	replace
43	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	10	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	10	1	replace
45	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	10	1	replace
46	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(ji  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	10	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	5	None	replace
48	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue();  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue();  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i].doubleValue();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	5	None	replace
49	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].doubleValue();  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  residual  =  residuals[i].doubleValue();  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i].doubleValue();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	5	None	replace
50	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  rows[i];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  rows[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  rows[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	14	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  2;  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  *  2;	  chiSquare    +=    residual    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	14	1	replace
52	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  2;  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  2;	  chiSquare    +=    residual    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	14	1	replace
53	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  remaining[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  remaining[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  remaining[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	14	None	replace
54	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  jF  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  *  residuals[i];	  chiSquare    +=    residual    *    ji    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
55	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jf  *  residuals[i];  [CE]  cannot  find  symbol  jf  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  jf  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jf  *  residuals[i];	  chiSquare    +=    residual    *    ji    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jf	11	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	1	replace
57	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	1	replace
58	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  /  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  jF  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
59	[BUG]  [BUGGY]  chiSquare  +=  residual  *  js[i]  /  residuals[i];  [CE]  cannot  find  symbol  js  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  js[i]  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  js[i]  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  js	8	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	2	None	replace
61	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	2	None	replace
62	[BUG]  [BUGGY]  final  double  residual  =  residuals[i];  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  residual  =  residuals[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	2	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	2	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	1	None	replace
65	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  chiSquare  =  residuals[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	1	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	1	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  fields;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  fields;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	1	None	replace
68	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value  /  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(value  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	12	None	replace
69	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji  /  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(ji  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	12	None	replace
70	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	12	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	19	None	replace
72	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	19	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.log(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(result)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	1	replace
76	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.log(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(result)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	1	replace
77	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.cos(result)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	17	None	replace
78	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.ceil(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.ceil(result)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.ceil(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	17	None	replace
79	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.log(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.log(result)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.log(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	17	None	replace
80	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
81	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
82	[BUG]  [BUGGY]  chiSquare  +=  Math.log(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  Math.log(result)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	17	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  i  *  residual  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	14	1	replace
84	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residual  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	14	1	replace
85	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  parameters[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  parameters[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	14	None	replace
86	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  maxIterations[i];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  maxIterations[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  maxIterations[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	14	None	replace
87	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(result)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	9	None	replace
88	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jiResistance)/  residuals[i];  [CE]  cannot  find  symbol  jiResistance  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jiResistance)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jiResistance)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jiResistance	9	None	replace
89	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian  /  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  jacobian  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
90	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jf  /  residuals[i];  [CE]  cannot  find  symbol  jf  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  jf  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jf  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jf	8	None	replace
91	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	5	None	replace
92	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  period  *  i  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  period  *  i  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  period  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	13	None	add
93	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(result  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(result  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(result  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	10	None	replace
94	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  residue  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(residue  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  residue	10	None	replace
95	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(value  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	10	None	replace
96	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
97	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
98	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
99	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
100	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	12	None	replace
101	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i]);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	12	None	replace
102	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residuesWeights[i];  [CE]  cannot  find  symbol  residuesWeights  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residuesWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residuesWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  residuesWeights	3	None	add
103	[BUG]  [BUGGY]  result  /=  residuals[i].doubleValue();  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  result  /=  residuals[i].doubleValue();  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  /=  residuals[i].doubleValue();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  result	16	None	replace
104	[BUG]  [BUGGY]  result  /=  residuals[i];  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  result  /=  residuals[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  /=  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  cannot  find  symbol  result	16	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  maxIterations  *  residuals[i];	  chiSquare    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	11	1	replace
106	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations  *  residuals[i];	  chiSquare    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	11	1	replace
107	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(jF,  residual);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(jF,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
108	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  2);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  2);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
109	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(ji,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(ji,  residual);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(ji,  residual);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
110	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder);	  chiSquare    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	7	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  maxIterations  /  residuals[i];	  chiSquare    +=    residual    *    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	7	1	replace
112	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations  /  residuals[i];	  chiSquare    +=    residual    *    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	7	1	replace
113	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
114	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
115	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
116	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(period);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(period);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
117	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  double  chiSquare  =  Math.sqrt(variant);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(variant);	      double    chiSquare    =    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	15	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  chiSquare  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	1	replace
119	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  chiSquare  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	1	replace
120	[BUG]  [BUGGY]  chiSquare  +=  residual  *  js.length  /  residuals[i];  [CE]  cannot  find  symbol  js  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  js.length  /  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  js.length  /  residuals[i];	  chiSquare    +=    residual    *    ji    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  js	8	None	replace
121	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	5	None	replace
122	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	5	None	replace
123	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(variant  /  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(variant  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(variant  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	12	None	replace
124	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	12	None	replace
125	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
126	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  REGULAR  /  residualsWeights[i];  [CE]  cannot  find  symbol  REGULAR  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  REGULAR  /  residualsWeights[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  REGULAR  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  REGULAR	3	None	add
127	[BUG]  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWidths[i];  [CE]  cannot  find  symbol  residualsWidths  [FE]      AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWidths[i];  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWidths[i];	  	non-compiled	[CE]  cannot  find  symbol  residualsWidths	3	None	add
128	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	1	None	replace
129	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	1	None	replace
130	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	18	None	replace
131	[BUG]  [BUGGY]  matically(remaining)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  matically(remaining)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	matically(remaining)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
132	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder)/  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remainder)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	9	None	replace
133	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  residuals[i];  [CE]  cannot  find  symbol  row  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  row  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  row	14	None	replace
134	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  not  a  statement	19	None	replace
135	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remainder  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	10	None	replace
136	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  jacobianEvaluations[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  /  jacobianEvaluations[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  jacobianEvaluations[i];	  chiSquare    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
137	[BUG]  [BUGGY]  chiSquare  +=  residual  *  js.length  *  residuals[i];  [CE]  cannot  find  symbol  js  [FE]        AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  js.length  *  residuals[i];  [BUGGY]    }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  js.length  *  residuals[i];	  chiSquare    +=    residual    *    ji    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  js	11	None	replace
138	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
139	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
140	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
141	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]    public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);	      chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	4	None	replace
