bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
2	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
3	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	16	1	add
5	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	16	1	add
6	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  remaining  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	16	None	add
7	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  double  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  double  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    double  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	16	None	add
8	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  remaining  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	16	None	add
9	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	16	None	add
10	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  0,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  0,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  0,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	24	None	replace
11	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  criterion);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  criterion);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  criterion);	  double    chiSquare    =    Math.sqrt(remainder,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	24	None	replace
12	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  value);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  value);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  value);	  double    chiSquare    =    Math.sqrt(remainder,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	24	None	replace
13	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  jF);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remaining,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	107	None	replace
14	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  jF);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	107	None	replace
15	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(period,  jF);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(period,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	107	None	replace
16	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition,  jF);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(redefinition,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	107	None	replace
17	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  ji;  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  ji;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  ji;	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    residual    *    i    *    residues[i];    	non-compiled	[CE]  cannot  find  symbol  ji	21	None	replace
18	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  ji[i];  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  ji[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  ji[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    residual    *    i    *    residues[i];    	non-compiled	[CE]  cannot  find  symbol  ji	21	None	replace
19	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji.length  /  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji.length  /  residuals[i];	  chiSquare    +=    residual    *    js.length    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	120	None	replace
20	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i.length  /  residuals[i];  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i.length  /  residuals[i];	  chiSquare    +=    residual    *    js.length    /    residuals[i];    	non-compiled	[CE]  int  cannot  be  dereferenced	120	None	replace
21	[BUG]  [BUGGY]  chiSquare  +=  residual  *  remaining.length  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  remaining.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  remaining.length  /  residuals[i];	  chiSquare    +=    residual    *    js.length    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	120	None	replace
22	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	129	None	replace
23	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	129	None	replace
24	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	129	None	replace
25	[BUG]  [BUGGY]  chiSquare  /=  residuals[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  /=  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  /=  residuals[i].doubleValue();	  result    /=    residuals[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
26	[BUG]  [BUGGY]  double  result  /=  residuals[i].doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  result  /=  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  result  /=  residuals[i].doubleValue();	  result    /=    residuals[i].doubleValue();    	non-compiled	[CE]  ';'  expected	103	None	replace
27	[BUG]  [BUGGY]  results[i]  /=  residuals[i].doubleValue();  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  results[i]  /=  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	results[i]  /=  residuals[i].doubleValue();	  result    /=    residuals[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  results	103	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  cost  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	38	1	replace
29	[BUG]  [BUGGY]  chiSquare  +=  cost  *  residual  /  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	38	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residuals[i]  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  cost  *  residuals[i]  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	38	1	replace
31	[BUG]  [BUGGY]  chiSquare  +=  cost  *  residuals[i]  /  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residuals[i]  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  residuals[i]  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	38	1	replace
32	[BUG]  [BUGGY]  chiSquare  +=  cost  *  residuals  /  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residuals  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  residuals  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	38	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  cost  *  residual  /  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	38	1	replace
34	[BUG]  [BUGGY]  chiSquare  +=  cost  *  residual  /  residualsWeights[i];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  residual  /  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    remaining    *    residual    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	38	1	replace
35	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(reciterion  /  residuals[i]);  [CE]  cannot  find  symbol  reciterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(reciterion  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(reciterion  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(value    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  reciterion	68	None	replace
36	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
37	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
38	[BUG]  [BUGGY]  luate(resistance,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(resistance,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(resistance,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
39	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
40	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  not  a  statement	115	None	replace
41	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  not  a  statement	115	None	replace
42	[BUG]  [BUGGY]  chiSquare  +=  cost  *(remaining  *  rows[i]);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *(remaining  *  rows[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *(remaining  *  rows[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	30	None	replace
43	[BUG]  [BUGGY]  chiSquare  +=  cost  *(result  *  rows[i]);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *(result  *  rows[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *(result  *  rows[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	non-compiled	[CE]  cannot  find  symbol  result	30	None	replace
44	[BUG]  [BUGGY]  chiSquare  +=  residual  *(rows[i]);  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(rows[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *(rows[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	30	None	replace
45	[BUG]  [BUGGY]  chiSquare  +=  residual  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  parameters[i];	  chiSquare    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	29	None	replace
46	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  /  parameters[i];	  chiSquare    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	29	None	replace
47	[BUG]  [BUGGY]  chiSquare  +=  residual  *(parameters[i]  -  residual);  [CE]  cannot  find  symbol  parameters  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(parameters[i]  -  residual);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *(parameters[i]  -  residual);	  chiSquare    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	29	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.pow(10.0,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  Math.pow(10.0,  residual);	  final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    	compilable	  [FE]  AssertionFailedError  	72	1	replace
49	[BUG]  [BUGGY]  chiSquare  +=  Math.pow(10.0,  residual);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.pow(10.0,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.pow(10.0,  residual);	  final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    	compilable	  [FE]  AssertionFailedError  	72	1	replace
50	[BUG]  [BUGGY]  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);	  final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	72	None	replace
51	[BUG]  [BUGGY]  chiSquare  +=  Math.pow(10.0,  residuals[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.pow(10.0,  residuals[i].doubleValue());  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.pow(10.0,  residuals[i].doubleValue());	  final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	63	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	63	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	63	None	replace
55	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
56	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
57	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
58	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
59	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  jacobianEvaluations[i];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  jacobianEvaluations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  /  jacobianEvaluations[i];	  chiSquare    +=    residual    *    /    jacobianEvaluations[i];    	non-compiled	[CE]  array  required,  but  int  found	136	None	replace
60	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  jacobianEvaluations[i];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  jacobianEvaluations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations  /  jacobianEvaluations[i];	  chiSquare    +=    residual    *    /    jacobianEvaluations[i];    	non-compiled	[CE]  array  required,  but  int  found	136	None	replace
61	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobianEvaluations[i];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobianEvaluations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobianEvaluations[i];	  chiSquare    +=    residual    *    /    jacobianEvaluations[i];    	non-compiled	[CE]  array  required,  but  int  found	136	None	replace
62	[BUG]  [BUGGY]  chiSquare  +=  remaining  *  chiSquare  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  remaining  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  remaining  *  chiSquare  /  residuals[i];	  chiSquare    +=    residual    *    chiSquare    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	119	None	replace
63	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  chiSquare  *  remainings[i];	  chiSquare    +=    residual    *    chiSquare    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	119	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.rint(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.rint(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
65	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.rint(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.rint(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.rint(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.cos(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
67	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sin(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sin(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
69	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sin(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sin(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sin(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
70	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.log(i)/  parameters[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	76	None	replace
71	[BUG]  [BUGGY]  chiSquare  +=  residual  *  sum  /  residuals[i];  [CE]  cannot  find  symbol  sum  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  sum  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  sum  /  residuals[i];	  chiSquare    +=    residual    *    jf    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  sum	90	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  residual  *  maxIterations  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	111	1	add
73	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  residual  *  maxIterations  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	111	1	add
74	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  double  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  double  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    double  chiSquare  +=  residual  *  maxIterations  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	111	None	add
75	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  remaining  *  maxIterations  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  remaining  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  remaining  *  maxIterations  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	111	None	add
76	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residue  *  maxIterations  /  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residue  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  residue  *  maxIterations  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	111	None	add
77	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residual  *  maxIterations  /  residues[i];  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  residual  *  maxIterations  /  residues[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  residual  *  maxIterations  /  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	111	None	add
78	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(redefinition)/  residuals[i];  [CE]  cannot  find  symbol  redefinition  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(redefinition)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(redefinition)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  redefinition	12	None	replace
79	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(redefinition)/  residuals[i];  [CE]  cannot  find  symbol  redefinition  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(redefinition)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(redefinition)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  redefinition	12	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  residual  *  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  residual  *  2  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	27	1	add
81	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  residual  *  2  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  residual  *  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  residual  *  2  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	27	1	add
82	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  remaining  *  2  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  remaining  *  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  remaining  *  2  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	27	None	add
83	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  double  chiSquare  +=  residual  *  2  /  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  double  chiSquare  +=  residual  *  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    2    /    residuals[i];    double  chiSquare  +=  residual  *  2  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	27	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  2  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	27	1	add
85	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  2  /  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  2  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	27	1	add
86	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  residue  *  2  /  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  residue  *  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  residue  *  2  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	27	None	add
87	[BUG]  [BUGGY]  chiSquare  +=  Math.min(result,  i);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.min(result,  i);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.min(result,  i);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
88	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare,  i);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare,  i);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	replace
89	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(0,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(0,  chiSquare);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(0,  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	replace
90	[BUG]  [BUGGY]  chiSquare  +=  reimbursement  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  reimbursement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  reimbursement  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  reimbursement  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    factor    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  reimbursement	100	None	replace
91	[BUG]  [BUGGY]  chiSquare  +=  price  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  price  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  price  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  price  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    factor    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  price	100	None	replace
92	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(period  /  residuals[i]);  [CE]  cannot  find  symbol  period  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(period  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(period  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(variant    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  period	123	None	replace
93	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remaining  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(variant    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	123	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(i  *  rows  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
95	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  rows  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i  *  rows  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  2  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(i  *  2  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
97	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  2  /  residuals[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  2  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i  *  2  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
98	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  row,  residual  /  residuals[i]);  [CE]  cannot  find  symbol  row  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  row,  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i  *  row,  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  row	45	None	replace
99	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	45	None	replace
100	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  columns[i];  [CE]  cannot  find  symbol  columns  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  columns[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  columns[i];	  chiSquare    +=    residual    *    i    *    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  columns	85	None	replace
101	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  1);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  1);	  double    chiSquare    =    Math.sqrt(remainder    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
102	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  2);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  +  2);	  double    chiSquare    =    Math.sqrt(remainder    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
103	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  1,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  +  1,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  +  1,  residual);	  double    chiSquare    =    Math.sqrt(remainder    +    1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	25	None	replace
104	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  /  jacobian[i];	  chiSquare    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	26	None	replace
105	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i],  cost;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i],  cost;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  jacobian[i],  cost;	  chiSquare    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
106	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i].doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  /  jacobian[i].doubleValue();  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  jacobian[i].doubleValue();	  chiSquare    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
107	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(variant  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(variant  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(variant  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(value    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	95	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  residual  *  chiSquare  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	118	1	add
109	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  residual  *  chiSquare  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	118	1	add
110	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  double  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  double  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    double  chiSquare  +=  residual  *  chiSquare  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	118	None	add
111	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  remaining  *  chiSquare  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  remaining  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  remaining  *  chiSquare  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	118	None	add
112	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residue  *  chiSquare  /  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residue  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  residue  *  chiSquare  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	118	None	add
113	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  (remaining  *  chiSquare  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  (remaining  *  chiSquare  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  (remaining  *  chiSquare  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	118	None	add
114	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	5	None	replace
115	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
116	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
117	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
118	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  chiSquare;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	9	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	9	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	9	None	replace
122	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian  *  residuals[i];	  chiSquare    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	55	None	replace
123	[BUG]  [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	98	None	replace
124	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remaining  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remaining  *  residuals[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remaining  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	141	None	replace
125	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  residualsWeights[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	141	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residuals[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(rows  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	141	1	replace
127	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residuals[i]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residuals[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(rows  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	141	1	replace
128	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  residue  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(residue  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(residue    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  residue	94	None	replace
129	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  residue  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(residue  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(residue    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  residue	94	None	replace
130	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(period  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  period  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(period  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(period  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(residue    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  period	94	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residuals[i]  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  residuals[i]  /  residuals[i];	  chiSquare    +=    residual    *    js[i]    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	59	1	replace
132	[BUG]  [BUGGY]  chiSquare  +=  residual  *  residuals[i]  /  residuals[i];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residuals[i]  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  residuals[i]  /  residuals[i];	  chiSquare    +=    residual    *    js[i]    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	59	1	replace
133	[BUG]  [BUGGY]  chiSquare  +=  residual  *  remainings[i]  /  residuals[i];  [CE]  cannot  find  symbol  remainings  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  remainings[i]  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  remainings[i]  /  residuals[i];	  chiSquare    +=    residual    *    js[i]    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	59	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.ceil(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.ceil(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	78	1	replace
135	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.ceil(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.ceil(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.ceil(i)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	78	1	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.ceil(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.ceil(rows)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	78	1	replace
137	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.ceil(rows)/  residuals[i];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.ceil(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.ceil(rows)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	78	1	replace
138	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.ceil(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.ceil(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.ceil(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	78	None	replace
139	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.ceil(ji)/  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.ceil(ji)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.ceil(ji)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	78	None	replace
140	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
141	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  residualsWeights[i];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
142	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
143	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  for(int  i  =  0;  i  <  rows;  ++i)  {	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    i    *    residual    *    residuals[i];    chiSquare  +=  i  *  residual  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	83	1	add
145	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    i    *    residual    *    residuals[i];    chiSquare  +=  i  *  residual  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	83	1	add
146	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  remaining  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    i    *    residual    *    residuals[i];    chiSquare  +=  i  *  remaining  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	83	None	add
147	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  double  chiSquare  +=  i  *  residual  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  double  chiSquare  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    i    *    residual    *    residuals[i];    double  chiSquare  +=  i  *  residual  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	83	None	add
148	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    i    *    residual    *    residuals[i];    chiSquare  +=  i  *  residual  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	83	None	add
149	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  chiSquare  +=  i  *  residual  *  residues[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    i    *    residual    *    residuals[i];    chiSquare  +=  i  *  residual  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	83	None	add
150	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
151	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
152	[BUG]  [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(i,  residual)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
153	[BUG]  [BUGGY]  luate(remainings,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remainings,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remainings,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
154	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remainder)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	132	None	replace
155	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(remainder)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remainder)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	132	None	replace
156	[BUG]  [BUGGY]  chiSquare  +=  residual  *  REGULAR  /  residuals[i];  [CE]  cannot  find  symbol  REGULAR  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  REGULAR  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  REGULAR  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    REGULAR    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  REGULAR	126	None	replace
157	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji  /  residualsWeights[i];  [CE]  cannot  find  symbol  ji  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji  /  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    REGULAR    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  ji	126	None	replace
158	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1    	non-compiled	[CE]  not  a  statement	3	None	replace
159	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	10	1	add
161	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	10	1	add
162	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    double  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	10	None	add
163	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  remaining  *  Math.sqrt(rows)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  remaining  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  remaining  *  Math.sqrt(rows)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	10	None	add
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  Math.sqrt(rows)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	10	1	add
165	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(rows)/  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  Math.sqrt(rows)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	10	1	add
166	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  residue  *  Math.sqrt(rows)/  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  residue  *  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  residue  *  Math.sqrt(rows)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	10	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxEvaluations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  maxEvaluations  /  residuals[i];	  chiSquare    +=    residual    *    maxIterations    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	112	1	replace
168	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxEvaluations  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxEvaluations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxEvaluations  /  residuals[i];	  chiSquare    +=    residual    *    maxIterations    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	112	1	replace
169	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  rows[i];  [CE]  array  required,  but  int  found  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations  *  rows[i];	  chiSquare    +=    residual    *    maxIterations    /    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	112	None	replace
170	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(ji  /  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(ji  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(ji  /  residuals[i]);	  chiSquare    +=    residuals    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	124	None	replace
171	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(value  /  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(value  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(value  /  residuals[i]);	  chiSquare    +=    residuals    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	124	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  residual  *  maxIterations  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	105	1	add
173	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  residual  *  maxIterations  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	105	1	add
174	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  double  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  double  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    double  chiSquare  +=  residual  *  maxIterations  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	105	None	add
175	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  remaining  *  maxIterations  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  remaining  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  remaining  *  maxIterations  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	105	None	add
176	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  residues[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  residual  *  maxIterations  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	105	None	add
177	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  residual  *  maxIterations  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  residual  *  maxIterations  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	105	None	add
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	66	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	66	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.pow(10.0,  -1);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  Math.pow(10.0,  -1);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
181	[BUG]  [BUGGY]  chiSquare  +=  Math.pow(10.0,  -1);  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.pow(10.0,  -1);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.pow(10.0,  -1);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
182	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  0);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  0);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	4	None	replace
183	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -2);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -2);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	4	None	replace
184	[BUG]  [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
185	[BUG]  [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
186	[BUG]  [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
187	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
188	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	14	1	add
190	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	14	1	add
191	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  double  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  double  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    double  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	14	None	add
192	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  remaining  *  Math.sqrt(i)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  remaining  *  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    chiSquare  +=  remaining  *  Math.sqrt(i)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	14	None	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    chiSquare  +=  Math.sqrt(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	14	1	add
194	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  Math.sqrt(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    chiSquare  +=  Math.sqrt(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	14	1	add
195	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  residue  *  Math.sqrt(i)/  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  chiSquare  +=  residue  *  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    chiSquare  +=  residue  *  Math.sqrt(i)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	14	None	add
196	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(i);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	compilable	  [FE]  AssertionFailedError  	110	1	replace
198	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	compilable	  [FE]  AssertionFailedError  	110	1	replace
199	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jF);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jF);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jF);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	110	None	replace
200	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jF,  residual);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jF,  residual);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jF,  residual);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	110	None	replace
201	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(ji);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  ji	110	None	replace
202	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remaining  *  remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remaining  *  remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remaining  *  remaining  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	43	None	replace
203	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  remaining  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	43	None	replace
204	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(ji)/  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(ji)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(ji)/  residuals[i];	  chiSquare    +=    residual    *    Math.cos(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	77	None	replace
205	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(period)/  residuals[i];  [CE]  cannot  find  symbol  period  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(period)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(period)/  residuals[i];	  chiSquare    +=    residual    *    Math.cos(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  period	77	None	replace
206	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.cos(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.cos(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.cos(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.cos(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	77	None	replace
207	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remaining  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remaining  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(remaining  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	41	None	replace
208	[BUG]  [BUGGY]  chiSquare  +=  remaining  *  Math.sqrt(remaining  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  remaining  *  Math.sqrt(remaining  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  remaining  *  Math.sqrt(remaining  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	41	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  jacobian.length  /  residuals[i];	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	89	1	replace
210	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian.length  /  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian.length  /  residuals[i];	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	89	1	replace
211	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian  /  residuals[i].length;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian  /  residuals[i].length;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian  /  residuals[i].length;	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	89	None	replace
212	[BUG]  [BUGGY]  chiSquare  +=  residual  *  residuals[i]  /  jacobian;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residuals[i]  /  jacobian;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  residuals[i]  /  jacobian;	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	89	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(i  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(ji    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	69	1	replace
214	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  /  residuals[i]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(i  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(ji    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	69	1	replace
215	[BUG]  [BUGGY]  chiSquare  +=  residual  *  residual  /  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residual  /  parameters[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  residual  /  parameters[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residuesWeights[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	102	None	replace
216	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue()  +  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue()  +  1;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i].doubleValue()  +  1;	  final    double    chiSquare    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	48	None	replace
217	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue()  +  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue()  +  2;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i].doubleValue()  +  2;	  final    double    chiSquare    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	48	None	replace
218	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue().doubleValue();  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue().doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i].doubleValue().doubleValue();	  final    double    chiSquare    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	48	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	19	1	replace
220	[BUG]  [BUGGY]  chiSquare  +=  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	19	1	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  cost  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	19	1	replace
222	[BUG]  [BUGGY]  chiSquare  +=  cost  *  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	19	1	replace
223	[BUG]  [BUGGY]  chiSquare  +=  ji  *  i  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  ji  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  ji  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	19	None	replace
224	[BUG]  [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
225	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
226	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
227	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i  +  1];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i  +  1];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i  +  1];	  final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
228	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i]  *  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i]  *  2;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i]  *  2;	  final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
229	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i]  /  2;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i]  /  2;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i]  /  2;	  final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i/  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i/  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	37	1	replace
231	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i/  residualsWeights[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i/  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i/  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	37	1	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
238	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    chiSquare  +=  residual  *  Math.log(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	75	1	add
240	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    chiSquare  +=  residual  *  Math.log(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	75	1	add
241	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  double  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  double  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    double  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	75	None	add
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    chiSquare  +=  Math.log(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	75	1	add
243	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  Math.log(i)/  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    chiSquare  +=  Math.log(i)/  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	75	1	add
244	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  remaining  *  Math.log(i)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  remaining  *  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    chiSquare  +=  remaining  *  Math.log(i)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	75	None	add
245	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  residue  *  Math.log(i)/  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  chiSquare  +=  residue  *  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    chiSquare  +=  residue  *  Math.log(i)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	75	None	add
246	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  2);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  2);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	23	None	replace
247	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(period,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(period,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(period,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	23	None	replace
248	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(result)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	87	None	replace
249	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(resistance)/  residuals[i];  [CE]  cannot  find  symbol  resistance  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(resistance)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(resistance)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  resistance	87	None	replace
250	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(residue)/  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(residue)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(residue)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  residue	87	None	replace
251	[BUG]  [BUGGY]  chiSquare  +=  period  *  i  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  period  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  period  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    period    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  period	92	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	compilable	  [FE]  AssertionFailedError  	35	1	add
253	[BUG]  [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	compilable	  [FE]  AssertionFailedError  	35	1	add
254	[BUG]  [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	35	None	add
255	[BUG]  [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	35	None	add
256	[BUG]  [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  remaining  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  remaining  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  remaining  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	35	None	add
257	[BUG]  [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residue  /  residualsWeights[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residue  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residue  /  residualsWeights[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	35	None	add
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
259	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
260	[BUG]  [BUGGY]  final  double  chiSquare  +=  Math.cos(remainder);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  +=  Math.cos(remainder);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  +=  Math.cos(remainder);	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
261	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sin(remainder);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sin(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sin(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
262	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows  *  i  *  maxIterations[i];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows  *  i  *  maxIterations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows  *  i  *  maxIterations[i];	  chiSquare    +=    residual    *    i    *    maxIterations[i];    	non-compiled	[CE]  array  required,  but  int  found	86	None	replace
263	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations[i];  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations[i];	  chiSquare    +=    residual    *    i    *    maxIterations[i];    	non-compiled	[CE]  array  required,  but  int  found	86	None	replace
264	[BUG]  [BUGGY]  chiSquare  +=  i  *  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  remaining  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  remaining  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	84	None	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  2  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  2  *  residual  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	84	1	replace
266	[BUG]  [BUGGY]  chiSquare  +=  2  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  2  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  2  *  residual  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	84	1	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	6	None	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	44	1	add
269	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	44	1	add
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	44	1	add
271	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	44	1	add
272	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(i  *  remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(i  *  remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  residual  *  Math.sqrt(i  *  remaining  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	44	None	add
273	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  remaining  *  Math.sqrt(i  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  remaining  *  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  remaining  *  Math.sqrt(i  *  residual  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	44	None	add
274	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  double  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  double  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    double  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);	  	non-compiled	[CE]  ';'  expected	44	None	add
275	[BUG]  [BUGGY]  chiSquare  +=  Math.log(remaining)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.log(remaining)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(remaining)/  residuals[i];	  chiSquare    +=    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	82	None	replace
276	[BUG]  [BUGGY]  chiSquare  +=  Math.log(result)/  jacobian[i];  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.log(result)/  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(result)/  jacobian[i];	  chiSquare    +=    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	82	None	replace
277	[BUG]  [BUGGY]  chiSquare  +=  Math.log(result)/  residual;  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.log(result)/  residual;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(result)/  residual;	  chiSquare    +=    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	82	None	replace
278	[BUG]  [BUGGY]  matic(remainder)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  matic(remainder)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	matic(remainder)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	131	None	replace
279	[BUG]  [BUGGY]  matic(remainder)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  matic(remainder)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	matic(remainder)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	131	None	replace
280	[BUG]  [BUGGY]  matic(remainder)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  matic(remainder)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	matic(remainder)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	131	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	71	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	71	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	71	None	replace
284	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows[i]  *  i;  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows[i]  *  i;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows[i]  *  i;	  chiSquare    +=    residual    *    i    *    rows[i];    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
285	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows[i];  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows[i];	  chiSquare    +=    residual    *    i    *    rows[i];    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
286	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji  *  rows[i];  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji  *  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji  *  rows[i];	  chiSquare    +=    residual    *    i    *    rows[i];    	non-compiled	[CE]  cannot  find  symbol  ji	50	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  1;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  /=  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  /=  residuals[i];	  result    /=    residuals[i];    	compilable	  [FE]  AssertionFailedError  	104	1	replace
292	[BUG]  [BUGGY]  chiSquare  /=  residuals[i];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  /=  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  /=  residuals[i];	  result    /=    residuals[i];    	compilable	  [FE]  AssertionFailedError  	104	1	replace
293	[BUG]  [BUGGY]  double  result  /=  residuals[i];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  result  /=  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  result  /=  residuals[i];	  result    /=    residuals[i];    	non-compiled	[CE]  ';'  expected	104	None	replace
294	[BUG]  [BUGGY]  result  *=  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  *=  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  *=  residuals[i];	  result    /=    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	104	None	replace
295	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	113	None	replace
296	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	113	None	replace
297	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	113	None	replace
298	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(remaining)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(remaining)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(remaining)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	11	None	replace
299	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(remainder)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
300	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  chiSquare);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
301	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  residual,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  residual,  cost);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  residual,  cost);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
302	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  result);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  result);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  result);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
303	[BUG]  [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder  *  residual);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder  *  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  +=  Math.sqrt(remainder  *  residual);	  final    double    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  ';'  expected	34	None	replace
304	[BUG]  [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder  *  2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder  *  2);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  +=  Math.sqrt(remainder  *  2);	  final    double    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  ';'  expected	34	None	replace
305	[BUG]  [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  Math.sqrt(remainder);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  Math.sqrt(remainder);	  final    double    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	34	None	replace
306	[BUG]  [BUGGY]  final  double  chiSquare  +=  Math.sin(remainder);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  +=  Math.sin(remainder);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  +=  Math.sin(remainder);	  final    double    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  ';'  expected	34	None	replace
307	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
308	[BUG]  [BUGGY]  luate(resistance,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(resistance,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(resistance,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
309	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
310	[BUG]  [BUGGY]  luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
311	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(remainder  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	135	None	replace
312	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(redefinition  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  redefinition  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(redefinition  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(redefinition  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  redefinition	135	None	replace
313	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(total  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  total  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(total  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(total  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  total	135	None	replace
314	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	8	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	8	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	8	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	8	None	replace
318	[BUG]  [BUGGY]  chiSquare  +=  result  *  Math.log(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  result  *  Math.log(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  result  *  Math.log(result)/  residuals[i];	  chiSquare    +=    cost    *    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	79	None	replace
319	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  +  1;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  +  1;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i].doubleValue()  +  1;	  final    double    residual    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	49	None	replace
320	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  *  chiSquare;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  *  chiSquare;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i].doubleValue()  *  chiSquare;	  final    double    residual    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	49	None	replace
321	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  /  2;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  /  2;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i].doubleValue()  /  2;	  final    double    residual    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	49	None	replace
322	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji.length  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji.length  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji.length  *  residuals[i];	  chiSquare    +=    residual    *    js.length    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	137	None	replace
323	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows.length  *  js[i];  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows.length  *  js[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows.length  *  js[i];	  chiSquare    +=    residual    *    js.length    *    residuals[i];    	non-compiled	[CE]  int  cannot  be  dereferenced	137	None	replace
324	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i],  cost);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i],  cost);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i],  cost);	  chiSquare    +=    residual    *    Math.sqrt(jacobian    /    residuals[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	101	None	replace
325	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(jacobian  /  residuals[i]);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(jacobian  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(jacobian  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(jacobian    /    residuals[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	101	None	replace
326	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian,  rows  *  residuals[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian,  rows  *  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jacobian,  rows  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(jacobian    /    residuals[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	101	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
330	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remaining);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
331	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(redefinition);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(redefinition);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	60	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	60	None	replace
334	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
335	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
336	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
337	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  remainings[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    residual    *    i    *    remainings[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	20	None	replace
338	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remaining,  residual);	  double    chiSquare    =    Math.sqrt(period);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	116	None	replace
339	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
340	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
341	[BUG]  [BUGGY]  luate(resistance,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(resistance,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(resistance,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
342	[BUG]  [BUGGY]  luate(resistances,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(resistances,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(resistances,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
344	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
346	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
347	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(rows  *  remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  residual  *  Math.sqrt(rows  *  remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  residual  *  Math.sqrt(rows  *  remaining  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	42	None	add
348	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  remaining  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  remaining  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  remaining  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	42	None	add
349	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  double  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  double  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    double  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  	non-compiled	[CE]  ';'  expected	42	None	add
350	[BUG]  [BUGGY]  chiSquare  +=  remaining  *  i  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  remaining  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  remaining  *  i  /  residuals[i];	  chiSquare    +=    residual    *    i    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	57	None	replace
351	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
352	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
353	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  *  rows  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	133	1	replace
355	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  rows  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	133	1	replace
356	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  columns  *  residuals[i];  [CE]  cannot  find  symbol  columns  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  columns  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  columns  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  columns	133	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  *  2  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	133	1	replace
358	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  2  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	133	1	replace
359	[BUG]  [BUGGY]  final  double  residual  =  chiSquares[i];  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  chiSquares[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  chiSquares[i];	  final    double    residual    =    residuals[i];    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	62	None	replace
360	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  *  chiSquare;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i]  *  chiSquare;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i]  *  chiSquare;	  final    double    residual    =    residuals[i];    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	62	None	replace
361	[BUG]  [BUGGY]  final  double  residual  =  this.results[i];  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  this.results[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  this.results[i];	  final    double    residual    =    residuals[i];    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	62	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxEvaluations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  maxEvaluations  *  residuals[i];	  chiSquare    +=    residual    *    maxIterations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	106	1	replace
363	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxEvaluations  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxEvaluations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxEvaluations  *  residuals[i];	  chiSquare    +=    residual    *    maxIterations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	106	1	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  2  *  residuals[i];	  chiSquare    +=    residual    *    maxIterations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	106	1	replace
365	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  *  residuals[i];	  chiSquare    +=    residual    *    maxIterations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	106	1	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	64	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	64	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i;	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
369	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i;	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
370	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji  *  2;  [CE]  cannot  find  symbol  ji  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji  *  2;	  chiSquare    +=    residual    *    i    *    2;    	non-compiled	[CE]  cannot  find  symbol  ji	52	None	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  4;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  *  4;	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
372	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  4;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  4;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  4;	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
373	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  i  *  residuals[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    double    chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  ';'  expected	18	None	replace
374	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  i  *  remainings[i];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  i  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  i  *  remainings[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    double    chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  ';'  expected	18	None	replace
375	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(	  result    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	114	None	replace
376	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  result    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	114	None	replace
377	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0	  result    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	114	None	replace
378	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  /  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  /  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  /  jacobian[i];	  chiSquare    +=    residual    *    jF    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	58	None	replace
379	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  jF  /  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  jF  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  jF  /  residuals[i];	  chiSquare    +=    residual    *    jF    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	58	None	replace
380	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF,  residuals[i];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF,  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF,  residuals[i];	  chiSquare    +=    residual    *    jF    /    residuals[i];    	non-compiled	[CE]  ';'  expected	58	None	replace
381	[BUG]  [BUGGY]  chiSquare  +=  remaining  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  remaining  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  remaining  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	70	None	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  residual  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  residual  *  i  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	56	1	add
383	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  residual  *  i  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  residual  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  residual  *  i  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	56	1	add
384	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  double  chiSquare  +=  residual  *  i  /  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  double  chiSquare  +=  residual  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    double  chiSquare  +=  residual  *  i  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	56	None	add
385	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  remaining  *  i  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  remaining  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  remaining  *  i  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	56	None	add
386	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  residue  *  i  /  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  residue  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  residue  *  i  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	56	None	add
387	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  (remaining  *  i  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  (remaining  *  i  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  (remaining  *  i  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	56	None	add
388	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  *  jiSquares[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  *  jiSquares[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  *  jiSquares[i];	  chiSquare    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
389	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  *  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  *  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  *  jacobian[i];	  chiSquare    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
390	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  *  ji,  residuals[i];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  *  ji,  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  *  ji,  residuals[i];	  chiSquare    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  ';'  expected	54	None	replace
391	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  3);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  3);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  3);	  double    chiSquare    =    Math.sqrt(remainder    *    2);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	108	None	replace
392	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  2  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  2  +  1);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  2  +  1);	  double    chiSquare    =    Math.sqrt(remainder    *    2);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	108	None	replace
393	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  2  -  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  2  -  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  2  -  residual);	  double    chiSquare    =    Math.sqrt(remainder    *    2);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	108	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  3  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  3  /  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
395	[BUG]  [BUGGY]  chiSquare  +=  residual  *  3  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  3  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  3  /  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  4  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  4  /  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
397	[BUG]  [BUGGY]  chiSquare  +=  residual  *  4  /  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  4  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  4  /  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  1  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  1  /  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
399	[BUG]  [BUGGY]  chiSquare  +=  residual  *  1  /  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  1  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  1  /  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
400	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  *(remaining  <  <  1)/  residuals[i];  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  *(remaining  <  <  1)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  *(remaining  <  <  1)/  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
401	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	81	None	replace
402	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(result  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(result  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(result  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(result    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	93	None	replace
403	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
404	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
405	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  ji);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  ji);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remaining,  ji);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	109	None	replace
406	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  ji);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  ji);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  ji);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	109	None	replace
407	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remaining,  i);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remaining,  i);	  double    chiSquare    =    Math.sqrt(ji,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	109	None	replace
408	[BUG]  [BUGGY]  luate(resistances,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(resistances,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(resistances,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	128	None	replace
409	[BUG]  [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	128	None	replace
410	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jiSquare)/  residuals[i];  [CE]  cannot  find  symbol  jiSquare  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jiSquare)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jiSquare)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(jiResistance)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jiSquare	88	None	replace
411	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  jacobian[i];  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder)/  jacobian[i];	  chiSquare    +=    residual    *    Math.sqrt(jiResistance)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	88	None	replace
412	[BUG]  [BUGGY]  chiSquare  +=  remaining  *  i  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  remaining  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  remaining  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	17	None	replace
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  residual  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    i    *    2;    chiSquare  +=  residual  *  i  *  2;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
414	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  residual  *  i  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  residual  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    2;    chiSquare  +=  residual  *  i  *  2;	  	compilable	  [FE]  AssertionFailedError  	51	1	add
415	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  double  chiSquare  +=  residual  *  i  *  2;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  double  chiSquare  +=  residual  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    2;    double  chiSquare  +=  residual  *  i  *  2;	  	non-compiled	[CE]  ';'  expected	51	None	add
416	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  remaining  *  i  *  2;  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  remaining  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    2;    chiSquare  +=  remaining  *  i  *  2;	  	non-compiled	[CE]  cannot  find  symbol  remaining	51	None	add
417	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  residue  *  i  *  2;  [CE]  cannot  find  symbol  residue  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  residue  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    2;    chiSquare  +=  residue  *  i  *  2;	  	non-compiled	[CE]  cannot  find  symbol  residue	51	None	add
418	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  period  *  i  *  2;  [CE]  cannot  find  symbol  period  [FE]            AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  chiSquare  +=  period  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    2;    chiSquare  +=  period  *  i  *  2;	  	non-compiled	[CE]  cannot  find  symbol  period	51	None	add
419	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  <  =  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
420	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  remaining  /  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  ';'  expected	40	None	replace
421	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	61	None	replace
422	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  residual  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	61	None	replace
423	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  residual  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	61	None	replace
424	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  i);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  i);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	107	None	replace
425	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i.length  *  residuals[i];  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i.length  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i.length  *  residuals[i];	  chiSquare    +=    residual    *    js.length    *    residuals[i];    	non-compiled	[CE]  int  cannot  be  dereferenced	137	None	replace
426	[BUG]  [BUGGY]  chiSquare  +=  residual  *  remaining.length  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  remaining.length  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  remaining.length  *  residuals[i];	  chiSquare    +=    residual    *    js.length    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	137	None	replace
427	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
429	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
430	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(result);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(result);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(result);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
431	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(resistance);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(resistance);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(resistance);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
432	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  jacobian[i];	  chiSquare    +=    residual    *    i    *    parameters[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	85	None	replace
433	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	6	None	replace
434	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remainder);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  remainder	110	None	replace
435	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(period);  [CE]  cannot  find  symbol  period  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(period);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(period);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  period	110	None	replace
436	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(remainder  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	135	None	replace
437	[BUG]  [BUGGY]  chiSquare  +=  coefficient  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  coefficient  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  coefficient  *  Math.sqrt(remainder  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  coefficient  *  Math.sqrt(remainder  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	135	None	replace
438	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(variant  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(variant  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(variant  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	135	None	replace
439	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(ji)/  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(ji)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(ji)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	12	None	replace
440	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jiResistance)/  residuals[i];  [CE]  cannot  find  symbol  jiResistance  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jiResistance)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(jiResistance)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jiResistance	12	None	replace
441	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jiRemaining)/  residuals[i];  [CE]  cannot  find  symbol  jiRemaining  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jiRemaining)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(jiRemaining)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jiRemaining	12	None	replace
442	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
443	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
444	[BUG]  [BUGGY]  residual  /=  residuals[i];  [CE]  cannot  assign  a  value  to  final  variable  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  residual  /=  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	residual  /=  residuals[i];	  result    /=    residuals[i];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  residual	104	None	replace
445	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations  *  parameters[i];	  chiSquare    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	29	None	replace
446	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  +  2;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  +  2;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i].doubleValue()  +  2;	  final    double    residual    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	49	None	replace
447	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(remainder)/  residuals[i];  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(remainder)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remainder)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	132	None	replace
448	[BUG]  [BUGGY]  chiSquare  +=  coefficient  *  Math.sqrt(remainder)/  residuals[i];  [CE]  cannot  find  symbol  coefficient  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  coefficient  *  Math.sqrt(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  coefficient  *  Math.sqrt(remainder)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remainder)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  coefficient	132	None	replace
449	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  parameters[i];  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder)/  parameters[i];	  chiSquare    +=    residual    *    Math.sqrt(ji)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	13	None	replace
450	[BUG]  [BUGGY]  chiSquare  +=  coefficient  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  coefficient  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  coefficient  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  coefficient  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	70	None	replace
451	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  /  residuals[i]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
452	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.sqrt(remainder  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.sqrt(remainder  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	43	None	replace
453	[BUG]  [BUGGY]  chiSquare  +=  residual  *  MAX_RECORD  /  residuals[i];  [CE]  cannot  find  symbol  MAX_RECORD  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  MAX_RECORD  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  MAX_RECORD  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    REGULAR    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  MAX_RECORD	126	None	replace
454	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	71	None	replace
455	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(result  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(result  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(result  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(value    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	95	None	replace
456	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  maxEvaluations[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  /  maxEvaluations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  maxEvaluations[i];	  chiSquare    +=    residual    *    /    jacobianEvaluations[i];    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
457	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  rows[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  /  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  rows[i];	  chiSquare    +=    residual    *    /    jacobianEvaluations[i];    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
458	[BUG]  [BUGGY]  chiSquare  +=  gram  *  residual  /  residuals[i];  [CE]  cannot  find  symbol  gram  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  gram  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  gram  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  gram	37	None	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  i  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	37	1	replace
460	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  /  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	37	1	replace
461	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  /  residuals[i];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  ';'  expected	40	None	replace
462	[BUG]  [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residuals[i];  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residuals[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  ';'  expected	40	None	replace
463	[BUG]  [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  double  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  ';'  expected	40	None	replace
464	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  double  chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  double  chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    double  chiSquare  +=  Math.sqrt(rows  *  residual  /  residuals[i]);	  	non-compiled	[CE]  ';'  expected	42	None	add
465	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(remainder  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(remainder  *  Math.sqrt(rows  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(remainder  *  Math.sqrt(rows  *  residual  /  residuals[i]);	  	non-compiled	[CE]  ')'  expected	42	None	add
466	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(rows  *  remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(rows  *  remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(rows  *  remaining  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	42	None	add
467	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  i  *  parameters[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  i  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  i  *  parameters[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    double    chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  ';'  expected	18	None	replace
468	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  *  parameters[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  *  parameters[i];	  chiSquare    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
469	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  *  jacobianEvaluations[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  *  jacobianEvaluations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  *  jacobianEvaluations[i];	  chiSquare    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residuals[i];  chiSquare  +=  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  i  *  residuals[i];  chiSquare  +=  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	19	1	replace
471	[BUG]  [BUGGY]  chiSquare  +=  i  *  residuals[i];  chiSquare  +=  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residuals[i];  chiSquare  +=  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residuals[i];  chiSquare  +=  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    remaining    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	19	1	replace
472	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  >>  ')'  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  >>  ')'  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  >>  ')'	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
474	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  >>  ')'  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  >>  ')'  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  >>  ')'	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.pow(10,  i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.pow(10,  i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
476	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.pow(10,  i)/  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.pow(10,  i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.pow(10,  i)/  residuals[i];	  chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    	compilable	  [FE]  AssertionFailedError  	76	1	replace
477	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jiSquare  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  jiSquare  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jiSquare  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jiSquare  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(ji    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  jiSquare	46	None	replace
478	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  double  chiSquare  +=  Math.log(i)/  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  double  chiSquare  +=  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    double  chiSquare  +=  Math.log(i)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	75	None	add
479	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  double  chiSquare  =  Math.log(i)/  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(i)/  residuals[i];  double  chiSquare  =  Math.log(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.log(i)/    residuals[i];    double  chiSquare  =  Math.log(i)/  residuals[i];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	75	None	add
480	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  chiSquare  *  parameters[i];	  chiSquare    +=    residual    *    chiSquare    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	119	None	replace
481	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  double  chiSquare  =  residual  *  chiSquare  /  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  double  chiSquare  =  residual  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    double  chiSquare  =  residual  *  chiSquare  /  residuals[i];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	118	None	add
482	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residual  *  chiSquare  /  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  residual  *  chiSquare  /  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  residual  *  chiSquare  /  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	118	None	add
483	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  double  chiSquare  +=  Math.sqrt(i)/  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  double  chiSquare  +=  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    double  chiSquare  +=  Math.sqrt(i)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	14	None	add
484	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  double  chiSquare  =  Math.sqrt(i)/  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i)/  residuals[i];  double  chiSquare  =  Math.sqrt(i)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    double  chiSquare  =  Math.sqrt(i)/  residuals[i];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	14	None	add
485	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
486	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
487	[BUG]  [BUGGY]  chiSquare  +=  result  *  Math.sqrt(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  result  *  Math.sqrt(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  result  *  Math.sqrt(result)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	87	None	replace
488	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  double  chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  double  chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    double  chiSquare  +=  Math.sqrt(i  *  residual  /  residuals[i]);	  	non-compiled	[CE]  ';'  expected	44	None	add
489	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  remaining  /  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(i  *  remaining  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	44	None	add
490	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  Remaining  /  residuals[i]);  [CE]  cannot  find  symbol  Remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(i  *  residual  /  residuals[i]);  chiSquare  +=  Math.sqrt(i  *  Remaining  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    chiSquare  +=  Math.sqrt(i  *  Remaining  /  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  Remaining	44	None	add
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  rows  *  residuals[i];	  chiSquare    +=    residual    *    maxIterations    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	112	1	replace
492	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows  *  residuals[i];	  chiSquare    +=    residual    *    maxIterations    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	112	1	replace
493	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	61	None	replace
494	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	61	None	replace
495	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	64	None	replace
496	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	64	None	replace
497	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	64	None	replace
498	[BUG]  [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	                chiSquare        +=        residual        *        residual        /        residualsWeights[i];        chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare  +=  residual  *  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
499	[BUG]  [BUGGY]  chiSquare  +=  residual  *  max  /  residuals[i];  [CE]  cannot  find  symbol  max  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  max  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  max  /  residuals[i];	  chiSquare    +=    residual    *    jf    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  max	90	None	replace
500	[BUG]  [BUGGY]  luate(variables,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(variables,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(variables,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
501	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
502	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  red  *  2  /  residuals[i];  [CE]  cannot  find  symbol  red  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  /  residuals[i];  chiSquare  +=  red  *  2  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    2    /    residuals[i];    chiSquare  +=  red  *  2  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  red	27	None	add
503	[BUG]  [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  3)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
504	[BUG]  [BUGGY]  remainder  >  9)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  9)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  9)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
505	[BUG]  [BUGGY]  result  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
506	[BUG]  [BUGGY]  result  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	99	None	replace
507	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(residue  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(residue  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(residue    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	94	None	replace
508	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jacobian  *  residual  /  residuals[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jacobian  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(jacobian  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(residue    *    residual    /    residuals[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	94	None	replace
509	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(ji  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(ji  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(ji  *  residual  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(residue    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	94	None	replace
510	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2;  long  chiSquare  +=  residual  *  i  *  2;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2;  long  chiSquare  +=  residual  *  i  *  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    *    2;    long  chiSquare  +=  residual  *  i  *  2;	  	non-compiled	[CE]  ';'  expected	51	None	add
511	[BUG]  [BUGGY]  chiSquare  +=  residual  *(i  *  rows[i]);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(i  *  rows[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *(i  *  rows[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	30	None	replace
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(rows  *  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *(rows  *  residuals[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
513	[BUG]  [BUGGY]  chiSquare  +=  residual  *(rows  *  residuals[i]);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(rows  *  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *(rows  *  residuals[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	compilable	  [FE]  AssertionFailedError  	30	1	replace
514	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	9	None	replace
515	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	9	None	replace
516	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  /  2);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  /  2);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  /  2);	  double    chiSquare    =    Math.sqrt(remainder    *    2);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	108	None	replace
517	[BUG]  [BUGGY]  if(remaining  <  =  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  <  =  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  <  =  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
518	[BUG]  [BUGGY]  double  result  =  residuals[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  result  =  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  result  =  residuals[i].doubleValue();	  result    /=    residuals[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
519	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
520	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
521	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sin(remainder);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sin(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sin(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
522	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
523	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
524	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  0);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder,  0);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder,  0);	  double    chiSquare    =    Math.sqrt(remainder,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	24	None	replace
525	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji  *  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(ji  *  residuals[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(ji  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	141	None	replace
526	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value  *  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value  *  residuals[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(value  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	141	None	replace
527	[BUG]  [BUGGY]  final  double  residual  =  ji.remainders[i];  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  ji.remainders[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  ji.remainders[i];	  final    double    residual    =    residuals[i];    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	62	None	replace
528	[BUG]  [BUGGY]  final  double  residual  =  residuals[i]  -  1;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i]  -  1;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i]  -  1;	  final    double    residual    =    residuals[i];    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	62	None	replace
529	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  double  chiSquare  =  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  double  chiSquare  =  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    double  chiSquare  =  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	16	None	add
530	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian[i]  /  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian[i]  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian[i]  /  residuals[i];	  chiSquare    +=    residual    *    js[i]    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
531	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji.remainders[i]  /  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji.remainders[i]  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji.remainders[i]  /  residuals[i];	  chiSquare    +=    residual    *    js[i]    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	59	None	replace
532	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  ji  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  ji  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  ji  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	45	None	replace
533	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  i  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder  *  i  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder  *  i  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(i    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	45	None	replace
534	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	129	None	replace
535	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	129	None	replace
536	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
537	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
538	[BUG]  [BUGGY]  chiSquare  +=  i  *  residuals[i];  chiSquare  +=  period  *  i  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residuals[i];  chiSquare  +=  period  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residuals[i];  chiSquare  +=  period  *  i  *  residuals[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    period    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  period	92	None	replace
539	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
540	[BUG]  [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
541	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(remaining)/  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(remaining)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  Math.sqrt(remaining)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	10	None	add
542	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  chiSquare  +=  Math.sqrt(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    chiSquare  +=  Math.sqrt(remainder)/  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remainder	10	None	add
543	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  Math.sqrt(remaining)/  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  Math.sqrt(remaining)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    double  chiSquare  +=  Math.sqrt(remaining)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	10	None	add
544	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  Math.sqrt(remainder)/  residuals[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  Math.sqrt(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    double  chiSquare  +=  Math.sqrt(remainder)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	10	None	add
545	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residual  *  parameters[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	84	None	replace
546	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residual  *  remainings[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	84	None	replace
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	84	1	replace
548	[BUG]  [BUGGY]  chiSquare  +=  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	84	1	replace
549	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
550	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  i  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  i  *  i  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	56	1	add
552	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  i  *  i  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  i  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  i  *  i  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	56	1	add
553	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  double  chiSquare  +=  i  *  i  /  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  double  chiSquare  +=  i  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    double  chiSquare  +=  i  *  i  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	56	None	add
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.remainders.length;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	60	None	replace
555	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i],  coefficient);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i],  coefficient);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(jacobian  /  residuals[i],  coefficient);	  chiSquare    +=    residual    *    Math.sqrt(jacobian    /    residuals[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	101	None	replace
556	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  residual;  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  residual;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder)/  residual;	  chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
557	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.ceil(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.ceil(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.ceil(remainder)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	78	None	replace
558	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  long  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  long  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    long  chiSquare  +=  residual  *  maxIterations  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	105	None	add
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  maxIterations  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	105	1	add
560	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  maxIterations  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  maxIterations  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	105	1	add
561	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
562	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
563	[BUG]  [BUGGY]  final  double  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	130	None	replace
564	[BUG]  [BUGGY]  chiSquare  +=  residual  *  /  residues[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  /  residues[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  /  residues[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residuesWeights[i];    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
565	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.fields;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.fields;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.fields;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    fields;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	67	None	replace
566	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remainder,  chiSquare);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remainder,  chiSquare);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(remainder,  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	7	None	replace
567	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
568	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
569	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
570	[BUG]  [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	36	None	replace
571	[BUG]  [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  else  {  throw  new  IllegalArgumentException( " ");  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	36	None	replace
572	[BUG]  [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  double  *  residual  /  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  double  *  residual  /  residualsWeights[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  chiSquare  +=  double  *  residual  /  residualsWeights[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	36	None	replace
573	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  /  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  /  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  /  residual);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
574	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  i);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  i);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  i);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
575	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  ji);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(remainder  *  ji);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(remainder  *  ji);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
576	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows[i  *  i];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows[i  *  i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows[i  *  i];	  chiSquare    +=    residual    *    i    *    rows[i];    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
577	[BUG]  [BUGGY]  chiSquare  +=  gram  *  residual  /  residualsWeights[i];  [CE]  cannot  find  symbol  gram  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  gram  *  residual  /  residualsWeights[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  gram  *  residual  /  residualsWeights[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residue    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  gram	39	None	replace
578	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  residuals[0];  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(remainder)/  residuals[0];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(remainder)/  residuals[0];	  chiSquare    +=    residual    *    Math.sqrt(i)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	15	None	replace
579	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  maxEvaluations[i];  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  maxEvaluations[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  maxEvaluations[i];	  chiSquare    +=    residual    *    i    *    maxIterations[i];    	non-compiled	[CE]  array  required,  but  int  found	86	None	replace
580	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
581	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	5	None	replace
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  *  maxIterations  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	133	1	replace
583	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  maxIterations  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  maxIterations  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	133	1	replace
584	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  parameters[i];  [CE]  cannot  find  symbol  row  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  row  *  parameters[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  row	133	None	replace
585	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.cos(value)/  residuals[i];  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.cos(value)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.cos(value)/  residuals[i];	  chiSquare    +=    residual    *    Math.cos(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  value	77	None	replace
586	[BUG]  [BUGGY]  double  residual  =  residuals[i].doubleValue();  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  residual  =  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  residual  =  residuals[i].doubleValue();	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	131	None	replace
587	[BUG]  [BUGGY]  double  residual  =  residual.doubleValue();  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  residual  =  residual.doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  residual  =  residual.doubleValue();	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	131	None	replace
588	[BUG]  [BUGGY]  double  residual  =  residuals[i];  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  residual  =  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  residual  =  residuals[i];	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	131	None	replace
589	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  double  chiSquare  =  residual  *  maxIterations  /  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  double  chiSquare  =  residual  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    double  chiSquare  =  residual  *  maxIterations  /  residuals[i];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	111	None	add
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  maxIterations  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	111	1	add
591	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  maxIterations  /  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  maxIterations  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	111	1	add
592	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
593	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
594	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	8	None	replace
595	[BUG]  [BUGGY]  chiSquare  +=  residual  *  2  *  rows[i];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  2  *  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  2  *  rows[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	28	None	replace
596	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(residue  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(residue  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(residue  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(variant    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	123	None	replace
597	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(residule  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(residule  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(residule  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(variant    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	123	None	replace
598	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(result  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(result  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(result  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(variant    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	123	None	replace
599	[BUG]  [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remaining,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	128	None	replace
600	[BUG]  [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(result,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	128	None	replace
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2  +  1;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  i  *  2  +  1;	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
602	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  2  +  1;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  2  +  1;	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
603	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();	  result    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	114	None	replace
604	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  maxIterations  *  remainings[i];	  chiSquare    +=    residual    *    maxIterations    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	106	None	replace
605	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i]  -  1;  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i]  -  1;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i]  -  1;	  final    double    chiSquare    =    residuals[i];    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	65	None	replace
606	[BUG]  [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder  *  3);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  +=  Math.sqrt(remainder  *  3);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  +=  Math.sqrt(remainder  *  3);	  final    double    chiSquare    +=    Math.sqrt(remainder);    	non-compiled	[CE]  ';'  expected	34	None	replace
607	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF  /  parameters[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF  /  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF  /  parameters[i];	  chiSquare    +=    residual    *    jF    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	58	None	replace
608	[BUG]  [BUGGY]  chiSquare  +=  Math.log(result)/  chiSquare;  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.log(result)/  chiSquare;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(result)/  chiSquare;	  chiSquare    +=    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	82	None	replace
609	[BUG]  [BUGGY]  chiSquare  +=  Math.log(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.log(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(remainder)/  residuals[i];	  chiSquare    +=    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	82	None	replace
610	[BUG]  [BUGGY]  chiSquare  +=  Math.log(result)/  2;  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.log(result)/  2;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.log(result)/  2;	  chiSquare    +=    Math.log(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	82	None	replace
611	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows.length  /  residuals[i];  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows.length  /  residuals[i];	  chiSquare    +=    residual    *    js.length    /    residuals[i];    	non-compiled	[CE]  int  cannot  be  dereferenced	120	None	replace
612	[BUG]  [BUGGY]  chiSquare  +=  residual  *  row  *  residuals[i];  [CE]  cannot  find  symbol  row  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  row  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  row  *  residuals[i];	  chiSquare    +=    residual    *    js.length    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  row	120	None	replace
613	[BUG]  [BUGGY]  chiSquare  +=  residual  /  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  /  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  /  parameters[i];	  chiSquare    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	29	None	replace
614	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
615	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
616	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(1.0.0,  -1);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(1.0.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(1.0.0,  -1);  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ')'  expected	99	None	replace
617	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  remainings[i];  [CE]  cannot  find  symbol  row  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  remainings[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  row  *  remainings[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    residual    *    i    *    remainings[i];    	non-compiled	[CE]  cannot  find  symbol  row	20	None	replace
618	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	5	None	replace
619	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	5	None	replace
620	[BUG]  [BUGGY]  chiSquare  +=  value  *  Math.sqrt(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  value  *  Math.sqrt(remainder  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  value  *  Math.sqrt(remainder  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(value    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	68	None	replace
621	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	130	None	replace
622	[BUG]  [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -remainder);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -remainder);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -remainder);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	4	None	replace
623	[BUG]  [BUGGY]  chiSquare  +=  residual  *  ji  *  residual  /  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  ji  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  ji  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWidths[i];    	non-compiled	[CE]  cannot  find  symbol  ji	127	None	replace
624	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  residues[i];  [CE]  cannot  find  symbol  row  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  row  *  residues[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  row  *  residues[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare    +=    residual    *    i    *    residues[i];    	non-compiled	[CE]  cannot  find  symbol  row	21	None	replace
625	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian[i];	  chiSquare    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	26	None	replace
626	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian[i].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian[i].doubleValue();  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian[i].doubleValue();	  chiSquare    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
627	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(variant  /  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.sqrt(variant  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.sqrt(variant  /  residuals[i]);	  chiSquare    +=    residuals    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	124	None	replace
628	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  remainder    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
629	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  jF);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  jF);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(variant,  jF);	  double    chiSquare    =    Math.sqrt(jF,    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	107	None	replace
630	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(variant  *  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(variant  *  residuals[i]);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(variant  *  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	141	None	replace
631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  cost  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  cost  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	37	1	replace
632	[BUG]  [BUGGY]  chiSquare  +=  residual  *  cost  /  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  cost  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  cost  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    remaining    /    residualsWeights[i];    	compilable	  [FE]  AssertionFailedError  	37	1	replace
633	[BUG]  [BUGGY]  chiSquare  +=  Math.min(result,  chiSquare);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.min(result,  chiSquare);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.min(result,  chiSquare);	  final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
634	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  Double  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  Double  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    Double  chiSquare  +=  residual  *  maxIterations  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	111	None	add
635	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  period  *  maxIterations  /  residuals[i];  [CE]  cannot  find  symbol  period  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  /  residuals[i];  chiSquare  +=  period  *  maxIterations  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    /    residuals[i];    chiSquare  +=  period  *  maxIterations  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	111	None	add
636	[BUG]  [BUGGY]  chiSquare  +=  cost  *(residue  *  rows[i]);  [CE]  cannot  find  symbol  residue  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *(residue  *  rows[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *(residue  *  rows[i]);	  chiSquare    +=    residual    *(remaining    *    rows[i]);    	non-compiled	[CE]  cannot  find  symbol  residue	30	None	replace
637	[BUG]  [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
638	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    	non-compiled	[CE]  ';'  expected	139	None	replace
639	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.ceil(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.ceil(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.ceil(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.ceil(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	78	None	replace
640	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
641	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
642	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  ')'  expected	74	None	replace
643	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder  *  ji  /  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remainder  *  ji  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remainder  *  ji  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	41	None	replace
644	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remaining  *  /  residuals[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(remaining  *  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(remaining  *  /  residuals[i]);	  chiSquare    +=    cost    *    Math.sqrt(remaining    *    residual    /    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
645	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  i  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(rows  *  i  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
646	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  i  /  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  *  i  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(rows  *  i  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(rows    *    residual    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
647	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chi	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chi    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
648	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(1.0,  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(1.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(1.0,	  result    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	114	None	replace
649	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  table  *  residuals[i];  [CE]  cannot  find  symbol  table  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  table  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  rows  *  table  *  residuals[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  table	133	None	replace
650	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  *  rows  *  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  i  *  rows  *  parameters[i];	  chiSquare    +=    residual    *    i    *    row    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	133	None	replace
651	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jiSquare  /  residuals[i];  [CE]  cannot  find  symbol  jiSquare  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jiSquare  /  residuals[i];	  chiSquare    +=    residual    *    chiSquare    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jiSquare	119	None	replace
652	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  parameters[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  chiSquare  /  parameters[i];	  chiSquare    +=    residual    *    chiSquare    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	119	None	replace
653	[BUG]  [BUGGY]  chiSquare  +=  residual  *  cstr/  residuals[i];  [CE]  cannot  find  symbol  cstr  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  cstr/  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  cstr/  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residue    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  cstr	39	None	replace
654	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.min(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.min(result,    chiSquare);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	9	None	replace
655	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(value);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(value);	  chiSquare    +=    residual    *    Math.sqrt(remainder);    	non-compiled	[CE]  cannot  find  symbol  value	110	None	replace
656	[BUG]  [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
657	[BUG]  [BUGGY]  luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(remainder,  i)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
658	[BUG]  [BUGGY]  chiSquare  +=  residual  *  sum  *  residuals[i];  [CE]  cannot  find  symbol  sum  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  sum  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  sum  *  residuals[i];	  chiSquare    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  sum	55	None	replace
659	[BUG]  [BUGGY]  chiSquare  +=  ji  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  ji  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  ji  *  residuals[i];	  chiSquare    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	55	None	replace
660	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
661	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  not  a  statement	113	None	replace
662	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows.length  *  residuals[i];  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows.length  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows.length  *  residuals[i];	  chiSquare    +=    residual    *    js.length    *    residuals[i];    	non-compiled	[CE]  int  cannot  be  dereferenced	137	None	replace
663	[BUG]  [BUGGY]  if(remaining  >  1.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  1.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  1.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
664	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  residual  =  residuals[i];  }	  if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
665	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  i  *  rows[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  i  *  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  i  *  rows[i];	  chiSquare    +=    residual    *    i    *    residuals[i];    double    chiSquare    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  ';'  expected	18	None	replace
666	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.sqrt(rows  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(ji    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	69	1	replace
667	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  /  residuals[i]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(rows  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(ji    /    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	69	1	replace
668	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  Double  chiSquare  +=  i  *  residual  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *  residuals[i];  Double  chiSquare  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    i    *    residual    *    residuals[i];    Double  chiSquare  +=  i  *  residual  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	83	None	add
669	[BUG]  [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	134	None	replace
670	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  jacobian  /  residuals[i];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  jacobian  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  jacobian  /  residuals[i];	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	non-compiled	[CE]  ';'  expected	89	None	replace
671	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  jacobian  /  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  jacobian  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  jacobian  /  residuals[i];	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	89	None	replace
672	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jacobian  /  residuals[i],  cost;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jacobian  /  residuals[i],  cost;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jacobian  /  residuals[i],  cost;	  chiSquare    +=    residual    *    jacobian    /    residuals[i];    	non-compiled	[CE]  ';'  expected	89	None	replace
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  rows  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  rows  *  residual  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	84	1	replace
674	[BUG]  [BUGGY]  chiSquare  +=  rows  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  rows  *  residual  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  rows  *  residual  *  residuals[i];	  chiSquare    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	84	1	replace
675	[BUG]  [BUGGY]  chiSquare  +=  i  *  residual  *(remainder  *  rows[i]);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  i  *  residual  *(remainder  *  rows[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  i  *  residual  *(remainder  *  rows[i]);	  chiSquare    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	84	None	replace
676	[BUG]  [BUGGY]  chiSquare  +=  Math.sqrt(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  Math.sqrt(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  Math.sqrt(result)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	87	None	replace
677	[BUG]  [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  period  *  maxIterations  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  maxIterations  *  residuals[i];  chiSquare  +=  period  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    maxIterations    *    residuals[i];    chiSquare  +=  period  *  maxIterations  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	105	None	add
678	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
679	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  this.columns;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	129	None	replace
680	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	8	None	replace
681	[BUG]  [BUGGY]  remaining  >=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	remaining  >=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1    	non-compiled	[CE]  not  a  statement	3	None	replace
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.PI  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *  Math.PI  /  residuals[i];	  chiSquare    +=    residual    *    remaining    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	1	1	replace
683	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.PI  /  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.PI  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.PI  /  residuals[i];	  chiSquare    +=    residual    *    remaining    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	1	1	replace
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  /  2  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  /  2  *  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
685	[BUG]  [BUGGY]  chiSquare  +=  residual  /  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  /  2  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  /  2  *  residuals[i];	  chiSquare    +=    residual    *    2    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	28	1	replace
686	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
687	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.max(result,  chiSquare);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.max(result,    chiSquare);    }    	non-compiled	[CE]  ';'  expected	140	None	replace
688	[BUG]  [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  -  1;  [CE]  variable  residual  is  already  defined  in  method  getChiSquare()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  residual  =  residuals[i].doubleValue()  -  1;  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	final  double  residual  =  residuals[i].doubleValue()  -  1;	  final    double    residual    =    residuals[i].doubleValue();    	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getChiSquare()	49	None	replace
689	[BUG]  [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(value  /  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  factor  *  Math.sqrt(value  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  factor  *  Math.sqrt(value  /  residuals[i]);	  chiSquare    +=    factor    *    Math.sqrt(remainder    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	100	None	replace
690	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jF)/  residuals[i];  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(jF)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(jF)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	12	None	replace
691	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(variant)/  residuals[i];  [CE]  cannot  find  symbol  variant  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(variant)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(variant)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  variant	12	None	replace
692	[BUG]  [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(period)/  residuals[i];  [CE]  cannot  find  symbol  period  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  cost  *  Math.sqrt(period)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  cost  *  Math.sqrt(period)/  residuals[i];	  chiSquare    +=    cost    *    Math.sqrt(remaining)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  period	12	None	replace
693	[BUG]  [BUGGY]  double  /=  residuals[i];  [CE]  unexpected  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  /=  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  /=  residuals[i];	  result    /=    residuals[i];    	non-compiled	[CE]  unexpected  type	104	None	replace
694	[BUG]  [BUGGY]  if(remaining  >  residuals[i].doubleValue())  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  residuals[i].doubleValue())  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  residuals[i].doubleValue())  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  remaining	72	None	replace
695	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(i  *  2);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	add	chiSquare  +=  residual  *(i  *  2);	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
696	[BUG]  [BUGGY]  chiSquare  +=  residual  *(i  *  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *(i  *  2);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *(i  *  2);	  chiSquare    +=    residual    *    i    *    2;    	compilable	  [FE]  AssertionFailedError  	52	1	replace
697	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
698	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	47	None	replace
699	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  chiSquare  +=  Math.pow(10.0,  -1);  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    chiSquare    +=    Math.pow(10.0,    -1);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
700	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(coefficient  *  residual  /  residuals[i]);  [CE]  cannot  find  symbol  coefficient  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(coefficient  *  residual  /  residuals[i]);  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.sqrt(coefficient  *  residual  /  residuals[i]);	  chiSquare    +=    residual    *    Math.sqrt(ji    *    residual    /    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	46	None	replace
701	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  Double  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  Double  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    Double  chiSquare  +=  residual  *  chiSquare  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	118	None	add
702	[BUG]  [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  period  *  chiSquare  /  residuals[i];  [CE]  cannot  find  symbol  period  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  chiSquare  /  residuals[i];  chiSquare  +=  period  *  chiSquare  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    chiSquare    /    residuals[i];    chiSquare  +=  period  *  chiSquare  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	118	None	add
703	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  Math.cos(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  Math.cos(result)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  Math.cos(result)/  residuals[i];	  chiSquare    +=    residual    *    Math.cos(result)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	77	None	replace
704	[BUG]  [BUGGY]  chiSquare  +=  residual  *  jF.length  /  residuals[i];  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  jF.length  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  jF.length  /  residuals[i];	  chiSquare    +=    residual    *    jF    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  length	58	None	replace
705	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  '.class'  expected	32	None	replace
706	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  remaining  /  residuals[i];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  remaining  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  remaining  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  ';'  expected	40	None	replace
707	[BUG]  [BUGGY]  double  chiSquare  +=  residual  *  residual  /  residuals[i];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  +=  residual  *  residual  /  residuals[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  +=  residual  *  residual  /  residuals[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    double    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  ';'  expected	40	None	replace
708	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.sqrt(remainder);  }	  matically(remaining)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.sqrt(remainder);    }    	non-compiled	[CE]  ';'  expected	131	None	replace
709	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.log(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.log(remainder)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  Math.log(remainder)/  residuals[i];	  chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
710	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  Double  chiSquare  +=  residual  *  i  /  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  Double  chiSquare  +=  residual  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    Double  chiSquare  +=  residual  *  i  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	56	None	add
711	[BUG]  [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  period  *  i  /  residuals[i];  [CE]  cannot  find  symbol  period  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  i  /  residuals[i];  chiSquare  +=  period  *  i  /  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    i    /    residuals[i];    chiSquare  +=  period  *  i  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	56	None	add
712	[BUG]  [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  residuals[i];  chiSquare  +=  residual  *  i  *  remainings[i];  chiSquare  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare        +=        residual        *        i        *        residuals[i];        chiSquare    +=    residual    *    i    *    residuals[i];    chiSquare  +=  residual  *  i  *  remainings[i];  chiSquare  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	16	None	add
713	[BUG]  [BUGGY]  chiSquare  +=  residual  *  rows[i]  *  ji;  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  rows[i]  *  ji;  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  rows[i]  *  ji;	  chiSquare    +=    residual    *    i    *    rows[i];    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
714	[BUG]  [BUGGY]  chiSquare  +=  residual  *  row  *  rows[i];  [CE]  cannot  find  symbol  row  [FE]          AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  row  *  rows[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  row  *  rows[i];	  chiSquare    +=    residual    *    i    *    rows[i];    	non-compiled	[CE]  cannot  find  symbol  row	50	None	replace
715	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(variant,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	23	None	replace
716	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(value,  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(value,  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(value,  residual);	  double    chiSquare    =    Math.sqrt(remainder,    cost);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	23	None	replace
717	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	128	None	replace
718	[BUG]  [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	luate(rows,  i)  {  for(int  i  =  0;  i  <  i;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  luate(rows,    i)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  ';'  expected	128	None	replace
719	[BUG]  [BUGGY]  chiSquare  +=  residual  *  residual  /  rows[i];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  residual  /  rows[i];  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residual  *  residual  /  rows[i];	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residuesWeights[i];    	non-compiled	[CE]  array  required,  but  int  found	102	None	replace
720	[BUG]  [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residuals[i];  chiSquare  +=  residual  *  residual  /  residuals[i];  }  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residuals[i];  chiSquare  +=  residual  *  residual  /  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remaining  >  0)  {  chiSquare  +=  residual  *  residual  /  residuals[i];  chiSquare  +=  residual  *  residual  /  residuals[i];  }	          chiSquare    +=    residual    *    residual    /    residualsWeights[i];    chiSquare    +=    residual    *    residual    /    residualsWeights[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	36	None	replace
721	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  not  a  statement	80	None	replace
722	[BUG]  [BUGGY]  if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	if(remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  chiSquare  +=  Math.cos(remainder);  }	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    +=    Math.cos(remainder);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
723	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	71	None	replace
724	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  chiSquare);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    chiSquare);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	71	None	replace
725	[BUG]  [BUGGY]  chiSquare  +=  residuals  *  jF  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residuals  *  jF  *  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare  +=  residuals  *  jF  *  residuals[i];	  chiSquare    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
726	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
727	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
728	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i].doubleValue();  chiSquare  +=  Math.pow(10.0,	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i].doubleValue();    chiSquare    +=    Math.pow(10.0,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
729	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  Math.sqrt(rows)/  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  +=  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    double  chiSquare  +=  Math.sqrt(rows)/  residuals[i];	  	non-compiled	[CE]  ';'  expected	10	None	add
730	[BUG]  [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  =  Math.sqrt(rows)/  residuals[i];  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]      AssertionFailedError    [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  chiSquare  +=  residual  *  Math.sqrt(rows)/  residuals[i];  double  chiSquare  =  Math.sqrt(rows)/  residuals[i];  [BUGGY]      }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	chiSquare    +=    residual    *    Math.sqrt(rows)/    residuals[i];    double  chiSquare  =  Math.sqrt(rows)/  residuals[i];	  	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	10	None	add
731	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  cost);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(variant,  cost);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(variant,  cost);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
732	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant  +  1);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(variant  +  1);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(variant  +  1);	  double    chiSquare    =    Math.sqrt(variant);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	117	None	replace
733	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	60	None	replace
734	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  residual  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  residual  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  residual  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    residual    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	60	None	replace
735	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  chiSquare  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    chiSquare    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getChiSquare()	64	None	replace
736	[BUG]  [BUGGY]  double  chiSquare  =  Math.sqrt(variant  *  residual);  [CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getChiSquare()  {  double  chiSquare  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  chiSquare  =  Math.sqrt(variant  *  residual);  [BUGGY]      chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	258	258	1	replace	double  chiSquare  =  Math.sqrt(variant  *  residual);	  double    chiSquare    =    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  variable  chiSquare  is  already  defined  in  method  getChiSquare()	22	None	replace
