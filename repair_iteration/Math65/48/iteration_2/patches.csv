bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i  +  1],  cost;  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i  +  1],  cost;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i  +  1],  cost;	  final    double[]    ji    =    cols[i    +    1];    	non-compiled	[CE]  array  required,  but  int  found	5	None	replace
2	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i  *  1];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i  *  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i  *  1];	  final    double[]    ji    =    cols[i    +    1];    	non-compiled	[CE]  array  required,  but  int  found	5	None	replace
3	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  i  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  i  +  1);	  cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
4	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  2);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  2);	  cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
5	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].value(jacobian);  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].value(jacobian);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].value(jacobian);	  final    double[]    ji    =    jacobian[i].value(point);    	non-compiled	[CE]  array  required,  but  int  found	37	None	replace
6	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(true);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(true);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
7	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(false,  cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(false,  cols);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(false,  cols);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
8	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].value(false);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].value(false);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].value(false);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  array  required,  but  int  found	83	None	replace
9	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  1);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  1);	  cols    =    Math.min(residualsWeights[i],    0);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
10	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  3);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  3);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  3);	  cols    =    Math.min(residualsWeights[i],    0);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
11	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	80	None	replace
12	[BUG]  [BUGGY]  double  cols  =  Math.min(results[i],  residuals[i]);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(results[i],  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(results[i],  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  results	80	None	replace
13	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  residuals[i]);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	long  cols  =  Math.min(residualsWeights[i],  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]);    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
14	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double  cols  =  Math.min(residualsWeights[i],  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	80	None	replace
15	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  cost));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  cost));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  cost));	  cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
16	[BUG]  [BUGGY]  cols  =  Math.min(cols[i],  -Math.sqrt(jacobian[i]));  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols[i],  -Math.sqrt(jacobian[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols[i],  -Math.sqrt(jacobian[i]));	  cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  array  required,  but  int  found	20	None	replace
17	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i]),  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i]),  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i]),  cost);	  cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
18	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  -1,  -Math.sqrt(jacobian[i]));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  -1,  -Math.sqrt(jacobian[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  -1,  -Math.sqrt(jacobian[i]));	  cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  new  double[residualsWeights.length  +  1];	  final    double[]    ji    =    new    double[residualsWeights.length];    	compilable	  [FE]  AssertionFailedError  	91	14	replace
20	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length  +  1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[residualsWeights.length  +  1];	  final    double[]    ji    =    new    double[residualsWeights.length];    	compilable	  [FE]  AssertionFailedError  	91	14	replace
21	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights[i];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights[i];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[residualsWeights[i];	  final    double[]    ji    =    new    double[residualsWeights.length];    	non-compiled	[CE]  ']'  expected	91	None	replace
22	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i].value();	  final    double[]    ji    =    jacobian[i].value();    	non-compiled	[CE]  ')'  expected	17	None	replace
23	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].value();  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].value();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].value();	  final    double[]    ji    =    jacobian[i].value();    	non-compiled	[CE]  array  required,  but  int  found	17	None	replace
24	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  +  1);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  +  1);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	30	None	replace
25	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  -  1);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  -  1);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	30	None	replace
26	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  this.residualsWeights);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  this.residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  this.residualsWeights);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	30	None	replace
27	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobian.length);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobian.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobian.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    jacobian);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	61	None	replace
28	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobianEvaluations);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobianEvaluations);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobianEvaluations);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    jacobian);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	61	None	replace
29	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  null,  jacobian);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  null,  jacobian);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  null,  jacobian);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    jacobian);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	61	None	replace
30	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  -  jacobian[i],  cost);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  -  jacobian[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  -  jacobian[i],  cost);	  int    cols    =    Math.min(residualsWeights[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
31	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cost  -  jacobian[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cost  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cost  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
32	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  jacobian[i]);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  /  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	13	None	replace
33	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i,  residualsWeights);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	77	None	replace
34	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i,  iterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i,  iterations);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i,  iterations);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	77	None	replace
35	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i  +  1);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i  +  1);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	77	None	replace
36	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i,  null);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i,  null);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i,  null);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	77	None	replace
37	[BUG]  [BUGGY]  final  double[]  ji  =  rows[i].value(jacobian);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  rows[i].value(jacobian);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  rows[i].value(jacobian);	  final    double[]    ji    =    jacobian[i].value(rows);    	non-compiled	[CE]  array  required,  but  int  found	94	None	replace
38	[BUG]  [BUGGY]  final  double[]  ji  =  rows.value(jacobian[i].value(i);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  rows.value(jacobian[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  rows.value(jacobian[i].value(i);	  final    double[]    ji    =    jacobian[i].value(rows);    	non-compiled	[CE]  ')'  expected	94	None	replace
39	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cost,  -Math.sqrt(jacobian[i]));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cost,  -Math.sqrt(jacobian[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cost,  -Math.sqrt(jacobian[i]));	  cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	18	None	replace
40	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cost  -  1);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cost  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cost  -  1);	  cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
41	[BUG]  [BUGGY]  cols  =  Math.min(cols[i],  cost);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols[i],  cost);	  cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	18	None	replace
42	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cost,  0);  [CE]  no  suitable  method  found  for  min(double,double,int)  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cost,  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cost,  0);	  cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,int)	18	None	replace
43	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
44	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length  -  1);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length  -  1);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
45	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols,  jacobian.length);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols,  jacobian.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols,  jacobian.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
46	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i,  rows);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i,  rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
47	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(residualsWeights);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(residualsWeights);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(residualsWeights);	  final    double[]    ji    =    jacobian[i].value(period);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
48	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  2];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    +    2];    final  double[]  ji  =  jacobian[i  +  2];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	8	None	add
49	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  Final  double[]  ji  =  jacobian[i  +  2];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  Final  double[]  ji  =  jacobian[i  +  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    +    2];    Final  double[]  ji  =  jacobian[i  +  2];	  	non-compiled	[CE]  not  a  statement	8	None	add
50	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  3];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  3];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    +    2];    final  double[]  ji  =  jacobian[i  +  3];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	8	None	add
51	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  rows  -  cols[i]);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  rows  -  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  0,  rows  -  cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  array  required,  but  int  found	64	None	replace
52	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  points  -  cols[i]);  [CE]  cannot  find  symbol  points  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  points  -  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  points  -  cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  points	64	None	replace
53	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows  -  1,  jacobian[i]);  [CE]  no  suitable  method  found  for  min(double,int,double[])  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows  -  1,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  rows  -  1,  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,double[])	64	None	replace
54	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i  -  rows[i]);  [CE]  array  required,  but  int  found  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i  -  rows[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  i  -  rows[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  array  required,  but  int  found	64	None	replace
55	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i],  cost);  [CE]  no  suitable  method  found  for  min(double,double[],double)  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  jacobian[i],  cost);	  cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[],double)	100	None	replace
56	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  ji,  jacobian[i]);  [CE]  cannot  find  symbol  ji  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  ji,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  ji,  jacobian[i]);	  cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	100	None	replace
57	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	87	None	replace
58	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	87	None	replace
59	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	87	None	replace
60	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	87	None	replace
61	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  cost);  [CE]  no  suitable  method  found  for  min(double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian[i],  cost);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double[],double)	99	None	replace
62	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  i,  jacobian[i]);  [CE]  no  suitable  method  found  for  min(double[],int,double[])  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  i,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  i,  jacobian[i]);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,double[])	99	None	replace
63	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  ji,  jacobian[i]);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  ji,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  ji,  jacobian[i]);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	99	None	replace
64	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i  +  1]  [0];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i  +  1]  [0];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i  +  1]  [0];	  final    double[]    ji    =    jacobian[i    +    1]    [0];    	non-compiled	[CE]  array  required,  but  int  found	89	None	replace
65	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  1]  [1];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  1]  [1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  1]  [1];	  final    double[]    ji    =    jacobian[i    +    1]    [0];    	non-compiled	[CE]  incompatible  types	89	None	replace
66	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  1]  [0];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  1]  [0];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  *  1]  [0];	  final    double[]    ji    =    jacobian[i    +    1]    [0];    	non-compiled	[CE]  incompatible  types	89	None	replace
67	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  *  1);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  *  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i]  *  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  array  required,  but  int  found	42	None	replace
68	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  +  2);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  +  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i]  +  2);	  cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  array  required,  but  int  found	42	None	replace
69	[BUG]  [BUGGY]  cols  =  Math.min(cols[i],  residualsWeights[i]  +  1);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols[i],  residualsWeights[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols[i],  residualsWeights[i]  +  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  array  required,  but  int  found	42	None	replace
70	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  +  1],  cost);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  +  1],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i]  +  1],  cost);	  cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  ')'  expected	42	None	replace
71	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[cols.length  -  2];  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[cols.length  -  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[cols.length  -  2];	  final    double[]    ji    =    new    double[cols.length    -    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
72	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows.length  -  1];  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows.length  -  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows.length  -  1];	  final    double[]    ji    =    new    double[cols.length    -    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
73	[BUG]  [BUGGY]  final  double[]  cols  =  new  double[cols.length  -  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  new  double[cols.length  -  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  new  double[cols.length  -  1];	  final    double[]    ji    =    new    double[cols.length    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	2	None	replace
74	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian.value(i);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian.value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian.value(i);	  final    double[]    ji    =    jf.value(i);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
75	[BUG]  [BUGGY]  final  double[]  cols  =  jf.value(i);  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  jf.value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  jf.value(i);	  final    double[]    ji    =    jf.value(i);    	non-compiled	[CE]  cannot  find  symbol  jf	68	None	replace
76	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  residuals[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	81	None	replace
77	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  fieldValues[i]  -  jacobian[i]);  [CE]  cannot  find  symbol  fieldValues  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  fieldValues[i]  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  fieldValues[i]  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  fieldValues	81	None	replace
78	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  ji,  residuals[i]  -  jacobian[i]);  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  ji,  residuals[i]  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  ji,  residuals[i]  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	81	None	replace
79	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  dataArea[i]  -  jacobian[i]);  [CE]  cannot  find  symbol  dataArea  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  dataArea[i]  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  dataArea[i]  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  dataArea	81	None	replace
80	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i],  cost);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i],  cost);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i],  cost);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ';'  expected	101	None	replace
81	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  residualsWeights[i]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  residualsWeights[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  residualsWeights[i]);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ']'  expected	101	None	replace
82	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost,  residualsWeights[i]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost,  residualsWeights[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost,  residualsWeights[i]);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ']'  expected	101	None	replace
83	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost  +  1);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost  +  1);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ';'  expected	101	None	replace
84	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    targetValues);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	33	None	replace
85	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    targetValues);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	33	None	replace
86	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues[i]);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues[i]);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    targetValues);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	33	None	replace
87	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues.length);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    targetValues);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	33	None	replace
88	[BUG]  [BUGGY]  final  double[]  cols  =  new  double[cols.length  +  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  new  double[cols.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  new  double[cols.length  +  1];	  final    double[]    cols    =    new    double[cols.length];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	4	None	replace
89	[BUG]  [BUGGY]  final  double[]  cols  =  new  double[residualsWeights.length];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  new  double[residualsWeights.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  new  double[residualsWeights.length];	  final    double[]    cols    =    new    double[cols.length];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	4	None	replace
90	[BUG]  [BUGGY]  final  double[]  cols  =  new  double[cols.length  -  2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  new  double[cols.length  -  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  new  double[cols.length  -  2];	  final    double[]    cols    =    new    double[cols.length];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	4	None	replace
91	[BUG]  [BUGGY]  cols  =  Math.min(cols[i],  residualsWeights[i],  cost);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols[i],  residualsWeights[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols[i],  residualsWeights[i],  cost);	  cols    =    Math.min(residualsWeights[i],    cols[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
92	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  0);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  0);	  cols    =    Math.min(residualsWeights[i],    cols[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
93	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  2);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  2);	  cols    =    Math.min(residualsWeights[i],    cols[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
94	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  null);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  null);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  null);	  cols    =    Math.min(residualsWeights[i],    cols[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
95	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(rows,  cols);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(rows,  cols);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(rows,  cols);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
96	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].value(jacobian[i],  jacobian);  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].value(jacobian[i],  jacobian);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].value(jacobian[i],  jacobian);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  array  required,  but  int  found	95	None	replace
97	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].value(jacobian,  i);  [CE]  array  required,  but  int  found  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].value(jacobian,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].value(jacobian,  i);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  array  required,  but  int  found	95	None	replace
98	[BUG]  [BUGGY]  final  double[]  ji  =  rows[i].value(jacobian[i]);  [CE]  array  required,  but  int  found  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  rows[i].value(jacobian[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  rows[i].value(jacobian[i]);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  array  required,  but  int  found	95	None	replace
99	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i],  cost);  [CE]  no  suitable  method  found  for  min(double,double[],double)  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jacobian[i],  cost);	  int    cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[],double)	92	None	replace
100	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  ji,  jacobian[i]);  [CE]  cannot  find  symbol  ji  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  ji,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  ji,  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	92	None	replace
101	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  jacobian[i]);  [CE]  cannot  find  symbol  row  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  row,  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  row	92	None	replace
102	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  jacobian[i]);  [CE]  no  suitable  method  found  for  min(double,int,double[])  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  0,  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,double[])	92	None	replace
103	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  cost);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	27	None	replace
104	[BUG]  [BUGGY]  Double[]  cols  =  jF.value(cols[i],  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double[]  cols  =  jF.value(cols[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double[]  cols  =  jF.value(cols[i],  cost);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	27	None	replace
105	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  Cost.MAX_ITERATIONS);  [CE]  cannot  find  symbol  Cost  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  Cost.MAX_ITERATIONS);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  Cost.MAX_ITERATIONS);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  Cost	27	None	replace
106	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  value);  [CE]  cannot  find  symbol  value  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  value);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  value);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  cannot  find  symbol  value	27	None	replace
107	[BUG]  [BUGGY]  cols  =  Math.min(cols[i],  residualsWeights[i]  -  1);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols[i],  residualsWeights[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols[i],  residualsWeights[i]  -  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  array  required,  but  int  found	41	None	replace
108	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  -  1],  cost);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i]  -  1],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i]  -  1],  cost);	  cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  ')'  expected	41	None	replace
109	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  Cost.MAX_ITERATIONS);  [CE]  cannot  find  symbol  Cost  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  Cost.MAX_ITERATIONS);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  Cost.MAX_ITERATIONS);	  int    cols    =    Math.min(residualsWeights[i],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  Cost	97	None	replace
110	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
111	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  i);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  i);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
112	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i  +  1);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
113	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  this.checker.getVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  this.checker.getVariableConvergenceChecker();  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  this.checker.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
114	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.getVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  jF.getVariableConvergenceChecker();  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  jF.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
115	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  convergenceChecker.getVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  convergenceChecker.getVariableConvergenceChecker();  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  convergenceChecker.getVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
116	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  1],  cost.doubleValue();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  1],  cost.doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  1],  cost.doubleValue();	  final    double[]    ji    =    jacobian[i    +    1].doubleValue();    	non-compiled	[CE]  ';'  expected	88	None	replace
117	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i  +  1].doubleValue();  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i  +  1].doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i  +  1].doubleValue();	  final    double[]    ji    =    jacobian[i    +    1].doubleValue();    	non-compiled	[CE]  array  required,  but  int  found	88	None	replace
118	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  2].doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  2].doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  2].doubleValue();	  final    double[]    ji    =    jacobian[i    +    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
119	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost,  jacobian.length;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost,  jacobian.length;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost,  jacobian.length;	  final    double[]    ji    =    cols[i],    cost;    	non-compiled	[CE]  ';'  expected	45	None	replace
120	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost,  null);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost,  null);	  final    double[]    ji    =    cols[i],    cost;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
121	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost,  jacobian;  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost,  jacobian;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost,  jacobian;	  final    double[]    ji    =    cols[i],    cost;    	non-compiled	[CE]  array  required,  but  int  found	45	None	replace
122	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i].length,  2);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i].length,  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i].length,  2);	  int    cols    =    Math.min(residualsWeights[i].length,    i);    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
123	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i].length,  i  +  1);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i].length,  i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i].length,  i  +  1);	  int    cols    =    Math.min(residualsWeights[i].length,    i);    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
124	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1,  -rows[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1,  -rows[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -1,  -rows[i]);	  int    cols    =    Math.min(residualsWeights[i],    -rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	63	None	replace
125	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  -rows[i]);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  -rows[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  0,  -rows[i]);	  int    cols    =    Math.min(residualsWeights[i],    -rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	63	None	replace
126	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -1);	  int    cols    =    Math.min(residualsWeights[i],    -rows[i]);    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
127	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows,  i.length];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows,  i.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows,  i.length];	  final    double[]    ji    =    new    double[rows.length];    	non-compiled	[CE]  ']'  expected	3	None	replace
128	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows[i];  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows[i];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows[i];	  final    double[]    ji    =    new    double[rows.length];    	non-compiled	[CE]  ']'  expected	3	None	replace
129	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows,  i];  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows,  i];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows,  i];	  final    double[]    ji    =    new    double[rows.length];    	non-compiled	[CE]  ']'  expected	3	None	replace
130	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	50	None	replace
131	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	50	None	replace
132	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	50	None	replace
133	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  [CE]  cannot  find  symbol  row  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);    	non-compiled	[CE]  cannot  find  symbol  row	50	None	replace
134	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  point);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  point);	  double[]    cols    =    jF.value(point,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	28	None	replace
135	[BUG]  [BUGGY]  double[]  cols  =  jF.value(point,  i,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(point,  i,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(point,  i,  residualsWeights);	  double[]    cols    =    jF.value(point,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	28	None	replace
136	[BUG]  [BUGGY]  double[]  cols  =  jF.value(colon,  i);  [CE]  cannot  find  symbol  colon  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(colon,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(colon,  i);	  double[]    cols    =    jF.value(point,    i);    	non-compiled	[CE]  cannot  find  symbol  colon	28	None	replace
137	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(i,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(i,  cols);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(i,  cols);	  final    double[]    ji    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	67	None	replace
138	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(i,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(i,  residualsWeights);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(i,  residualsWeights);	  final    double[]    ji    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	67	None	replace
139	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(point,  i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(point,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(point,  i);	  final    double[]    ji    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	67	None	replace
140	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(cols,  i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(cols,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(cols,  i);	  final    double[]    ji    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	67	None	replace
141	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[cols,  i.length  -  1];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[cols,  i.length  -  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[cols,  i.length  -  1];	  final    double[]    ji    =    new    double[cols,    i.length];    	non-compiled	[CE]  ']'  expected	62	None	replace
142	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[cols,  i.length  +  1];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[cols,  i.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[cols,  i.length  +  1];	  final    double[]    ji    =    new    double[cols,    i.length];    	non-compiled	[CE]  ']'  expected	62	None	replace
143	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[cols,  i.length  -  2];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[cols,  i.length  -  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[cols,  i.length  -  2];	  final    double[]    ji    =    new    double[cols,    i.length];    	non-compiled	[CE]  ']'  expected	62	None	replace
144	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
145	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  i);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  i);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
146	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i  +  1);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
147	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i]  [0];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i]  [0];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i]  [0];	  final    double[]    ji    =    cols[i]    [0];    	non-compiled	[CE]  incompatible  types	46	None	replace
148	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i]  [1];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i]  [1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i]  [1];	  final    double[]    ji    =    cols[i]    [0];    	non-compiled	[CE]  array  required,  but  int  found	46	None	replace
149	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i].length  -  1);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i].length  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i].length  -  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i].length);    	non-compiled	[CE]  array  required,  but  int  found	12	None	replace
150	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i].length  +  1);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i].length  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i].length  +  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i].length);    	non-compiled	[CE]  array  required,  but  int  found	12	None	replace
151	[BUG]  [BUGGY]  double[]  cols  =  jF.value(point,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(point,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(point,  residualsWeights);	  double[]    cols    =    jF.value(i,    residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	26	None	replace
152	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  point,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  point,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  point,  residualsWeights);	  double[]    cols    =    jF.value(i,    residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	26	None	replace
153	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  DEFAULT_MAX_ITERATIONS,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  DEFAULT_MAX_ITERATIONS,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  DEFAULT_MAX_ITERATIONS,  residualsWeights);	  double[]    cols    =    jF.value(i,    residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	26	None	replace
154	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  DEFAULT_MAX_ITERATIONS);	  double[]    cols    =    jF.value(i,    residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	26	None	replace
155	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker().variant(i);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker().variant(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker().variant(i);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker().variant;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
156	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  *  1);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  *  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i]  *  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
157	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  -  2);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  -  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i]  -  2);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
158	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  -  1  +  1);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  -  1  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i]  -  1  +  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
159	[BUG]  [BUGGY]  final  double[]  ji  =  this.jacobian[i].value();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  this.jacobian[i].value();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  this.jacobian[i].value();	  final    double[]    ji    =    this.jacobian[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
160	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  i);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  i);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker().variables;    	non-compiled	[CE]  ';'  expected	66	None	replace
161	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  i;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  i;  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  i;	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker().variables;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
162	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables[i];  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables[i];  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables[i];	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker().variables;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
163	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables(i);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables(i);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker().variables;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
164	[BUG]  [BUGGY]  double  cols  =  Math.sqrt(jacobian[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.sqrt(jacobian[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.sqrt(jacobian[i]);	  double    cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	86	None	replace
165	[BUG]  [BUGGY]  double  cols  =  Math.sqrt(residualsWeights[i]);  [CE]  cannot  find  symbol  ji  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.sqrt(residualsWeights[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.sqrt(residualsWeights[i]);	  double    cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	86	None	replace
166	[BUG]  [BUGGY]  double  cols  =  Math.sqrt(residuals[i]  -  1);  [CE]  cannot  find  symbol  ji  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.sqrt(residuals[i]  -  1);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.sqrt(residuals[i]  -  1);	  double    cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	86	None	replace
167	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(residualsWeights[i].value(i);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(residualsWeights[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(residualsWeights[i].value(i);	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	35	None	replace
168	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(residuals[i].value(i));  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(residuals[i].value(i));  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(residuals[i].value(i));	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
169	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(cols[i].value(i);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(cols[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(cols[i].value(i);	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	35	None	replace
170	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(residuals[i].value(i);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(residuals[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(residuals[i].value(i);	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	35	None	replace
171	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  final  double[]  ji  =  jacobian[i  *  1];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  final  double[]  ji  =  jacobian[i  *  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    *    1];    final  double[]  ji  =  jacobian[i  *  1];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	6	None	add
172	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  Final  double[]  ji  =  jacobian[i  *  1];  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  Final  double[]  ji  =  jacobian[i  *  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    *    1];    Final  double[]  ji  =  jacobian[i  *  1];	  	non-compiled	[CE]  not  a  statement	6	None	add
173	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  final  double[]  ji  =  jacobian[i  *  2];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  final  double[]  ji  =  jacobian[i  *  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    *    1];    final  double[]  ji  =  jacobian[i  *  2];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	6	None	add
174	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  final  double[]  ji  =  jacobian[i  *  1)];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  1];  final  double[]  ji  =  jacobian[i  *  1)];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    *    1];    final  double[]  ji  =  jacobian[i  *  1)];	  	non-compiled	[CE]  ']'  expected	6	None	add
175	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1,  -cols[i]);  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1,  -cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -1,  -cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    -cols[i]);    	non-compiled	[CE]  array  required,  but  int  found	65	None	replace
176	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  -cols[i]);  [CE]  array  required,  but  int  found  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  -cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  0,  -cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    -cols[i]);    	non-compiled	[CE]  array  required,  but  int  found	65	None	replace
177	[BUG]  [BUGGY]  final  double[]  ji  =  residuals[i].value(jacobian[i]);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  residuals[i].value(jacobian[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  residuals[i].value(jacobian[i]);	  final    double[]    ji    =    jacobian[i].value(residualsWeights[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
178	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(point,  residualsWeights[i]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(point,  residualsWeights[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(point,  residualsWeights[i]);	  final    double[]    ji    =    jacobian[i].value(residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
179	[BUG]  [BUGGY]  final  double[]  ji  =  residualsWeights[i].value(jacobian[i]);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  residualsWeights[i].value(jacobian[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  residualsWeights[i].value(jacobian[i]);	  final    double[]    ji    =    jacobian[i].value(residualsWeights[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
180	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian.value(jf.value(i].doubleValue());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian.value(jf.value(i].doubleValue());  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian.value(jf.value(i].doubleValue());	  final    double[]    ji    =    jf.value(jacobian[i].doubleValue());    	non-compiled	[CE]  ')'  expected	75	None	replace
181	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].doubleValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].doubleValue());  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i].doubleValue());	  final    double[]    ji    =    jf.value(jacobian[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
182	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i],  cost);  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i],  cost);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(jacobian[i],  cost);	  final    double[]    ji    =    jf.value(jacobian[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  jf	75	None	replace
183	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  true);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  true);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  true);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    false);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	70	None	replace
184	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  false,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  false,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  false,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    false);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	70	None	replace
185	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  null);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  null);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  null);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    false);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	70	None	replace
186	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  false,  null);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  false,  null);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  false,  null);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    false);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	70	None	replace
187	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  jacobian[i  *  2];	  final    double[]    ji    =    jacobian[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	15	replace
188	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  *  2];	  final    double[]    ji    =    jacobian[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	15	replace
189	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  3];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  jacobian[i  *  3];	  final    double[]    ji    =    jacobian[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	15	replace
190	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  3];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  *  3];	  final    double[]    ji    =    jacobian[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	15	replace
191	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  *  residuals[i]);  [CE]  no  suitable  method  found  for  min(double)  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  *  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  *  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i]    /    cols[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	14	None	replace
192	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  field,  cols[i]);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  field,  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  /  field,  cols[i]);	  int    cols    =    Math.min(residualsWeights[i]    /    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  field	14	None	replace
193	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  cols,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  cols,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  cols,  cost);	  double[]    cols    =    jF.value(i,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	29	None	replace
194	[BUG]  [BUGGY]  double[]  cols  =  jF.value(point,  cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(point,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(point,  cols);	  double[]    cols    =    jF.value(i,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	29	None	replace
195	[BUG]  [BUGGY]  Double[]  cols  =  jF.value(i,  cols,  cost);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double[]  cols  =  jF.value(i,  cols,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double[]  cols  =  jF.value(i,  cols,  cost);	  double[]    cols    =    jF.value(i,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	29	None	replace
196	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  0);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  0);	  int    cols    =    Math.min(residualsWeights[i],    0);    	non-compiled	[CE]  cannot  find  symbol  ji	24	None	replace
197	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  0);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	long  cols  =  Math.min(residualsWeights[i],  0);	  int    cols    =    Math.min(residualsWeights[i],    0);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
198	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  0);  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double  cols  =  Math.min(residualsWeights[i],  0);	  int    cols    =    Math.min(residualsWeights[i],    0);    	non-compiled	[CE]  cannot  find  symbol  ji	24	None	replace
199	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[residualsWeights.length];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[residualsWeights.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    new    double[residualsWeights.length];    final  double[]  ji  =  new  double[residualsWeights.length];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	90	None	add
200	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  Final  double[]  ji  =  new  double[residualsWeights.length];  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  Final  double[]  ji  =  new  double[residualsWeights.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    new    double[residualsWeights.length];    Final  double[]  ji  =  new  double[residualsWeights.length];	  	non-compiled	[CE]  not  a  statement	90	None	add
201	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[ResidualsWeights.length];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]        AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[ResidualsWeights.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    new    double[residualsWeights.length];    final  double[]  ji  =  new  double[ResidualsWeights.length];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	90	None	add
202	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[redualsWeights.length];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]          AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[redualsWeights.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    new    double[residualsWeights.length];    final  double[]  ji  =  new  double[redualsWeights.length];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	90	None	add
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  3];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  jacobian[i  +  3];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	16	replace
204	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  3];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  3];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	16	replace
205	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  cost);  [CE]  cannot  find  symbol  ji  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  cost);	  int    cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  cannot  find  symbol  ji	22	None	replace
206	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  cost);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	long  cols  =  Math.min(residualsWeights[i],  cost);	  int    cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
207	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  cost);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double  cols  =  Math.min(residualsWeights[i],  cost);	  int    cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  cannot  find  symbol  ji	22	None	replace
208	[BUG]  [BUGGY]  float  cols  =  Math.min(residualsWeights[i],  cost);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  float  cols  =  Math.min(residualsWeights[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	float  cols  =  Math.min(residualsWeights[i],  cost);	  int    cols    =    Math.min(residualsWeights[i],    cost);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
209	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
210	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  this.residualsWeights);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  this.residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  this.residualsWeights);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
211	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  2);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  2);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
212	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  row);  [CE]  cannot  find  symbol  row  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  row);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	31	None	replace
213	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  ji  =  jacobian[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	double[]  ji  =  jacobian[i  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    1)];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	16	replace
214	[BUG]  [BUGGY]  double[]  ji  =  jacobian[i  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  ji  =  jacobian[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  ji  =  jacobian[i  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    1)];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	16	replace
215	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].doubleValue().toArray(new  double[cols.length]);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].doubleValue().toArray(new  double[cols.length]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].doubleValue().toArray(new  double[cols.length]);	  final    double[]    ji    =    cols[i].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	34	None	replace
216	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols);	  cols    =    Math.min(cols,    residualsWeights[i]);    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
217	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights,  cols[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights,  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights,  cols[i]);	  cols    =    Math.min(cols,    residualsWeights[i]);    	non-compiled	[CE]  array  required,  but  int  found	59	None	replace
218	[BUG]  [BUGGY]  cols  =  Math.min(cols,  i);  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols,  i);	  cols    =    Math.min(cols,    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	59	None	replace
219	[BUG]  [BUGGY]  cols  =  Math.sqrt(residualsWeights[i]);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.sqrt(residualsWeights[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.sqrt(residualsWeights[i]);	  cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
220	[BUG]  [BUGGY]  cols  =  Math.sqrt(residuals[i]  -  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.sqrt(residuals[i]  -  1);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.sqrt(residuals[i]  -  1);	  cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
221	[BUG]  [BUGGY]  cols  =  Math.sqrt(residuals[i]  /  2);  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.sqrt(residuals[i]  /  2);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.sqrt(residuals[i]  /  2);	  cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
222	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(1);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(0);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
223	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  column);  [CE]  cannot  find  symbol  column  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  column);	  int    cols    =    Math.min(residualsWeights[i],    row);    	non-compiled	[CE]  cannot  find  symbol  column	40	None	replace
224	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i].length);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jacobian[i].length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
225	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  coefficients[i].length);  [CE]  cannot  find  symbol  coefficients  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  coefficients[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  coefficients[i].length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  cannot  find  symbol  coefficients	98	None	replace
226	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i,  residuals[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i,  residuals[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  i,  residuals[i].length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	98	None	replace
227	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  residuals[i].length);  [CE]  cannot  find  symbol  row  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  residuals[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  row,  residuals[i].length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  cannot  find  symbol  row	98	None	replace
228	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  2);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  2);	  int    cols    =    Math.min(residualsWeights[i],    2);    	non-compiled	[CE]  cannot  find  symbol  ji	25	None	replace
229	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  2);  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double  cols  =  Math.min(residualsWeights[i],  2);	  int    cols    =    Math.min(residualsWeights[i],    2);    	non-compiled	[CE]  cannot  find  symbol  ji	25	None	replace
230	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  2);  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	long  cols  =  Math.min(residualsWeights[i],  2);	  int    cols    =    Math.min(residualsWeights[i],    2);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
231	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	52	None	replace
232	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	52	None	replace
233	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i  +  1);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  i  +  1);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	52	None	replace
234	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =(VariableConvergenceChecker)getVariableConvergenceChecker(0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =(VariableConvergenceChecker)getVariableConvergenceChecker(0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =(VariableConvergenceChecker)getVariableConvergenceChecker(0);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
235	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(1);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
236	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i,  column);  [CE]  cannot  find  symbol  column  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i,  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  i,  column);	  int    cols    =    Math.min(residualsWeights[i],    row,    column);    	non-compiled	[CE]  cannot  find  symbol  column	93	None	replace
237	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  point,  column);  [CE]  cannot  find  symbol  column  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  point,  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  point,  column);	  int    cols    =    Math.min(residualsWeights[i],    row,    column);    	non-compiled	[CE]  cannot  find  symbol  column	93	None	replace
238	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  field,  column);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  field,  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  field,  column);	  int    cols    =    Math.min(residualsWeights[i],    row,    column);    	non-compiled	[CE]  cannot  find  symbol  field	93	None	replace
239	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  iterations);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  iterations);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  iterations);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	78	None	replace
240	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  this.residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  this.residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  this.residualsWeights);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	78	None	replace
241	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  dataIterations);  [CE]  cannot  find  symbol  dataIterations  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  dataIterations);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  dataIterations);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  cannot  find  symbol  dataIterations	78	None	replace
242	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  row);  [CE]  cannot  find  symbol  row  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  row);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  cannot  find  symbol  row	78	None	replace
243	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  +  2);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  +  2);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i]  +  2);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  array  required,  but  int  found	11	None	replace
244	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  +  1],  cost);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols[i]  +  1],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols[i]  +  1],  cost);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  ')'  expected	11	None	replace
245	[BUG]  [BUGGY]  Final  double[]  ji  =  jacobian[i  +  1];  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Final  double[]  ji  =  jacobian[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Final  double[]  ji  =  jacobian[i  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    Final    double[]    ji    =    jacobian[i    +    1];    	non-compiled	[CE]  not  a  statement	55	None	replace
246	[BUG]  [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i);	  VariableConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
247	[BUG]  [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(0);	  VariableConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
248	[BUG]  [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceCheckerInstance(i);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceCheckerInstance(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VariableConvergenceChecker  convergenceChecker  =  getVariableConvergenceCheckerInstance(i);	  VariableConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
249	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[cols.length  +  2];  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[cols.length  +  2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[cols.length  +  2];	  final    double[]    ji    =    new    double[cols.length    +    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  new  double[rows  +  1];	  final    double[]    ji    =    new    double[cols.length    +    1];    	compilable	  [FE]  AssertionFailedError  	1	14	replace
251	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows  +  1];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows  +  1];	  final    double[]    ji    =    new    double[cols.length    +    1];    	compilable	  [FE]  AssertionFailedError  	1	14	replace
252	[BUG]  [BUGGY]  final  double[]  cols  =  jacobian[i].value(cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  jacobian[i].value(cols);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  jacobian[i].value(cols);	  final    double[]    ji    =    jacobian[i].value(cols);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
253	[BUG]  [BUGGY]  final  double[]  cols  =  jacobian[i].value(jacobian);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  jacobian[i].value(jacobian);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  jacobian[i].value(jacobian);	  final    double[]    ji    =    jacobian[i].value(cols);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
254	[BUG]  [BUGGY]  final  double[]  cols  =  jacobian[i].value(ji);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  jacobian[i].value(ji);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  jacobian[i].value(ji);	  final    double[]    ji    =    jacobian[i].value(cols);    	non-compiled	[CE]  cannot  find  symbol  ji	71	None	replace
255	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(residuals[i].value(i));  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(residuals[i].value(i));  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(residuals[i].value(i));	  final    double[]    ji    =    jf.value(jacobian[i].value(i);    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
256	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(residualsWeights[i].value(i);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(residualsWeights[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(residualsWeights[i].value(i);	  final    double[]    ji    =    jf.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	36	None	replace
257	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(residuals[i].value(i);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(residuals[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(residuals[i].value(i);	  final    double[]    ji    =    jf.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	36	None	replace
258	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].value(i));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].value(i));  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(jacobian[i].value(i));	  final    double[]    ji    =    jf.value(jacobian[i].value(i);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
259	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows[i]  -  1);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  rows[i]  -  1);	  int    cols    =    Math.min(residualsWeights[i],    rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	73	None	replace
260	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  columns[i]);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  columns[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  columns[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows[i]);    	non-compiled	[CE]  cannot  find  symbol  columns	73	None	replace
261	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i,  rows[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i,  rows[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  i,  rows[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	73	None	replace
262	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  range);  [CE]  cannot  find  symbol  range  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  range);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  range);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    point);    	non-compiled	[CE]  cannot  find  symbol  range	32	None	replace
263	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(i));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(i));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(i));	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    point);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
264	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  point,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  point,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  point,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    point);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	32	None	replace
265	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  cost));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  cost));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  cost));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
266	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i]),  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i]),  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i]),  cost);	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
267	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1,  -Math.sqrt(jacobian[i]));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1,  -Math.sqrt(jacobian[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -1,  -Math.sqrt(jacobian[i]));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
268	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cost  -Math.sqrt(jacobian[i]));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cost  -Math.sqrt(jacobian[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cost  -Math.sqrt(jacobian[i]));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
269	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  i);  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  i);	  int    cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  cannot  find  symbol  ji	23	None	replace
270	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  i);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	long  cols  =  Math.min(residualsWeights[i],  i);	  int    cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
271	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  i);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double  cols  =  Math.min(residualsWeights[i],  i);	  int    cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  cannot  find  symbol  ji	23	None	replace
272	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  i  +  1);	  int    cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
273	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  jF);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  jF);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  jF);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    point);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	104	None	replace
274	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    point);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	104	None	replace
275	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  cols);	  int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  cannot  find  symbol  ji	39	None	replace
276	[BUG]  [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  long  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	long  cols  =  Math.min(residualsWeights[i],  cols);	  int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
277	[BUG]  [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  cols);  [CE]  cannot  find  symbol  ji  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  Double  cols  =  Math.min(residualsWeights[i],  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	Double  cols  =  Math.min(residualsWeights[i],  cols);	  int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  cannot  find  symbol  ji	39	None	replace
278	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols,  cost);  [CE]  no  suitable  method  found  for  min(double,int,double)  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cols,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cols,  cost);	  int    cols    =    Math.min(residualsWeights[i],    cols);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,double)	39	None	replace
279	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  i  +  1);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  i  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  i  +  1);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jacobian,    i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	103	None	replace
280	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jf,  i);  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jf,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jf,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jacobian,    i);    	non-compiled	[CE]  cannot  find  symbol  jf	103	None	replace
281	[BUG]  [BUGGY]  double[]  cols  =  jF.value(point,  residuals);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(point,  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(point,  residuals);	  double[]    cols    =    jF.value(i,    residuals);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	79	None	replace
282	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  point,  residuals);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  point,  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  point,  residuals);	  double[]    cols    =    jF.value(i,    residuals);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	79	None	replace
283	[BUG]  [BUGGY]  double[]  cols  =  residuals.value(i,  jF);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  residuals.value(i,  jF);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  residuals.value(i,  jF);	  double[]    cols    =    jF.value(i,    residuals);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
284	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  field,  residuals);  [CE]  cannot  find  symbol  field  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  field,  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  field,  residuals);	  double[]    cols    =    jF.value(i,    residuals);    	non-compiled	[CE]  cannot  find  symbol  field	79	None	replace
285	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  value  -  cols[i]);  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  value  -  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  value  -  cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    cost    -    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  value	15	None	replace
286	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cost  -  range[i]);  [CE]  cannot  find  symbol  range  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  cost  -  range[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  cost  -  range[i]);	  int    cols    =    Math.min(residualsWeights[i],    cost    -    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  range	15	None	replace
287	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	51	None	replace
288	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  columns[i]);  [CE]  cannot  find  symbol  columns  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  columns[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  columns[i]);	  cols    =    Math.min(cols[i],    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  columns	19	None	replace
289	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  column);  [CE]  cannot  find  symbol  column  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  column);	  cols    =    Math.min(cols[i],    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  column	19	None	replace
290	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  colons[i]);  [CE]  cannot  find  symbol  colons  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  colons[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  colons[i]);	  cols    =    Math.min(cols[i],    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  colons	19	None	replace
291	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost  +  1;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost  +  1;	  final    double[]    ji    =    cols[i],    cost;    	non-compiled	[CE]  ';'  expected	45	None	replace
292	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  polymorphics[i]  -  jacobian[i]);  [CE]  cannot  find  symbol  polymorphics  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  polymorphics[i]  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  polymorphics[i]  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  polymorphics	81	None	replace
293	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -jacobian[i]);  [CE]  bad  operand  type  double[]  for  unary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '-'	81	None	replace
294	[BUG]  [BUGGY]  final  double[]  ji  =  f.value(jacobian[i].doubleValue());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  f.value(jacobian[i].doubleValue());  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  f.value(jacobian[i].doubleValue());	  final    double[]    ji    =    jf.value(jacobian[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
295	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  0,  i);  [CE]  no  suitable  method  found  for  min(double,int,int)  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  0,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  0,  i);	  cols    =    Math.min(residualsWeights[i],    0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,int)	60	None	replace
296	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  resins[i]);  [CE]  cannot  find  symbol  resins  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  resins[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  resins[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  resins	80	None	replace
297	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  null);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  null);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  null);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	78	None	replace
298	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  values);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  values);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  values);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  cannot  find  symbol  values	78	None	replace
299	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  i);	  double[]    cols    =    jF.value(i,    residualsIterations);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	78	None	replace
300	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[cols.length  -  1  +  i];  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[cols.length  -  1  +  i];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[cols.length  -  1  +  i];	  final    double[]    ji    =    new    double[cols.length    -    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
301	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  1);	  int    cols    =    Math.min(residualsWeights[i],    2);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
302	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(value);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(value);	  final    double[]    ji    =    jacobian[i].value(period);    	non-compiled	[CE]  cannot  find  symbol  value	82	None	replace
303	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(total);  [CE]  cannot  find  symbol  total  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(total);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(total);	  final    double[]    ji    =    jacobian[i].value(period);    	non-compiled	[CE]  cannot  find  symbol  total	82	None	replace
304	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  0);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  0);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
305	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  0,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  0,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  0,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
306	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  rows);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
307	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cols,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	31	None	replace
308	[BUG]  [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker();  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VariableConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker();	  VariableConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
309	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(period,  i);  [CE]  cannot  find  symbol  period  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(period,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(period,  i);	  final    double[]    ji    =    jF.value(i);    	non-compiled	[CE]  cannot  find  symbol  period	67	None	replace
310	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  2  -  jacobian[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  2  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  2  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
311	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(0,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(0,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(0,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(0);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	38	None	replace
312	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows,  i].length];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows,  i].length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows,  i].length];	  final    double[]    ji    =    new    double[rows.length];    	non-compiled	[CE]  ']'  expected	3	None	replace
313	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows[i]  +  1);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  rows[i]  +  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  array  required,  but  int  found	11	None	replace
314	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  0,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  0,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  0,  residualsWeights);	  double[]    cols    =    jF.value(i,    residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	26	None	replace
315	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  i);  [CE]  no  suitable  method  found  for  min(double[],double[],int)  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian[i],  i);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double[],int)	99	None	replace
316	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  row);  [CE]  cannot  find  symbol  row  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian[i],  row);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  row	99	None	replace
317	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  0);  [CE]  no  suitable  method  found  for  min(double[],double[],int)  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian[i],  0);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double[],int)	99	None	replace
318	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  cost.doubleValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  cost.doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  cost.doubleValue();	  final    double[]    ji    =    cols[i].doubleValue();    	non-compiled	[CE]  ';'  expected	34	None	replace
319	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  targetValues);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  targetValues);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i],  cost,  targetValues);	  cols    =    Math.min(residualsWeights[i],    cols[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
320	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  coefficient);  [CE]  array  required,  but  int  found  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  cols[i],  coefficient);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  cols[i],  coefficient);	  cols    =    Math.min(residualsWeights[i],    cols[i],    cost);    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
321	[BUG]  [BUGGY]  double[]  cols  =  jF.value(point,  i,  negatives);  [CE]  cannot  find  symbol  negatives  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(point,  i,  negatives);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(point,  i,  negatives);	  double[]    cols    =    jF.value(point,    i);    	non-compiled	[CE]  cannot  find  symbol  negatives	28	None	replace
322	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  rows));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  rows));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  rows));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
323	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  columns));  [CE]  cannot  find  symbol  columns  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  columns));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  columns));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  cannot  find  symbol  columns	76	None	replace
324	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[len,  i.length];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[len,  i.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[len,  i.length];	  final    double[]    ji    =    new    double[cols,    i.length];    	non-compiled	[CE]  ']'  expected	62	None	replace
325	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  rows[i]  -  1);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  rows[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  rows[i]  -  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  array  required,  but  int  found	41	None	replace
326	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jF.value(i));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jF.value(i));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jF.value(i));	  int    cols    =    Math.min(residualsWeights[i],    row);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	40	None	replace
327	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  row);  [CE]  cannot  find  symbol  row  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  row);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol  row	43	None	replace
328	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i,  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i,  DEFAULT_MAX_ITERATIONS);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	77	None	replace
329	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i,  negatives);  [CE]  cannot  find  symbol  negatives  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i,  negatives);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i,  negatives);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  cannot  find  symbol  negatives	77	None	replace
330	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  dataArea,  residuals);  [CE]  cannot  find  symbol  dataArea  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  dataArea,  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  dataArea,  residuals);	  double[]    cols    =    jF.value(i,    residuals);    	non-compiled	[CE]  cannot  find  symbol  dataArea	79	None	replace
331	[BUG]  [BUGGY]  final  double[]  ji  =  columns[i].value(jacobian);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  columns[i].value(jacobian);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  columns[i].value(jacobian);	  final    double[]    ji    =    jacobian[i].value(cols);    	non-compiled	[CE]  cannot  find  symbol  columns	71	None	replace
332	[BUG]  [BUGGY]  cols  =  Math.min(cols[i],  jacobian[i]);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols[i],  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols[i],  jacobian[i]);	  cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  array  required,  but  int  found	100	None	replace
333	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  row,  jacobian[i]);  [CE]  cannot  find  symbol  row  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  row,  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  row,  jacobian[i]);	  cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol  row	100	None	replace
334	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value(point);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value(point);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i].value(point);	  final    double[]    ji    =    jacobian[i].value(point);    	non-compiled	[CE]  ')'  expected	37	None	replace
335	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i]);  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i]);	  final    double[]    ji    =    jacobian[i].value(point);    	non-compiled	[CE]  incompatible  types	37	None	replace
336	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  DEFAULT_MAX_ITERATIONS);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  DEFAULT_MAX_ITERATIONS);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  DEFAULT_MAX_ITERATIONS);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	27	None	replace
337	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  residualsWeights[i]);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  residualsWeights[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  residualsWeights[i]);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	27	None	replace
338	[BUG]  [BUGGY]  final  double[]  cols  =  new  double[ji.length];  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  cols  =  new  double[ji.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  cols  =  new  double[ji.length];	  final    double[]    cols    =    new    double[cols.length];    	non-compiled	[CE]  cannot  find  symbol  ji	4	None	replace
339	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
340	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(params,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);  [CE]  cannot  find  symbol  params  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(params,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(params,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  params	72	None	replace
341	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  range[i]);  [CE]  cannot  find  symbol  range  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  range[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  /  range[i]);	  int    cols    =    Math.min(residualsWeights[i]    /    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  range	14	None	replace
342	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  parameters[i]);  [CE]  cannot  find  symbol  parameters  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  parameters[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  /  parameters[i]);	  int    cols    =    Math.min(residualsWeights[i]    /    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  parameters	14	None	replace
343	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  polygons[i]);  [CE]  cannot  find  symbol  polygons  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  /  polygons[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  /  polygons[i]);	  int    cols    =    Math.min(residualsWeights[i]    /    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  polygons	14	None	replace
344	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(cols));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(cols));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(cols));	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    point);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
345	[BUG]  [BUGGY]  cols  =  Math.sqrt(ji[i]);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.sqrt(ji[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.sqrt(ji[i]);	  cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	85	None	replace
346	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  4];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  jacobian[i  *  4];	  final    double[]    ji    =    jacobian[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	15	replace
347	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  *  4];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  *  4];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  *  4];	  final    double[]    ji    =    jacobian[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	15	replace
348	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  1].value(i);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  1].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  1].value(i);	  final    double[]    ji    =    jacobian[i    +    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
349	[BUG]  [BUGGY]  final  double[]  ji  =  f.value(i);  [CE]  cannot  find  symbol  f  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  f.value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  f.value(i);	  final    double[]    ji    =    jf.value(i);    	non-compiled	[CE]  cannot  find  symbol  f	68	None	replace
350	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  columns[i]  -  1);  [CE]  cannot  find  symbol  columns  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  columns[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  columns[i]  -  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  cannot  find  symbol  columns	10	None	replace
351	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows  -  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  rows  -  1);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
352	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows  -  jacobian[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  rows  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	64	None	replace
353	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  DEFAULT_MAX_ITERATIONS);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  DEFAULT_MAX_ITERATIONS);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  DEFAULT_MAX_ITERATIONS);	  cols    =    Math.min(residualsWeights[i],    i);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
354	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.generateVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.generateVariableConvergenceChecker();  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.generateVariableConvergenceChecker();	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
355	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows[i],  i);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  rows[i],  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  rows[i],  i);	  int    cols    =    Math.min(residualsWeights[i],    rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	73	None	replace
356	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  column);  [CE]  cannot  find  symbol  column  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  0,  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  0,  column);	  int    cols    =    Math.min(residualsWeights[i],    row,    column);    	non-compiled	[CE]  cannot  find  symbol  column	93	None	replace
357	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  value,  column);  [CE]  cannot  find  symbol  value  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  value,  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  value,  column);	  int    cols    =    Math.min(residualsWeights[i],    row,    column);    	non-compiled	[CE]  cannot  find  symbol  value	93	None	replace
358	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	51	None	replace
359	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	51	None	replace
360	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  residualsWeights);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  residualsWeights);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  residualsWeights);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ';'  expected	101	None	replace
361	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  jF);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  jF);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  jF);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
362	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  -  1,  false);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  -  1,  false);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i  -  1,  false);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    false);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	70	None	replace
363	[BUG]  [BUGGY]  final  double[]  ji  =  this.jacobian[i].value(i);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  this.jacobian[i].value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  this.jacobian[i].value(i);	  final    double[]    ji    =    this.jacobian[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
364	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  1]  [2];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  1]  [2];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  1]  [2];	  final    double[]    ji    =    jacobian[i    +    1]    [0];    	non-compiled	[CE]  incompatible  types	89	None	replace
365	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[rows.length  +  1];  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[rows.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[rows.length  +  1];	  final    double[]    ji    =    new    double[cols.length    +    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
366	[BUG]  [BUGGY]  cols  =  Math.min(cols,  residualsWeights[i],  -Math.sqrt(jacobian[i]));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(cols,  residualsWeights[i],  -Math.sqrt(jacobian[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(cols,  residualsWeights[i],  -Math.sqrt(jacobian[i]));	  cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
367	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  coefficient));  [CE]  cannot  find  symbol  coefficient  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  coefficient));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  coefficient));	  cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  cannot  find  symbol  coefficient	20	None	replace
368	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(point,  i);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(point,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(point,  i);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
369	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(rows,  i);  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(rows,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(rows,  i);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  cannot  find  symbol  jf	95	None	replace
370	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(rows,  i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(rows,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(rows,  i);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	95	None	replace
371	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobian,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobian,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jacobian,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    jacobian);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	61	None	replace
372	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value(i));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value(i));  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i].value(i));	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
373	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i.next);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i.next);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i.next);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(0);    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
374	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  cols,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  cols,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  cols,  residualsWeights);	  double[]    cols    =    jF.value(i,    cols);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	29	None	replace
375	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  4];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  4];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    +    2];    final  double[]  ji  =  jacobian[i  +  4];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	8	None	add
376	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(false);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(false);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(false);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	83	None	replace
377	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(false);  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(false);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(false);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  cannot  find  symbol  jf	83	None	replace
378	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  parameters[i].length);  [CE]  cannot  find  symbol  parameters  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  parameters[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  parameters[i].length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  cannot  find  symbol  parameters	98	None	replace
379	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jF.value(i).length);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jF.value(i).length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jF.value(i).length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	98	None	replace
380	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jF.length);  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jF.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jF.length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  cannot  find  symbol  length	98	None	replace
381	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(rows);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(rows);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(rows);	  final    double[]    ji    =    jacobian[i].value(rows);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	94	None	replace
382	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value(rows);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].value(rows);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i].value(rows);	  final    double[]    ji    =    jacobian[i].value(rows);    	non-compiled	[CE]  ')'  expected	94	None	replace
383	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(rows);  [CE]  cannot  find  symbol  jf  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(rows);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(rows);	  final    double[]    ji    =    jacobian[i].value(rows);    	non-compiled	[CE]  cannot  find  symbol  jf	94	None	replace
384	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cost);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    targetValues);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	33	None	replace
385	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues,  residualsWeights);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  targetValues,  residualsWeights);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    targetValues);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	33	None	replace
386	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1  -  rows[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -1  -  rows[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -1  -  rows[i]);	  int    cols    =    Math.min(residualsWeights[i],    -rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	63	None	replace
387	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  2,  -  cols[i]);  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  2,  -  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  2,  -  cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    cost    -    cols[i]);    	non-compiled	[CE]  array  required,  but  int  found	15	None	replace
388	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  level  -  cols[i]);  [CE]  cannot  find  symbol  level  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  level  -  cols[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  level  -  cols[i]);	  int    cols    =    Math.min(residualsWeights[i],    cost    -    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  level	15	None	replace
389	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value();  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value();	  final    double[]    ji    =    jacobian[i].value();    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	17	None	replace
390	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value();  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value();	  final    double[]    ji    =    jacobian[i].value();    	non-compiled	[CE]  cannot  find  symbol  jf	17	None	replace
391	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights,  columns[i]);  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights,  columns[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights,  columns[i]);	  cols    =    Math.min(cols,    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  columns	59	None	replace
392	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  1,  rows  -  jacobian[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  1,  rows  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  1,  rows  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows    -    cols[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	64	None	replace
393	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(i);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(i);	  VectorialConvergenceChecker    convergenceChecker    =    checker.getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
394	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  11];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  jacobian[i  +  11];	  final    double[]    ji    =    jacobian[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	16	replace
395	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  11];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  11];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  11];	  final    double[]    ji    =    jacobian[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	16	replace
396	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  1);	  cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	100	None	replace
397	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i]  *  cost);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i]  *  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  jacobian[i]  *  cost);	  cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	100	None	replace
398	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  graph);  [CE]  cannot  find  symbol  graph  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  graph);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jF,  graph);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jF,    point);    	non-compiled	[CE]  cannot  find  symbol  graph	104	None	replace
399	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(this);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(this);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(this);	  final    double[]    ji    =    jacobian[i].value();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
400	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  -  1);	  int    cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	92	None	replace
401	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i].doubleValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i].doubleValue());  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jacobian[i].doubleValue());	  int    cols    =    Math.min(residualsWeights[i],    jacobian[i]);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
402	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  -  1);  [CE]  cannot  find  symbol  row  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  -  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  cannot  find  symbol  row	10	None	replace
403	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  -  1);  [CE]  cannot  find  symbol  row  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  -  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  row,  cols[i]  -  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    -    1);    	non-compiled	[CE]  cannot  find  symbol  row	41	None	replace
404	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights,  columnValues[i]);  [CE]  cannot  find  symbol  columnValues  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights,  columnValues[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights,  columnValues[i]);	  cols    =    Math.min(cols,    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  columnValues	59	None	replace
405	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  1].value();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  1].value();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i  +  1].value();	  final    double[]    ji    =    jacobian[i    +    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
406	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  jacobian.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  jacobian.length);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  jacobian.length);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ';'  expected	101	None	replace
407	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  residuals);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  residuals);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  residuals);	  final    double[]    ji    =    cols[i],    cost);    	non-compiled	[CE]  ';'  expected	101	None	replace
408	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(rows,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(rows,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(rows,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  cols);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	51	None	replace
409	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  points);  [CE]  cannot  find  symbol  points  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  points);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(cols,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  points);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    cols);    	non-compiled	[CE]  cannot  find  symbol  points	51	None	replace
410	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  residuals);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  residuals);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	27	None	replace
411	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols[i],  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols[i],  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols[i],  residualsWeights);	  double[]    cols    =    jF.value(cols[i]);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	27	None	replace
412	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  column);  [CE]  cannot  find  symbol  column  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  column);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker(i,  column);	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol  column	43	None	replace
413	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  polymorphics[i]);  [CE]  cannot  find  symbol  polymorphics  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  polymorphics[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  polymorphics[i]);	  int    cols    =    Math.min(residualsWeights[i],    rows[i]);    	non-compiled	[CE]  cannot  find  symbol  polymorphics	73	None	replace
414	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(false,  cost);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(false,  cost);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(false,  cost);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
415	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(residuals[i]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(residuals[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(residuals[i]);	  final    double[]    ji    =    jacobian[i].value(false);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
416	[BUG]  [BUGGY]  final  double[]  ji  =  rows[i  +  1];  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  rows[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  rows[i  +  1];	  final    double[]    ji    =    cols[i    +    1];    	non-compiled	[CE]  array  required,  but  int  found	5	None	replace
417	[BUG]  [BUGGY]  int  cols  =  Math.min(residuals[i],  jacobian[i]  -  residuals[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residuals[i],  jacobian[i]  -  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residuals[i],  jacobian[i]  -  residuals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	81	None	replace
418	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  points);  [CE]  cannot  find  symbol  points  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  points);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  points);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    i);    	non-compiled	[CE]  cannot  find  symbol  points	52	None	replace
419	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].getValue(i);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(jacobian[i].getValue(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(jacobian[i].getValue(i);	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	35	None	replace
420	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(residuals[i].value());  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(residuals[i].value());  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(residuals[i].value());	  final    double[]    ji    =    jF.value(jacobian[i].value(i);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
421	[BUG]  [BUGGY]  final  double[]  ji  =  rows[i].value(jacobian,  i);  [CE]  array  required,  but  int  found  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  rows[i].value(jacobian,  i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  rows[i].value(jacobian,  i);	  final    double[]    ji    =    jacobian[i].value(rows,    i);    	non-compiled	[CE]  array  required,  but  int  found	95	None	replace
422	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  column,  residuals);  [CE]  cannot  find  symbol  column  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  column,  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  column,  residuals);	  int    cols    =    Math.min(residualsWeights[i],    row,    column);    	non-compiled	[CE]  cannot  find  symbol  column	93	None	replace
423	[BUG]  [BUGGY]  final  double[]  ji  =  method.value(i);  [CE]  cannot  find  symbol  method  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  method.value(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  method.value(i);	  final    double[]    ji    =    jf.value(i);    	non-compiled	[CE]  cannot  find  symbol  method	68	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[jacobian.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  new  double[jacobian.length  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    1];    	compilable	  [FE]  AssertionFailedError  	54	14	replace
425	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[jacobian.length  +  1];  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[jacobian.length  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[jacobian.length  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    1];    	compilable	  [FE]  AssertionFailedError  	54	14	replace
426	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  this.jacobian[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  this.jacobian[i  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	16	replace
427	[BUG]  [BUGGY]  final  double[]  ji  =  this.jacobian[i  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  this.jacobian[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  this.jacobian[i  +  1];	  final    double[]    ji    =    jacobian[i    +    1];    final    double[]    ji    =    jacobian[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	16	replace
428	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  i  +  1,  rows);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  i  +  1,  rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  i  +  1,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(jacobian,    i);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	103	None	replace
429	[BUG]  [BUGGY]  final  double[]  ji  =  rows[i].doubleValue();  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  rows[i].doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  rows[i].doubleValue();	  final    double[]    ji    =    cols[i].doubleValue();    	non-compiled	[CE]  array  required,  but  int  found	34	None	replace
430	[BUG]  [BUGGY]  final  double[]  ji  =  columns[i].doubleValue();  [CE]  cannot  find  symbol  columns  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  columns[i].doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  columns[i].doubleValue();	  final    double[]    ji    =    cols[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  columns	34	None	replace
431	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  cost);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  cost);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker().variables;    	non-compiled	[CE]  ';'  expected	66	None	replace
432	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  cost;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  cost;  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker().variables,  cost;	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker().variables;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
433	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i],  jacobian.value;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i],  jacobian.value;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i],  jacobian.value;	  final    double[]    ji    =    cols[i].value;    	non-compiled	[CE]  ';'  expected	102	None	replace
434	[BUG]  [BUGGY]  final  double[]  ji  =  cols[i].value,  jacobian.length;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  cols[i].value,  jacobian.length;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  cols[i].value,  jacobian.length;	  final    double[]    ji    =    cols[i].value;    	non-compiled	[CE]  ';'  expected	102	None	replace
435	[BUG]  [BUGGY]  final  double[]  ji  =  polymorphics[i].doubleValue();  [CE]  cannot  find  symbol  polymorphics  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  polymorphics[i].doubleValue();  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  polymorphics[i].doubleValue();	  final    double[]    ji    =    this.jacobian[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  polymorphics	84	None	replace
436	[BUG]  [BUGGY]  double[]  cols  =  jF.value(i,  row,  cols);  [CE]  cannot  find  symbol  row  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(i,  row,  cols);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(i,  row,  cols);	  double[]    cols    =    jF.value(i,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	29	None	replace
437	[BUG]  [BUGGY]  double[]  cols  =  jF.value(residualsWeights,  i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(residualsWeights,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(residualsWeights,  i);	  double[]    cols    =    jF.value(i,    residualsWeights);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	26	None	replace
438	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].getValue(i);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].getValue(i);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(jacobian[i].getValue(i);	  final    double[]    ji    =    jf.value(jacobian[i].value(i);    	non-compiled	[CE]  ')'  expected	36	None	replace
439	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].getValue(i));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].getValue(i));  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(jacobian[i].getValue(i));	  final    double[]    ji    =    jf.value(jacobian[i].value(i);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
440	[BUG]  [BUGGY]  final  double[]  ji  =  columnValues[i].value(jacobian);  [CE]  cannot  find  symbol  columnValues  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  columnValues[i].value(jacobian);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  columnValues[i].value(jacobian);	  final    double[]    ji    =    jacobian[i].value(cols);    	non-compiled	[CE]  cannot  find  symbol  columnValues	71	None	replace
441	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows,  i);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  rows,  i);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	53	None	replace
442	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  [CE]  cannot  find  symbol  row  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  row);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    rows);    	non-compiled	[CE]  cannot  find  symbol  row	53	None	replace
443	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor  -  jacobian[i]);  [CE]  cannot  find  symbol  factor  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i],    cost    -    cols[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	15	None	replace
444	[BUG]  [BUGGY]  double[]  cols  =  jF.value(cols,  i  +  1,  residualsWeights);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(cols,  i  +  1,  residualsWeights);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(cols,  i  +  1,  residualsWeights);	  double[]    cols    =    jF.value(cols,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	77	None	replace
445	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[residualsWeights.length].;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length];  final  double[]  ji  =  new  double[residualsWeights.length].;  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    new    double[residualsWeights.length];    final  double[]  ji  =  new  double[residualsWeights.length].;	  	non-compiled	[CE]  <identifier>  expected	90	None	add
446	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i]  -  jacobian[i]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i]  -  jacobian[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i]  -  jacobian[i]);	  int    cols    =    Math.min(residualsWeights[i]    -    jacobian[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
447	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  -  jacobian[i].length);  [CE]  no  suitable  method  found  for  min(double)  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i]  -  jacobian[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i]  -  jacobian[i].length);	  int    cols    =    Math.min(residualsWeights[i]    -    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	13	None	replace
448	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  data[i].length);  [CE]  cannot  find  symbol  data  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  data[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  data[i].length);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i].length);    	non-compiled	[CE]  cannot  find  symbol  data	98	None	replace
449	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  jacobian[i]  +  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
450	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  +  1);  [CE]  cannot  find  symbol  row  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  row,  cols[i]  +  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  row	11	None	replace
451	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  columns[i]  +  1);  [CE]  cannot  find  symbol  columns  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  columns[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  columns[i]  +  1);	  int    cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  columns	11	None	replace
452	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  this.value);  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  this.value);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  this.value);	  int    cols    =    Math.min(residualsWeights[i],    row);    	non-compiled	[CE]  cannot  find  symbol  value	40	None	replace
453	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(0);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  checker.getVariableConvergenceChecker(0);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(0);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
454	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(cost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(cost);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(cost);	  final    double[]    ji    =    jacobian[i].value(period);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
455	[BUG]  [BUGGY]  cols  =  Math.sqrt(ji,  residuals[i]);  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.sqrt(ji,  residuals[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.sqrt(ji,  residuals[i]);	  cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  ji	85	None	replace
456	[BUG]  [BUGGY]  cols  =  Math.sqrt(jacobian[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.sqrt(jacobian[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.sqrt(jacobian[i]);	  cols    =    Math.sqrt(residuals[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	85	None	replace
457	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  1];  [CE]  variable  ji  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i  +  2];  final  double[]  ji  =  jacobian[i  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final    double[]    ji    =    jacobian[i    +    2];    final  double[]  ji  =  jacobian[i  +  1];	  	non-compiled	[CE]  variable  ji  is  already  defined  in  method  updateJacobian()	8	None	add
458	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  residuals[i]);  [CE]  no  suitable  method  found  for  min(double[],double[],double)  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights,  jacobian[i],  residuals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights,  jacobian[i],  residuals[i]);	  int    cols    =    Math.min(residualsWeights,    jacobian[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double[],double)	99	None	replace
459	[BUG]  [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  reziduals[i]);  [CE]  cannot  find  symbol  reziduals  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double  cols  =  Math.min(residualsWeights[i],  reziduals[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double  cols  =  Math.min(residualsWeights[i],  reziduals[i]);	  int    cols    =    Math.min(residualsWeights[i],    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  reziduals	80	None	replace
460	[BUG]  [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  createVariableConvergenceChecker();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VariableConvergenceChecker  convergenceChecker  =  createVariableConvergenceChecker();  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VariableConvergenceChecker  convergenceChecker  =  createVariableConvergenceChecker();	  VariableConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
461	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(cols,  i));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(cols,  i));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(cols,  i));	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    point);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
462	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(rows,  i));  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(rows,  i));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  jF.value(rows,  i));	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    point);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	32	None	replace
463	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[len,  cols.length];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[len,  cols.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[len,  cols.length];	  final    double[]    ji    =    new    double[cols,    i.length];    	non-compiled	[CE]  ']'  expected	62	None	replace
464	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[2  +  cols,  i.length];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[2  +  cols,  i.length];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[2  +  cols,  i.length];	  final    double[]    ji    =    new    double[cols,    i.length];    	non-compiled	[CE]  ']'  expected	62	None	replace
465	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  cols[i].length);  [CE]  cannot  find  symbol  row  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  row,  cols[i].length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  row,  cols[i].length);	  int    cols    =    Math.min(residualsWeights[i],    cols[i].length);    	non-compiled	[CE]  cannot  find  symbol  row	12	None	replace
466	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker().variant,  jacobian;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker().variant,  jacobian;  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVectorialConvergenceChecker().variant,  jacobian;	  VectorialConvergenceChecker    convergenceChecker    =    getVectorialConvergenceChecker().variant;    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
467	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  row);  [CE]  cannot  find  symbol  row  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  getVariableConvergenceChecker(i,  row);	  VectorialConvergenceChecker    convergenceChecker    =    getVariableConvergenceChecker(i);    	non-compiled	[CE]  cannot  find  symbol  row	47	None	replace
468	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  rows[i]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  rows[i]);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  rows[i]);	  cols    =    Math.min(cols[i],    residualsWeights[i]);    	non-compiled	[CE]  array  required,  but  int  found	19	None	replace
469	[BUG]  [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].value(point);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jf.value(jacobian[i].value(point);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jf.value(jacobian[i].value(point);	  final    double[]    ji    =    jacobian[i].value(point);    	non-compiled	[CE]  ')'  expected	37	None	replace
470	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(point,  cost);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(point,  cost);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(point,  cost);	  final    double[]    ji    =    jacobian[i].value(point);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
471	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
472	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point.length);  [CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point.length);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(jacobian,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  point.length);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    jacobian.length);    	non-compiled	[CE]  VectorialConvergenceChecker  is  abstract;  cannot  be  instantiated	72	None	replace
473	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  row);  [CE]  cannot  find  symbol  row  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  row);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(i,  row);	  VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(i,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	31	None	replace
474	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights[i]];  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights[i]];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[residualsWeights[i]];	  final    double[]    ji    =    new    double[residualsWeights.length];    	non-compiled	[CE]  possible  loss  of  precision	91	None	replace
475	[BUG]  [BUGGY]  double[]  cols  =  jF.value(point,  i,  residuals);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(point,  i,  residuals);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(point,  i,  residuals);	  double[]    cols    =    jF.value(point,    i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	28	None	replace
476	[BUG]  [BUGGY]  final  double[]  ji  =  jacobian[i].value(point.residuals[i]);  [CE]  cannot  find  symbol  residuals  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jacobian[i].value(point.residuals[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jacobian[i].value(point.residuals[i]);	  final    double[]    ji    =    jacobian[i].value(residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  residuals	16	None	replace
477	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[len  +  1];  [CE]  cannot  find  symbol  len  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[len  +  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[len  +  1];	  final    double[]    ji    =    new    double[cols.length    +    1];    	non-compiled	[CE]  cannot  find  symbol  len	1	None	replace
478	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor);  [CE]  cannot  find  symbol  factor  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  factor);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  factor);	  int    cols    =    Math.min(residualsWeights[i],    coefficient);    	non-compiled	[CE]  cannot  find  symbol  factor	97	None	replace
479	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i]  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  jacobian[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  jacobian[i]  +  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
480	[BUG]  [BUGGY]  cols  =  Math.min(residualsWeights[i],  rows[i]  +  1);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  cols  =  Math.min(residualsWeights[i],  rows[i]  +  1);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	cols  =  Math.min(residualsWeights[i],  rows[i]  +  1);	  cols    =    Math.min(residualsWeights[i],    cols[i]    +    1);    	non-compiled	[CE]  array  required,  but  int  found	42	None	replace
481	[BUG]  [BUGGY]  double[]  cols  =  jF.value(residuals,  i);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  double[]  cols  =  jF.value(residuals,  i);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	double[]  cols  =  jF.value(residuals,  i);	  double[]    cols    =    jF.value(i,    residuals);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	79	None	replace
482	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  coefficient));  [CE]  cannot  find  symbol  coefficient  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  coefficient));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  coefficient));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  cannot  find  symbol  coefficient	76	None	replace
483	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  residuals[i]));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  residuals[i]));  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -Math.sqrt(jacobian[i],  residuals[i]));	  int    cols    =    Math.min(residualsWeights[i],    -Math.sqrt(jacobian[i]));    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
484	[BUG]  [BUGGY]  final  double[]  ji  =  jF.value(residuals[i]);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  jF.value(residuals[i]);  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  jF.value(residuals[i]);	  final    double[]    ji    =    jF.value(i);    	non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	67	None	replace
485	[BUG]  [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -rows[i],  cost);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  Math.min(residualsWeights[i],  -rows[i],  cost);  [BUGGY]      final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	int  cols  =  Math.min(residualsWeights[i],  -rows[i],  cost);	  int    cols    =    Math.min(residualsWeights[i],    -rows[i]);    	non-compiled	[CE]  array  required,  but  int  found	63	None	replace
486	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length  -  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	add	final  double[]  ji  =  new  double[residualsWeights.length  -  1];	  final    double[]    ji    =    new    double[cols.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	15	replace
487	[BUG]  [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {      [BUGGY]  final  double[]  ji  =  new  double[residualsWeights.length  -  1];  [BUGGY]      final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	191	191	1	replace	final  double[]  ji  =  new  double[residualsWeights.length  -  1];	  final    double[]    ji    =    new    double[cols.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	15	replace
