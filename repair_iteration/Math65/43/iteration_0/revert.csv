projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.results!=null){for(inti=0;i<iterations;i++){increaseIterationsCounter();}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.results!=null){for(inti=0;i<iterations;i++){increaseIterationsCounter(i,cost);}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.results!=null){for(inti=0;i<iterations;i++){increaseIterationsCounter(i);}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.results!=null){for(inti=0,maxIterations=iterations;i<maxIterations;++i){increaseIterationsCounter(i,cost);}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,cols=iterations.length;i<cols.length;i++){VectorialConvergenceCheckerconvergenceChecker=function.getVectorialConvergenceChecker();targetValues[i]=convergenceChecker.
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,cols=iterations.length;i<cols.length;i++){double[][]jacobianEvaluations=function.getVariableValues();for(inti=0;i<iterations.length;++i){
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,cols=iterations.length;i<cols.length;i++){VectorialConvergenceCheckerconvergenceChecker=function.getVectorialConvergenceChecker();convergenceChecker.addAll(convergenceChecker.
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,cols=iterations.length;i<cols.length;i++){VectorialConvergenceCheckerconvergenceChecker=function.getVectorialConvergenceChecker();
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,cols=iterations.length;i<cols.length;i++){VectorialConvergenceCheckerconvergenceChecker=function.getVectorialConvergenceChecker();convergenceChecker.addAll(convergenceChecker);
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.resultEvaluations!=null){for(inti=0;i<iterations;i++){increaseIterationsCounter();}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.resultEvaluations!=null){for(inti=0;i<iterations;i++){increaseIterationsCounter(i);}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.resultEvaluations!=null){for(inti=0,maxIterations=iterations;i<maxIterations;++i){increaseIterationsCounter();}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.resultEvaluations!=null){for(inti=0,maxIterations=iterations;i<maxIterations;++i){increaseIterationsCounter(i);}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176if(this.resultEvaluations!=null){for(inti=0;i<iterations;i++){increaseIterationsCounter(i,false);}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176this.targetValues.incrementIterationsCounter();
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176this.resultEvaluations=Math.max(this.result,objectiveEvaluations);
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176this.resultEvaluations=newdouble[iterations.size()][0];
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176this.resultEvaluations=newdouble[iterations.size()];
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,iterations=targetValues.size();i<iterations;++i){VectorialConvergenceCheckerconvergenceChecker=newVectorialConvergenceChecker(this,targetValues[i]);
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,iterations=targetValues.size();i<iterations;++i){VectorialConvergenceCheckerconvergenceChecker=newVectorialConvergenceChecker(targetValues[i]);convergenceChecker.add
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,iterations=targetValues.size();i<iterations;++i){VectorialConvergenceCheckerconvergenceChecker=newVectorialConvergenceChecker(targetValues[i]);convergenceChecker.
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,iterations=targetValues.size();i<iterations;++i){VectorialConvergenceCheckerconvergenceChecker=function.getVarianceChecker();if(convergenceChecker.is
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176for(inti=0,iterations=targetValues.size();i<iterations;++i){VectorialConvergenceCheckerconvergenceChecker=function.getVarianceChecker();if(convergenceChecker!=null){
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176intobjectiveEvaluations=function.incrementIterations();if(objectitiveEvaluations>maxIterations){thrownewOptimizationException("");}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176intobjectiveEvaluations=function.incrementIterations();if(objectitiveEvaluations>0){thrownewOptimizationException("");}
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176intobjectiveEvaluations=function.incrementIterations();
projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java176intobjectiveEvaluations=function.incrementIterations();if(objectitiveEvaluations>0){for(inti=0;i<objectiveEvaluations;++i){increaseIterations(objectitiveEvaluations[i]);}
