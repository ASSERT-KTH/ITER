bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  ][1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  ][1];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[iterations.size()  ][1];	  this.resultEvaluations    =    new    double[iterations.size()    ][0];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  +  1][0];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  +  1][0];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[iterations.size()  +  1][0];	  this.resultEvaluations    =    new    double[iterations.size()    ][0];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  *  2][0];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  *  2][0];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[iterations.size()  *  2][0];	  this.resultEvaluations    =    new    double[iterations.size()    ][0];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.add    	non-compiled	[CE]  <identifier>  expected	21	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.add  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.add  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.add	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.add    	non-compiled	[CE]  not  a  statement	21	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.length;  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter();  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter();  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  Iterator  <  Integer>  iterations  =  this.results.iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  Iterator  <  Integer>  iterations  =  this.results.iterator();  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	Iterator  <  Integer>  iterations  =  this.results.iterator();	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  maxIterations.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  maxIterations.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  maxIterations.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
18	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  +  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  +  1];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[iterations.size()  +  1];	  this.resultEvaluations    =    new    double[iterations.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  -  1];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[iterations.size()  -  1];	  this.resultEvaluations    =    new    double[iterations.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[maxIterations.size()  ];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[maxIterations.size()  ];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[maxIterations.size()  ];	  this.resultEvaluations    =    new    double[iterations.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  cost);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  cost);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  cost);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  result);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  result);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  result);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  cost);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  cost);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  cost);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	22	None	replace
26	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	22	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  incrementIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  incrementIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  incrementIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(0);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(0);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(0);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  >=  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  >=  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  >=  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  throw  new  OptimizationException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  throw  new  OptimizationException( " ");  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  throw  new  OptimizationException( " ");  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    maxIterations)    {    throw    new    OptimizationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
32	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  maxIterations;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  maxIterations;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  maxIterations;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
37	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  false);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  incrementIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  incrementIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.resultEvaluations;  ++i)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.resultEvaluations;  ++i)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.resultEvaluations;  ++i)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  >=  maxIterations;  ++i)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  >=  maxIterations;  ++i)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  >=  maxIterations;  ++i)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  Iterator  <  Integer>  iterations  =  this.resultEvaluations.iterator();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  Iterator  <  Integer>  iterations  =  this.resultEvaluations.iterator();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	Iterator  <  Integer>  iterations  =  this.resultEvaluations.iterator();	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  int  resultEvaluationsCounter  =  this.resultEvaluations.length;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluationsCounter  =  this.resultEvaluations.length;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluationsCounter  =  this.resultEvaluations.length;	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    targetValues[i]    =    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  targetValues.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  targetValues.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  targetValues.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    targetValues[i]    =    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  int  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    targetValues[i]    =    convergenceChecker.    	non-compiled	[CE]  >  expected	6	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations()  -  1;  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations()  -  1;	  int    objectiveEvaluations    =    function.incrementIterations();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
53	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations(iterations);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations(iterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations(iterations);	  int    objectiveEvaluations    =    function.incrementIterations();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
54	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations()  +  1;  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations()  +  1;	  int    objectiveEvaluations    =    function.incrementIterations();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(values,  0,  jacobianEvaluations,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(values,  0,  jacobianEvaluations,  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(values,  0,  jacobianEvaluations,	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(variant,  0,  jacobianEvaluations,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(variant,  0,  jacobianEvaluations,  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(variant,  0,  jacobianEvaluations,	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(values,  0,  jacobianEvaluations,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(values,  0,  jacobianEvaluations,  0,  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.toArray(new  double[iterations.size()  ]);  System.arraycopy(values,  0,  jacobianEvaluations,  0,	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariables();  for(int  i  =  0;  i  <  jacobianEvaluations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariables();  for(int  i  =  0;  i  <  jacobianEvaluations.length;  ++i)  {  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations.length;  i  <  maxIterations;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariables();  for(int  i  =  0;  i  <  jacobianEvaluations.length;  ++i)  {	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
59	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  ++i)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  ++i)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  ++i)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  for(int  cols  =  0;  cols  <  iterations.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  cols  =  0;  cols  <  iterations.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  cols  =  0;  cols  <  iterations.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
65	[BUG]  [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  maxIterations);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  maxIterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  Math.max(this.result,  maxIterations);	  this.resultEvaluations    =    Math.max(this.result,    objectiveEvaluations);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  iterations);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  iterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  Math.max(this.result,  iterations);	  this.resultEvaluations    =    Math.max(this.result,    objectiveEvaluations);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  1);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  Math.max(this.result,  1);	  this.resultEvaluations    =    Math.max(this.result,    objectiveEvaluations);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  Math.max(this.result,  0);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  Math.max(this.result,  0);	  this.resultEvaluations    =    Math.max(this.result,    objectiveEvaluations);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  throw  new  OptimizationException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  throw  new  OptimizationException( " ");  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  throw  new  OptimizationException( " ");  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    throw    new    OptimizationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  cost);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  cost);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  cost);  }	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  result);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  result);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  result);  }	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  cost);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  cost);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  cost);  }	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(0,  cost);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(0,  cost);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(0,  cost);  }	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  maxIterations;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  maxIterations;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  maxIterations;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  maxIterations;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  this.targetValues.incrementIterations();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.targetValues.incrementIterations();  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.targetValues.incrementIterations();	  this.targetValues.incrementIterationsCounter();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  this.targetValues.incrementIterations(iterations);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.targetValues.incrementIterations(iterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.targetValues.incrementIterations(iterations);	  this.targetValues.incrementIterationsCounter();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  this.targetValues.incrementIterationsCounter(iterations);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.targetValues.incrementIterationsCounter(iterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.targetValues.incrementIterationsCounter(iterations);	  this.targetValues.incrementIterationsCounter();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter(i);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
87	[BUG]  [BUGGY]  double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	double  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    for(int    i    =    0;    i    <    objectiveEvaluations;    ++i)    {    increaseIterations(objectitiveEvaluations[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
88	[BUG]  [BUGGY]  Integer  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  Integer  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	Integer  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    for(int    i    =    0;    i    <    objectiveEvaluations;    ++i)    {    increaseIterations(objectitiveEvaluations[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceCheck  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceCheck  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceCheck	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.add    	non-compiled	[CE]  not  a  statement	21	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.resultEvaluations;  ++i)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.resultEvaluations;  ++i)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.resultEvaluations;  ++i)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.maxIterations;  ++i)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  data.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  data.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  data.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  data.length;  i  <  cols.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  data.length;  i  <  cols.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  data.length;  i  <  cols.length;  i++)  {  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  i++)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  i++)  {	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  ++i)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  ++i)  {	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increasingIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increasingIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increasingIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  jacobianEvaluations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    targetValues[i]    =    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targets.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targets.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targets.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	22	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
103	[BUG]  [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter();  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  incrementIterationsCounter();  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is!=  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is!=  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is!=	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  >=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  >=  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  function.getIterations();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  >=	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
107	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterationsCounter();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterationsCounter();  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterationsCounter();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
108	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  maxIterations);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  residualsWeights  =  Math.min(remainingsWeights,  maxIterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  residualsWeights  =  Math.min(remainingsWeights,  maxIterations);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  maxIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceCheck  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceCheck  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  iterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceCheck	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  ')'  expected	8	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  this.cols.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  this.cols.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  this.cols.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterationsCount();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  function.getIterationsCount();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  function.getIterationsCount();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
114	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.length;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.length;	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
115	[BUG]  [BUGGY]  int  residualsWeights  =  this.results.length;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  residualsWeights  =  this.results.length;  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  residualsWeights  =  this.results.length;	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
116	[BUG]  [BUGGY]  int  result  =  this.results.length;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.length;  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.length;	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
117	[BUG]  [BUGGY]  int  residualsWeights  =  Math.min(results.length,  maxIterations);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  residualsWeights  =  Math.min(results.length,  maxIterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  residualsWeights  =  Math.min(results.length,  maxIterations);	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
118	[BUG]  [BUGGY]  this.resultEvaluations  =  Math.min(this.result,  iterations);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  Math.min(this.result,  iterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  Math.min(this.result,  iterations);	  this.resultEvaluations    =    Math.max(this.result,    objectiveEvaluations);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
119	[BUG]  [BUGGY]  long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  throw  new  OptimizationException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  throw  new  OptimizationException( " ");  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  throw  new  OptimizationException( " ");  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    maxIterations)    {    throw    new    OptimizationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
120	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  1)  {  throw  new  OptimizationException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  1)  {  throw  new  OptimizationException( " ");  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  1)  {  throw  new  OptimizationException( " ");  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    throw    new    OptimizationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
121	[BUG]  [BUGGY]  int  resultEvaluationsCounter  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluationsCounter  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluationsCounter  =  this.resultEvaluations.length;  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
122	[BUG]  [BUGGY]  int  cost  =  this.results.length;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  cost  =  this.results.length;  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  cost  =  this.results.length;	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
123	[BUG]  [BUGGY]  int  result  =  this.results.size();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.size();  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.size();	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
126	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    for(int    i    =    0;    i    <    objectiveEvaluations;    ++i)    {    increaseIterations(objectitiveEvaluations[i]);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
127	[BUG]  [BUGGY]  int  cost  =  Math.min(results.length,  maxIterations);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  cost  =  Math.min(results.length,  maxIterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  cost  =  Math.min(results.length,  maxIterations);	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
128	[BUG]  [BUGGY]  int  cost  =  Math.max(results.length,  maxIterations);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  cost  =  Math.max(results.length,  maxIterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  cost  =  Math.max(results.length,  maxIterations);	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
129	[BUG]  [BUGGY]  int  maxIterations  =  iterations.getMaxIterations();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  maxIterations  =  iterations.getMaxIterations();  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  maxIterations  =  iterations.getMaxIterations();	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
130	[BUG]  [BUGGY]  int  cost  =  Math.min(results.size(),  maxIterations);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  cost  =  Math.min(results.size(),  maxIterations);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  cost  =  Math.min(results.size(),  maxIterations);	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
132	[BUG]  [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
133	[BUG]  [BUGGY]  iterations  =  this.results.iterator().next();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  iterations  =  this.results.iterator().next();  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	iterations  =  this.results.iterator().next();	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
134	[BUG]  [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  ][2];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  this.resultEvaluations  =  new  double[iterations.size()  ][2];  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	this.resultEvaluations  =  new  double[iterations.size()  ][2];	  this.resultEvaluations    =    new    double[iterations.size()    ][0];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
135	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
136	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.size();	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  ')'  expected	23	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker.is  ==  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker.is    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
139	[BUG]  [BUGGY]  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	double[][]  jacobianEvaluations  =  function.getVariableValues();  for(int  i  =  0;  i  <  iterations.length;  ++i)  {	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    double[][]    jacobianEvaluations    =    function.getVariableValues();    for(int    i    =    0;    i    <    iterations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker);  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	22	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceCheck  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceCheck  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targetValues.size();  i  <  maxIterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceCheck	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.    	non-compiled	[CE]  not  a  statement	22	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(this,  targetValues[i]);  }	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(this,    targetValues[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  targets.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.add  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  targets.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.add  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  targets.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  new  VectorialConvergenceChecker(targetValues[i]);  convergenceChecker.add	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    new    VectorialConvergenceChecker(targetValues[i]);    convergenceChecker.add    	non-compiled	[CE]  not  a  statement	21	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  iterations  =  this.targetValues.size();  i  <  iterations;  ++i)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVarianceChecker();  if(convergenceChecker!=  null)  {	      for(int    i    =    0,    iterations    =    targetValues.size();    i    <    iterations;    ++i)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVarianceChecker();    if(convergenceChecker!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
146	[BUG]  [BUGGY]  long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  throw  new  OptimizationException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  throw  new  OptimizationException( " ");  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  throw  new  OptimizationException( " ");  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    throw    new    OptimizationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  targetValues[i]  =  convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    targetValues[i]    =    convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
148	[BUG]  [BUGGY]  long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	long  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  0)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  increaseIterations(objectitiveEvaluations[i]);  }	  int    objectiveEvaluations    =    function.incrementIterations();    if(objectitiveEvaluations    >    0)    {    for(int    i    =    0;    i    <    objectiveEvaluations;    ++i)    {    increaseIterations(objectitiveEvaluations[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
149	[BUG]  [BUGGY]  int  maxIterations  =  iterations.iterator().next();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  maxIterations  =  iterations.iterator().next();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  maxIterations  =  iterations.iterator().next();	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.maxIterations;  ++i)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.maxIterations;  ++i)  {  increaseIterationsCounter();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  maxIterations  =  iterations;  i  <  this.maxIterations;  ++i)  {  increaseIterationsCounter();  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
151	[BUG]  [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  resultEvaluations  =  this.resultEvaluations.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  true);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    false);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
152	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  multiplieMultivariateVectorialFunction(targetValues[i]  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  multiplieMultivariateVectorialFunction(targetValues[i]  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  multiplieMultivariateVectorialFunction(targetValues[i]	      	non-compiled	[CE]  ')'  expected	5	None	replace
153	[BUG]  [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  multiplieMultivariateVectorialFunction(targetValues  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  multiplieMultivariateVectorialFunction(targetValues  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  objectiveEvaluations  =  function.incrementIterations();  if(objectitiveEvaluations  >  maxIterations)  {  for(int  i  =  0;  i  <  objectiveEvaluations;  ++i)  {  multiplieMultivariateVectorialFunction(targetValues	      	non-compiled	[CE]  ')'  expected	5	None	replace
154	[BUG]  [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  result);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  result);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.size();  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i,  result);  }	  if(this.results!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
155	[BUG]  [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  result);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  result);  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter(i,  result);  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter(i,    cost);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
156	[BUG]  [BUGGY]  int  result  =  this.resultEvaluations.size();  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.resultEvaluations.size();  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.resultEvaluations.size();  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
157	[BUG]  [BUGGY]  int  result  =  this.resultEvaluations.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.resultEvaluations.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.resultEvaluations.length;  for(int  i  =  0,  maxIterations  =  iterations;  i  <  maxIterations;  ++i)  {  increaseIterationsCounter(i);  }	      if(this.resultEvaluations!=    null)    {    for(int    i    =    0,    maxIterations    =    iterations;    i    <    maxIterations;    ++i)    {    increaseIterationsCounter(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
158	[BUG]  [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	int  result  =  this.results.size();  for(int  i  =  0;  i  <  iterations;  i++)  {  increaseIterationsCounter();  }	  if(this.results!=    null)    {    for(int    i    =    0;    i    <    iterations;    i++)    {    increaseIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  convergenceChecker.addAll(convergenceChecker.	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    convergenceChecker.addAll(convergenceChecker.    	non-compiled	[CE]  <identifier>  expected	8	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    protected  void  incrementIterationsCounter()  throws  OptimizationException  {  if  (++iterations  >  maxIterations)  {  throw  new  OptimizationException(new  MaxIterationsExceededException(maxIterations));  }    [BUGGY]  for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  incrementIterationsCounter  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  objective  point  residuals  residualsWeights  targetValues  double  cost  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  iterations  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	176	176	1	replace	for(int  i  =  0,  cols  =  sumIterations.length;  i  <  cols.length;  i++)  {  VectorialConvergenceChecker  convergenceChecker  =  function.getVectorialConvergenceChecker();  }	      for(int    i    =    0,    cols    =    iterations.length;    i    <    cols.length;    i++)    {    VectorialConvergenceChecker    convergenceChecker    =    function.getVectorialConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
