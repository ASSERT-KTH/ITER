bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	add	for(int  i  =  0;  i  <  this.rows;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	add	for(int  i  =  0;  i  <  this.cols;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	add	for(int  i  =  0;  i  <  2;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  remainings	3	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	  	for  (int  i  =  0;  i  <  rows;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]    double[][]  rows  =  jF.getRows();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    double[][]  rows  =  jF.getRows();  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    double[][]  rows  =  jF.getRows();		non-compiled	[CE]  cannot  find  symbol	4	None	add
10	[BUG]  [BUGGY]    if(rows!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    if(rows!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]);  }  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    if(rows!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]    int  rows  =  getRowCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    int  rows  =  getRowCount();  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    int  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
12	[BUG]  [BUGGY]    if(rows!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]  *  jF,  cols);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    if(rows!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]  *  jF,  cols);  }  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    if(rows!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]  *  jF,  cols);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]    if(rows  ==  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]  *  jF,  cols);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    if(rows  ==  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]  *  jF,  cols);  }  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    if(rows  ==  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  chiSquare  +=  Math.max(remainings[i]  *  jF,  cols);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
14	[BUG]  [BUGGY]    int  rows  =  Math.min(remainings.length,  chiSquare);  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    int  rows  =  Math.min(remainings.length,  chiSquare);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    int  rows  =  Math.min(remainings.length,  chiSquare);		non-compiled	[CE]  cannot  find  symbol  remainings	4	None	add
15	[BUG]  [BUGGY]    int  rows  =  Math.min(remainders.length,  chiSquare);  [CE]  cannot  find  symbol  remainders  [FE]      AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    int  rows  =  Math.min(remainders.length,  chiSquare);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    int  rows  =  Math.min(remainders.length,  chiSquare);		non-compiled	[CE]  cannot  find  symbol  remainders	4	None	add
16	[BUG]  [BUGGY]    int  rows  =  Math.min(remainings.length,  0);  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    int  rows  =  Math.min(remainings.length,  0);  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    int  rows  =  Math.min(remainings.length,  0);		non-compiled	[CE]  cannot  find  symbol  remainings	4	None	add
17	[BUG]  [BUGGY]    Integer  rows  =  getRowCount();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    Integer  rows  =  getRowCount();  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    Integer  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
18	[BUG]  [BUGGY]    double[][]  rows  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]    double[][]  rows  =  jF.getColumns();  [BUGGY]  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	    double[][]  rows  =  jF.getColumns();		non-compiled	[CE]  cannot  find  symbol	4	None	add
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	add	for(int  i  =  0;  i  <  6;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  public  double  getChiSquare()  {  double  chiSquare  =  0;  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  [BUGGY]  final  double  residual  =  residuals[i];  chiSquare  +=  residual  *  residual  /  residualsWeights[i];  }  return  chiSquare;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getChiSquare  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  chiSquare  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	256	256	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {	for  (int  i  =  0;  i  <  rows;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
