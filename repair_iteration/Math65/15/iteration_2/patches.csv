bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  rows  =  function.getColumns();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  function.getColumns();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  function.getColumns();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
2	[BUG]  [BUGGY]  double[][]  rows  =  function.getCols();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  function.getCols();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  function.getCols();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
3	[BUG]  [BUGGY]  ensureColumns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ensureColumns();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ensureColumns();	  ensureRows();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
4	[BUG]  [BUGGY]  ensureRows(true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ensureRows(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ensureRows(true);	  ensureRows();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
5	[BUG]  [BUGGY]  EnsureRows();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EnsureRows();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EnsureRows();	  ensureRows();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
6	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(cols,  1);	  int    rows    =    Math.min(cols,    0);    	compilable	  [FE]  OptimizationException  	94	1	replace
7	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  1);  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  1);	  int    rows    =    Math.min(cols,    0);    	compilable	  [FE]  OptimizationException  	94	1	replace
8	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(0,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(0,  cols);	  int    rows    =    Math.min(cols,    0);    	compilable	  [FE]  OptimizationException  	94	1	replace
9	[BUG]  [BUGGY]  int  rows  =  Math.min(0,  cols);  [FE]  OptimizationException  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(0,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(0,  cols);	  int    rows    =    Math.min(cols,    0);    	compilable	  [FE]  OptimizationException  	94	1	replace
10	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  0);  [CE]  variable  rows  might  not  have  been  initialized  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(rows,  0);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(rows,  0);	  int    rows    =    Math.min(cols,    0);    	non-compiled	[CE]  variable  rows  might  not  have  been  initialized	94	None	replace
11	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols.length  -  1);	  int    rows    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
12	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols.length  -  2);	  int    rows    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
13	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(rows,  cols.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(rows,  cols.length);	  int    rows    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
14	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(false);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
15	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(true);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
16	[BUG]  [BUGGY]  MutableMultivariateVectorFunction  function  =  new  MutableMultivariateVectorFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorFunction  function  =  new  MutableMultivariateVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorFunction  function  =  new  MutableMultivariateVectorFunction();	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
17	[BUG]  [BUGGY]  checkColumn();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkColumn();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkColumn();	  checkRow();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
18	[BUG]  [BUGGY]  checkColumns();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkColumns();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkColumns();	  checkRow();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
19	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length].doubleValue();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols.length].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols.length].doubleValue();	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	40	None	replace
20	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.doubleValue()  /  2].doubleValue();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols.doubleValue()  /  2].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols.doubleValue()  /  2].doubleValue();	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	40	None	replace
21	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue()  /  2;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue()  /  2;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols].doubleValue()  /  2;	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	40	None	replace
22	[BUG]  [BUGGY]  UpdateZeroes().remainings  =  new  double[cols][cols];  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroes().remainings  =  new  double[cols][cols];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroes().remainings  =  new  double[cols][cols];	  UpdateZeroes();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
23	[BUG]  [BUGGY]  UpdateZeroes().remainings  =  new  double[cols][cols].length;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroes().remainings  =  new  double[cols][cols].length;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroes().remainings  =  new  double[cols][cols].length;	  UpdateZeroes();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
24	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols.length];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols.length];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	33	None	replace
25	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][0];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][0];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	33	None	replace
26	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols  -  1];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	33	None	replace
27	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][1];	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	33	None	replace
28	[BUG]  [BUGGY]  checkSquares(true);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkSquares(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkSquares(true);	  checkSquares();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
29	[BUG]  [BUGGY]  checkSquare(true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkSquare(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkSquare(true);	  checkSquares();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
30	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.functions.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.functions.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.functions.getMatrixFunction();	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
31	[BUG]  [BUGGY]  int  rows  =  jTj.getColumnCount();  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  jTj.getColumnCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  jTj.getColumnCount();	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  jTj	10	None	replace
32	[BUG]  [BUGGY]  int  rows  =  this.jTj.getRowCount();  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  this.jTj.getRowCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  this.jTj.getRowCount();	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  jTj	10	None	replace
33	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  rows);  [CE]  variable  rows  might  not  have  been  initialized  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  rows);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  rows);	  int    rows    =    Math.min(rows,    cols);    	non-compiled	[CE]  variable  rows  might  not  have  been  initialized	14	None	replace
34	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  columns);  [CE]  cannot  find  symbol  columns  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  columns);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  columns);	  int    rows    =    Math.min(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	14	None	replace
35	[BUG]  [BUGGY]  double[][]  rows  =  cols.getCols();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  cols.getCols();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  cols.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  int  cannot  be  dereferenced	84	None	replace
36	[BUG]  [BUGGY]  double[][]  rows  =  jtj.getCols();  [CE]  cannot  find  symbol  jtj  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jtj.getCols();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jtj.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  cannot  find  symbol  jtj	84	None	replace
37	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  jTj);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  jTj);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol  jTj	37	None	replace
38	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj,  cols);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  jTj,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  jTj,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol  jTj	37	None	replace
39	[BUG]  [BUGGY]  double[][]  rows  =  jtj.getRows();  [CE]  cannot  find  symbol  jtj  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jtj.getRows();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jtj.getRows();	  double[][]    rows    =    jTjF.getRows();    	non-compiled	[CE]  cannot  find  symbol  jtj	8	None	replace
40	[BUG]  [BUGGY]  updateRowsEvaluations(rows);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateRowsEvaluations(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateRowsEvaluations(rows);	  updateJacobianEvaluations(rows);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
41	[BUG]  [BUGGY]  updateJacobianEvaluations(cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(cols);	  updateJacobianEvaluations(rows);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
42	[BUG]  [BUGGY]  updateJacobianEvaluations(rows,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(rows,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(rows,  cols);	  updateJacobianEvaluations(rows);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
43	[BUG]  [BUGGY]  updateJacobianEvaluations(jTj);  [CE]  cannot  find  symbol  jTj  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(jTj);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(jTj);	  updateJacobianEvaluations(rows);    	non-compiled	[CE]  cannot  find  symbol  jTj	73	None	replace
44	[BUG]  [BUGGY]  updateZeroEvaluators(true);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluators(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluators(true);	  updateZeroEvaluators();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
45	[BUG]  [BUGGY]  updateZeroEvaluators(rows);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluators(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluators(rows);	  updateZeroEvaluators();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
46	[BUG]  [BUGGY]  updateZeroEvaluators(cols);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluators(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluators(cols);	  updateZeroEvaluators();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
47	[BUG]  [BUGGY]  updateRowCount(rows,  cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateRowCount(rows,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateRowCount(rows,  cols);	  updateRowCount(rows);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
48	[BUG]  [BUGGY]  updateRowCount(cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateRowCount(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateRowCount(cols);	  updateRowCount(rows);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
49	[BUG]  [BUGGY]  updateColumnCount(cols);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateColumnCount(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateColumnCount(cols);	  updateRowCount(rows);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
50	[BUG]  [BUGGY]  updateRowCount(rows,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateRowCount(rows,  jTj);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateRowCount(rows,  jTj);	  updateRowCount(rows);    	non-compiled	[CE]  cannot  find  symbol  jTj	2	None	replace
51	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  f.getMutableVectorialFunction();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  f.getMutableVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  f.getMutableVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getMutableVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
52	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  this.function.getMutableVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  this.function.getMutableVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  this.function.getMutableVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getMutableVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
53	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =(MutableMultivariateVectorialFunction)function.getMutableVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =(MutableMultivariateVectorialFunction)function.getMutableVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =(MutableMultivariateVectorialFunction)function.getMutableVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getMutableVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
54	[BUG]  [BUGGY]  checkError(null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkError(null);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkError(null);	  checkError();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
55	[BUG]  [BUGGY]  checkError(false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkError(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkError(false);	  checkError();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
56	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
57	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColsCount()  -  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
58	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length];  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols.length];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols.length];	          double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  int  cannot  be  dereferenced	32	None	replace
59	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  -  1];	          double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	32	None	replace
60	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  +  1];	          double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	32	None	replace
61	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  2];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  /  2];	          double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	32	None	replace
62	[BUG]  [BUGGY]  Double[][]  rows  =  new  double[cols][cols.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Double[][]  rows  =  new  double[cols][cols.length].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Double[][]  rows  =  new  double[cols][cols.length].doubleValue();	  Double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	29	None	replace
63	[BUG]  [BUGGY]  Double[][]  rows  =  new  double[cols][cols  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Double[][]  rows  =  new  double[cols][cols  -  1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Double[][]  rows  =  new  double[cols][cols  -  1].doubleValue();	  Double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
64	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.function.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.function.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
65	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols  +  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols  +  1];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  incompatible  types	34	None	replace
66	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  2];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols  +  2];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	replace
67	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols  *  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols  *  1];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	replace
68	[BUG]  [BUGGY]  checkSquare(false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkSquare(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkSquare(false);	  checkSquare();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
69	[BUG]  [BUGGY]  updateColumnCount(rows);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateColumnCount(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateColumnCount(rows);	  updateColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
70	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  -  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  -  1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols.length  -  1].doubleValue();	  double[][]    jTj    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
71	[BUG]  [BUGGY]  luateRangeColumns();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRangeColumns();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRangeColumns();	  luateColumns();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
72	[BUG]  [BUGGY]  luateRanges();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRanges();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRanges();	  luateColumns();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
73	[BUG]  [BUGGY]  luateRows(cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRows(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRows(cols);	  luateRows(rows);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
74	[BUG]  [BUGGY]  luateRows(rows,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRows(rows,  jTj);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRows(rows,  jTj);	  luateRows(rows);    	non-compiled	[CE]  cannot  find  symbol  jTj	52	None	replace
75	[BUG]  [BUGGY]  luateRows(rows,  cols);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRows(rows,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRows(rows,  cols);	  luateRows(rows);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
76	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  jF,  function.getMatrixFunction();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  jF,  function.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  jF,  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    jF.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	4	None	replace
77	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.jF.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.jF.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.jF.getMatrixFunction();	  InvalidMatrixFunction    ime    =    jF.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
78	[BUG]  [BUGGY]  checker(resultsWeights);  [CE]  cannot  find  symbol  resultsWeights  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checker(resultsWeights);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checker(resultsWeights);	  checker();    	non-compiled	[CE]  cannot  find  symbol  resultsWeights	55	None	replace
79	[BUG]  [BUGGY]  checker(varianceChecker);  [CE]  cannot  find  symbol  varianceChecker  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checker(varianceChecker);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checker(varianceChecker);	  checker();    	non-compiled	[CE]  cannot  find  symbol  varianceChecker	55	None	replace
80	[BUG]  [BUGGY]  checker(null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checker(null);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checker(null);	  checker();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
81	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remaining;  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remaining;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols].remaining;	  double[][]    jTj    =    new    double[cols][rows];    	non-compiled	[CE]  cannot  find  symbol  remaining	46	None	replace
82	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  f,  function.getMatrixFunction();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  f,  function.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  f,  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    f.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	5	None	replace
83	[BUG]  [BUGGY]  int  rows  =  jF.getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  jF.getColumnCount()  +  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  jF.getColumnCount()  +  1;	  int    rows    =    jF.getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
84	[BUG]  [BUGGY]  int  rows  =  jTj.getRowCount()  +  1;  [CE]  cannot  find  symbol  jTj  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  jTj.getRowCount()  +  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  jTj.getRowCount()  +  1;	  int    rows    =    jF.getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol  jTj	11	None	replace
85	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(jF);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(jF);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(jF);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction(function);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
86	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(null);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(null);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction(function);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
87	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  jF);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  jF);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  jF);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction(function);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
88	[BUG]  [BUGGY]  EvaluateRows(true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateRows(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateRows(true);	  EvaluateRows();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
89	[BUG]  [BUGGY]  EvaluateColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateColumns();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateColumns();	  EvaluateRows();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
90	[BUG]  [BUGGY]  EvaluateRows(rows);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateRows(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateRows(rows);	  EvaluateRows();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
91	[BUG]  [BUGGY]  ValidateZeroesStrategy();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ValidateZeroesStrategy();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ValidateZeroesStrategy();	  UpdateZeroesStrategy();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
92	[BUG]  [BUGGY]  MutableMultivariateVectorStrategy();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorStrategy();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorStrategy();	  UpdateZeroesStrategy();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
93	[BUG]  [BUGGY]  updateZeroes(false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(false);	  updateZeroes(true);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
94	[BUG]  [BUGGY]  updateZeroes(false,  cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(false,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(false,  cols);	  updateZeroes(true);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
95	[BUG]  [BUGGY]  updateZeroes(false,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(false,  jTj);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(false,  jTj);	  updateZeroes(true);    	non-compiled	[CE]  cannot  find  symbol  jTj	49	None	replace
96	[BUG]  [BUGGY]  updateZeroes(false,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(false,  true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(false,  true);	  updateZeroes(true);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
97	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction();	  UpdateZero();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
98	[BUG]  [BUGGY]  MutableMultivariateVectorFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorFunction();	  UpdateZero();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
99	[BUG]  [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(cols,  rows);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(cols,  rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(cols,  rows);	          InvalidMatrixFunction    jTj    =    new    InvalidMatrixFunction(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
100	[BUG]  [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(fields,  cols);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(fields,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(fields,  cols);	          InvalidMatrixFunction    jTj    =    new    InvalidMatrixFunction(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
101	[BUG]  [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(this.rows,  cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(this.rows,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(this.rows,  cols);	          InvalidMatrixFunction    jTj    =    new    InvalidMatrixFunction(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
102	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  2].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  2].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  -  2].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
103	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  /  1].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
104	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  *  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  *  1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  *  1].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
105	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  jTj.length  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  jTj.length  -  1);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
106	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj.length,  cols.length);  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(jTj.length,  cols.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(jTj.length,  cols.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  cannot  find  symbol  jTj	95	None	replace
107	[BUG]  [BUGGY]  double[][]  rows  =  cols.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  cols.getColumns();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  cols.getColumns();	  double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
108	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getColumns();  [CE]  cannot  find  symbol  jTjF  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jTjF.getColumns();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jTjF.getColumns();	  double[][]    rows    =    jTj.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jTjF	67	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(cols,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.max(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.max(cols,    cols);    	compilable	  [FE]  AssertionFailedError  	65	2	replace
110	[BUG]  [BUGGY]  int  rows  =  Math.max(cols,  cols);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(cols,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.max(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.max(cols,    cols);    	compilable	  [FE]  AssertionFailedError  	65	2	replace
111	[BUG]  [BUGGY]  updateJacobianEvaluations(false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(false);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
112	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(false,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(false,  cols);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
113	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(false,  jTj);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(false,  jTj);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol  jTj	74	None	replace
114	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(false,  false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(false,  false);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
115	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[rows][1];	  double[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	77	None	replace
116	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.max(0,  cols  -  1);	  int    rows    =    Math.max(0,    cols);    	compilable	  [FE]  OptimizationException  	18	1	replace
117	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols  -  1);  [FE]  OptimizationException  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.max(0,  cols  -  1);	  int    rows    =    Math.max(0,    cols);    	compilable	  [FE]  OptimizationException  	18	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(1,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.max(1,  cols);	  int    rows    =    Math.max(0,    cols);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
119	[BUG]  [BUGGY]  int  rows  =  Math.max(1,  cols);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(1,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.max(1,  cols);	  int    rows    =    Math.max(0,    cols);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.max(0,  cols  +  1);	  int    rows    =    Math.max(0,    cols);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
121	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.max(0,  cols  +  1);	  int    rows    =    Math.max(0,    cols);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
122	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColumnCount()  -  2;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColumnCount()  -  2;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
123	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColumnCount()  +  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColumnCount()  +  1;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
124	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.mean.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.mean.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.mean.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
125	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][2];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][2];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	76	None	replace
126	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols  +  1);  [CE]  variable  rows  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(rows,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(rows,  cols  +  1);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  variable  rows  might  not  have  been  initialized	20	None	replace
127	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  jTj.length);  [CE]  cannot  find  symbol  jTj  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  jTj.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols  +  1,  jTj.length);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  cannot  find  symbol  jTj	20	None	replace
128	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.variantFunction.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.variantFunction.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.variantFunction.getMatrixFunction();	  InvalidMatrixFunction    ime    =    _variantFunction.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
129	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _variantFunction.getMatrixFunction(function);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  _variantFunction.getMatrixFunction(function);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  _variantFunction.getMatrixFunction(function);	  InvalidMatrixFunction    ime    =    _variantFunction.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
130	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction.this.results  =  new  MutableMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction.this.results  =  new  MutableMultivariateVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction.this.results  =  new  MutableMultivariateVectorialFunction();	  UpdateRows();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
131	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction.this.remainings  =  new  MutableMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction.this.remainings  =  new  MutableMultivariateVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction.this.remainings  =  new  MutableMultivariateVectorialFunction();	  UpdateRows();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
132	[BUG]  [BUGGY]  int  rows  =  getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColsCount()  +  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[rows][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	double[][]  row  =  new  double[rows][cols];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
134	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][cols];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[rows][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  row  =  new  double[rows][cols];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	double[][]  row  =  new  double[cols][cols  -  1];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
136	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  row  =  new  double[cols][cols  -  1];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	double[][]  row  =  new  double[cols][cols  +  1];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
138	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  row  =  new  double[cols][cols  +  1];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][0];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	double[][]  row  =  new  double[cols][0];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
140	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][0];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][0];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  row  =  new  double[cols][0];	  double[][]    row    =    new    double[cols][cols];    	compilable	  [FE]  AssertionFailedError  	100	2	replace
141	[BUG]  [BUGGY]  InvalidMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction();	  UpdateRow();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
142	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols-2].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols-2].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols-2].doubleValue();	  double[][]    jTj    =    new    double[cols][cols-1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
143	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols-1].doubleValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols-1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols-1].doubleValue();	  double[][]    jTj    =    new    double[cols][cols-1].doubleValue();    	non-compiled	[CE]  incompatible  types	63	None	replace
144	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols-3].doubleValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols-3].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols-3].doubleValue();	  double[][]    jTj    =    new    double[cols][cols-1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
145	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  0);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  0);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    0);    int  rows  =  Math.min(cols,  0);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	93	None	add
146	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(rows,  0);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(rows,  0);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    0);    int  rows  =  Math.min(rows,  0);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	93	None	add
147	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    0);    int  rows  =  Math.min(cols,  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	93	None	add
148	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  0,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  0,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    0);    int  rows  =  Math.min(cols,  0,  cols);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	93	None	add
149	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  2);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]            OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.min(cols,  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    0);    int  rows  =  Math.min(cols,  2);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	93	None	add
150	[BUG]  [BUGGY]  int  rows  =  cols.getColumnCount();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  cols.getColumnCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  cols.getColumnCount();	  int    rows    =    jF.getColumnCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
151	[BUG]  [BUGGY]  UpdateZeroesOptimizer(false);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroesOptimizer(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroesOptimizer(false);	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
152	[BUG]  [BUGGY]  UpdateZeroesOptimizer(this);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroesOptimizer(this);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroesOptimizer(this);	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
153	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols  -  1);  [CE]  variable  rows  might  not  have  been  initialized  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(rows,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(rows,  cols  -  1);	  int    rows    =    Math.min(cols,    cols    -    1);    	non-compiled	[CE]  variable  rows  might  not  have  been  initialized	16	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(cols,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.max(cols,  cols  -  1);	  int    rows    =    Math.min(cols,    cols    -    1);    	compilable	  [FE]  AssertionFailedError  	16	2	replace
155	[BUG]  [BUGGY]  int  rows  =  Math.max(cols,  cols  -  1);  [FE]  AssertionFailedError  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(cols,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.max(cols,  cols  -  1);	  int    rows    =    Math.min(cols,    cols    -    1);    	compilable	  [FE]  AssertionFailedError  	16	2	replace
156	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  getOptionalMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  getOptionalMultivariateVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  getOptionalMultivariateVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    getOptionalVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
157	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  getOptionalMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  getOptionalMatrixFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  getOptionalMatrixFunction();	  MutableMultivariateVectorialFunction    function    =    getOptionalVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
158	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  getNativeFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  getNativeFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  getNativeFunction();	  MutableMultivariateVectorialFunction    function    =    getOptionalVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
159	[BUG]  [BUGGY]  int  rows  =  cols.getRowCount()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  cols.getRowCount()  -  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  cols.getRowCount()  -  1;	  int    rows    =    cols.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
160	[BUG]  [BUGGY]  int  rows  =  cols.getRowCount()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  cols.getRowCount()  +  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  cols.getRowCount()  +  1;	  int    rows    =    cols.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
161	[BUG]  [BUGGY]  int  rows  =  cols.size();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  cols.size();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  cols.size();	  int    rows    =    cols.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
162	[BUG]  [BUGGY]  updateZeroEvaluations(true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluations(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluations(true);	  updateZeroEvaluations();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
163	[BUG]  [BUGGY]  updateZeroEvaluations(rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluations(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluations(rows);	  updateZeroEvaluations();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
164	[BUG]  [BUGGY]  updateZeroEvaluations(false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluations(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluations(false);	  updateZeroEvaluations();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
165	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[cols][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[cols][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	99	None	add
166	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  Double[][]  row  =  new  double[cols][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  Double[][]  row  =  new  double[cols][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    Double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	99	None	add
167	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  int[][]  row  =  new  double[cols][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  int[][]  row  =  new  double[cols][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    int[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	99	None	add
168	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[cols][cols].doubleValue();  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[cols][cols].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    double[][]  row  =  new  double[cols][cols].doubleValue();	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	99	None	add
169	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[rows][cols];  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  row  =  new  double[rows][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    double[][]  row  =  new  double[rows][cols];	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	99	None	add
170	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(1,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(1,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(0,    cols);    	compilable	  [FE]  OptimizationException  	38	1	replace
171	[BUG]  [BUGGY]  int  rows  =  Math.min(1,  cols);  [FE]  OptimizationException  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(1,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(1,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(0,    cols);    	compilable	  [FE]  OptimizationException  	38	1	replace
172	[BUG]  [BUGGY]  updateMatrixEvaluations(rows);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateMatrixEvaluations(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateMatrixEvaluations(rows);	  updateMatrixEvaluations();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
173	[BUG]  [BUGGY]  updateMatrixEvaluations(true);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateMatrixEvaluations(true);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateMatrixEvaluations(true);	  updateMatrixEvaluations();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
174	[BUG]  [BUGGY]  ensureMatrixEvaluations();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ensureMatrixEvaluations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ensureMatrixEvaluations();	  updateMatrixEvaluations();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
175	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols)-  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(cols,  cols)-  1;	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(cols,    cols)-    1;    	compilable	  [FE]  OptimizationException  	39	1	replace
176	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols)-  1;  [FE]  OptimizationException  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols)-  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols)-  1;	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(cols,    cols)-    1;    	compilable	  [FE]  OptimizationException  	39	1	replace
177	[BUG]  [BUGGY]  MutableMultivariateVectorFunction  jf  =  function.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorFunction  jf  =  function.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorFunction  jf  =  function.getVectorialFunction();	  MutableMultivariateVectorialFunction    jf    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
178	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  function.getVectorFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  jf  =  function.getVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  jf  =  function.getVectorFunction();	  MutableMultivariateVectorialFunction    jf    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
179	[BUG]  [BUGGY]  Integer  rows  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Integer  rows  =  getRowCount()  -  1;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Integer  rows  =  getRowCount()  -  1;	  Integer    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
180	[BUG]  [BUGGY]  Integer  rows  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Integer  rows  =  getRowCount()  +  1;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Integer  rows  =  getRowCount()  +  1;	  Integer    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
181	[BUG]  [BUGGY]  Integer  rows  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Integer  rows  =  getRowCount()  -  2;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Integer  rows  =  getRowCount()  -  2;	  Integer    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
182	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols.length  -  1].doubleValue();	  double[][]    rows    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
183	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  2].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  2].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols.length  -  2].doubleValue();	  double[][]    rows    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
184	[BUG]  [BUGGY]  ValidateJacobianEvaluations();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ValidateJacobianEvaluations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ValidateJacobianEvaluations();	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
185	[BUG]  [BUGGY]  RelativeJacobianEvaluations();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  RelativeJacobianEvaluations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	RelativeJacobianEvaluations();	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
186	[BUG]  [BUGGY]  UpdateJacobianEvaluations(rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateJacobianEvaluations(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateJacobianEvaluations(rows);	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
187	[BUG]  [BUGGY]  updateZeroes(cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(cols);	  updateZeroes(rows);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
188	[BUG]  [BUGGY]  updateZeroes(rows,  cols);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(rows,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(rows,  cols);	  updateZeroes(rows);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
189	[BUG]  [BUGGY]  updateZeroes(0,  rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(0,  rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(0,  rows);	  updateZeroes(rows);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
190	[BUG]  [BUGGY]  updateZeroes(rows,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(rows,  jTj);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(rows,  jTj);	  updateZeroes(rows);    	non-compiled	[CE]  cannot  find  symbol  jTj	48	None	replace
191	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][rows];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][rows];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][rows];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	87	None	replace
192	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols  -  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[rows][cols  -  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[rows][cols  -  1];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	87	None	replace
193	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols  /  cols];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[rows][cols  /  cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[rows][cols  /  cols];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	87	None	replace
194	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols  +  1];  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[rows][cols  +  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[rows][cols  +  1];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	87	None	replace
195	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1,  cols.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  cols.length  -  1,  cols.length);	  int    rows    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
196	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  cols.length  -  2);	  int    rows    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
197	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][rows];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][rows];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][rows];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	47	None	replace
198	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols.length];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[rows][cols.length];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[rows][cols.length];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	47	None	replace
199	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols  /  2];  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[rows][cols  /  2];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[rows][cols  /  2];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	47	None	replace
200	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  mF,  function.getMatrixFunction();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  mF,  function.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  mF,  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    mF.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	82	None	replace
201	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.max(0,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.max(0,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.max(0,    cols);    int  rows  =  Math.max(0,  cols);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
202	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.min(0,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.min(0,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.max(0,    cols);    int  rows  =  Math.min(0,  cols);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
203	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.max(1,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.max(1,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.max(0,    cols);    int  rows  =  Math.max(1,  cols);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
204	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.min(1,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.max(0,  cols);  int  rows  =  Math.min(1,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.max(0,    cols);    int  rows  =  Math.min(1,  cols);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	17	None	add
205	[BUG]  [BUGGY]  Double[][]  cols  =  new  double[cols][cols].doubleValue();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Double[][]  cols  =  new  double[cols][cols].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Double[][]  cols  =  new  double[cols][cols].doubleValue();	  Double[][]    jTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	41	None	replace
206	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(cols,  cols  -  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(cols,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    int  rows  =  Math.min(cols,  cols  -  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	15	None	add
207	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(rows,  cols  -  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(rows,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    int  rows  =  Math.min(rows,  cols  -  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	15	None	add
208	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.max(cols,  cols  -  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.max(cols,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    int  rows  =  Math.max(cols,  cols  -  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	15	None	add
209	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(0,  cols  -  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(0,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    int  rows  =  Math.min(0,  cols  -  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	15	None	add
210	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(1,  cols  -  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]            OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  rows  =  Math.min(1,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    int  rows  =  Math.min(1,  cols  -  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	15	None	add
211	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
212	[BUG]  [BUGGY]  luateColumn();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateColumn();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateColumn();	  luateRow();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
213	[BUG]  [BUGGY]  double[][]  rows  =  jF,  cols.getCols();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jF,  cols.getCols();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jF,  cols.getCols();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  ';'  expected	12	None	replace
214	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(cols,  cols  +  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
215	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(rows,  cols  +  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(rows,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(rows,  cols  +  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
216	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  2);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(cols,  cols  +  2);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
217	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.max(cols,  cols  +  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.max(cols,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.max(cols,  cols  +  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
218	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(0,  cols  +  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(0,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(0,  cols  +  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
219	[BUG]  [BUGGY]  double[][]  rows  =  jF,  cols.getColumns();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jF,  cols.getColumns();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jF,  cols.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  ';'  expected	13	None	replace
220	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue().doubleValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue().doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols].doubleValue().doubleValue();	  double[][]    jTj    =    new    double[cols][cols].doubleValue().doubleValue();    	non-compiled	[CE]  incompatible  types	42	None	replace
221	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue()  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue()  *.doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue()  *.doubleValue();	  double[][]    jTj    =    new    double[cols][cols].doubleValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
222	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols][0]);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(rows,  cols][0]);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(rows,  cols][0]);	  int    rows    =    Math.min(cols,    cols][0]);    	non-compiled	[CE]  ')'  expected	69	None	replace
223	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols][0]  -  1);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols][0]  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols][0]  -  1);	  int    rows    =    Math.min(cols,    cols][0]);    	non-compiled	[CE]  ')'  expected	69	None	replace
224	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols][1]);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols][1]);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols][1]);	  int    rows    =    Math.min(cols,    cols][0]);    	non-compiled	[CE]  ')'  expected	69	None	replace
225	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols][0],  jTj);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols][0],  jTj);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols][0],  jTj);	  int    rows    =    Math.min(cols,    cols][0]);    	non-compiled	[CE]  ')'  expected	69	None	replace
226	[BUG]  [BUGGY]  double[][]  rows  =  this.cols.getRows();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  this.cols.getRows();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  this.cols.getRows();	  double[][]    rows    =    cols.getRows();    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
227	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1,  cols.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  1,  cols.length);	  int    rows    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	replace
228	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1,  jTj.length);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1,  jTj.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  1,  jTj.length);	  int    rows    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	replace
229	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  f.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  f.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  f.getVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
230	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  this.function.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  this.function.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  this.function.getVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
231	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =(MutableMultivariateVectorialFunction)function.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =(MutableMultivariateVectorialFunction)function.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =(MutableMultivariateVectorialFunction)function.getVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Integer  rows  =  Math.min(cols,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	Integer  rows  =  Math.min(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	compilable	  [FE]  AssertionFailedError  	64	2	replace
233	[BUG]  [BUGGY]  Integer  rows  =  Math.min(cols,  cols);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Integer  rows  =  Math.min(cols,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Integer  rows  =  Math.min(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	compilable	  [FE]  AssertionFailedError  	64	2	replace
234	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols);  Integer  rows  =  Math.min(cols,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(rows,  cols);  Integer  rows  =  Math.min(cols,  cols);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(rows,  cols);  Integer  rows  =  Math.min(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	64	None	replace
235	[BUG]  [BUGGY]  Double[][]  jTj  =  new  double[cols][cols],  cost.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Double[][]  jTj  =  new  double[cols][cols],  cost.doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Double[][]  jTj  =  new  double[cols][cols],  cost.doubleValue();	  Double[][]    jTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  ';'  expected	41	None	replace
236	[BUG]  [BUGGY]  UpdateZeroEvaluations();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroEvaluations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroEvaluations();	  updateZeroEvaluations();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
237	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols.length  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols.length  +  1);	  int    rows    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
238	[BUG]  [BUGGY]  UpdateJacobianEvaluations().remainings  =  new  double[cols][cols].length;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateJacobianEvaluations().remainings  =  new  double[cols][cols].length;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateJacobianEvaluations().remainings  =  new  double[cols][cols].length;	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
239	[BUG]  [BUGGY]  UpdateJacobianEvaluations().remainings  =  new  double[cols][cols];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateJacobianEvaluations().remainings  =  new  double[cols][cols];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateJacobianEvaluations().remainings  =  new  double[cols][cols];	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
240	[BUG]  [BUGGY]  UpdateJacobianEvaluations().rows  =  Collections.EMPTY_LIST;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateJacobianEvaluations().rows  =  Collections.EMPTY_LIST;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateJacobianEvaluations().rows  =  Collections.EMPTY_LIST;	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
241	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols-1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols-1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols-1];	  double[][]    jTj    =    new    double[cols][cols-1].doubleValue();    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	63	None	replace
242	[BUG]  [BUGGY]  luateRows(fields);  [CE]  cannot  find  symbol  fields  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRows(fields);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRows(fields);	  luateRows(rows);    	non-compiled	[CE]  cannot  find  symbol  fields	52	None	replace
243	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  getOptionalMultivariateVectorFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  getOptionalMultivariateVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  getOptionalMultivariateVectorFunction();	  MutableMultivariateVectorialFunction    function    =    getOptionalVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
244	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.mF.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.mF.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.mF.getMatrixFunction();	  InvalidMatrixFunction    ime    =    mF.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
245	[BUG]  [BUGGY]  checker(result);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checker(result);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checker(result);	  checker();    	non-compiled	[CE]  cannot  find  symbol  result	55	None	replace
246	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
247	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  3];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols  +  3];	  double[][]    jTj    =    new    double[cols][cols    +    1];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	replace
248	[BUG]  [BUGGY]  int  rows  =  this.jF.getColumnCount();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  this.jF.getColumnCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  this.jF.getColumnCount();	  int    rows    =    this.jF.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
249	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorFunction();	  UpdateZeroesStrategy();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
250	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  cols  =  Math.min(cols,  cols  -  1);  [CE]  variable  cols  might  not  have  been  initialized  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  int  cols  =  Math.min(cols,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    int  cols  =  Math.min(cols,  cols  -  1);	  	non-compiled	[CE]  variable  cols  might  not  have  been  initialized	15	None	add
251	[BUG]  [BUGGY]  EvaluateRows(false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateRows(false);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateRows(false);	  EvaluateRows();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
252	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.max(cols,  0);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  rows  =  Math.max(cols,  0);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    0);    int  rows  =  Math.max(cols,  0);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	93	None	add
253	[BUG]  [BUGGY]  int  rows  =  this.cols.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  this.cols.getRowCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  this.cols.getRowCount();	  int    rows    =    cols.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
254	[BUG]  [BUGGY]  CheckerChecker.checkError(this);  [CE]  cannot  find  symbol  CheckerChecker  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  CheckerChecker.checkError(this);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	CheckerChecker.checkError(this);	  checkError();    	non-compiled	[CE]  cannot  find  symbol  CheckerChecker	53	None	replace
255	[BUG]  [BUGGY]  CheckerChecker.checkError();  [CE]  cannot  find  symbol  CheckerChecker  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  CheckerChecker.checkError();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	CheckerChecker.checkError();	  checkError();    	non-compiled	[CE]  cannot  find  symbol  CheckerChecker	53	None	replace
256	[BUG]  [BUGGY]  updateZeroes(cols,  residuals);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(cols,  residuals);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(cols,  residuals);	  updateZeroes(rows);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
257	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  _function.getMutableVectorialFunction();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  _function.getMutableVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  _function.getMutableVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getMutableVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
258	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  _function.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  _function.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  _function.getVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
259	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  function.getVectorFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  function.getVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  function.getVectorFunction();	  MutableMultivariateVectorialFunction    function    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
260	[BUG]  [BUGGY]  int  rows  =  getColumnsCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColumnsCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColumnsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
261	[BUG]  [BUGGY]  EvaluateRow();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateRow();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateRow();	  luateRow();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
262	[BUG]  [BUGGY]  UpdateZeroesOptimizer().setCovariances(new  double[cols][cols]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroesOptimizer().setCovariances(new  double[cols][cols]);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroesOptimizer().setCovariances(new  double[cols][cols]);	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
263	[BUG]  [BUGGY]  UpdateZeroesOptimizer().remainings  =  new  double[cols][cols];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroesOptimizer().remainings  =  new  double[cols][cols];  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroesOptimizer().remainings  =  new  double[cols][cols];	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
264	[BUG]  [BUGGY]  UpdateZeroesOptimizer().remainings  =  new  double[cols][cols].length;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroesOptimizer().remainings  =  new  double[cols][cols].length;  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroesOptimizer().remainings  =  new  double[cols][cols].length;	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
265	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder;	  double[][]    jTj    =    new    double[cols][rows];    	non-compiled	[CE]  cannot  find  symbol  remainder	46	None	replace
266	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  Integer  rows  =  Math.min(cols,  cols  +  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  Integer  rows  =  Math.min(cols,  cols  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    Integer  rows  =  Math.min(cols,  cols  +  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
267	[BUG]  [BUGGY]  updateRangeColumnCount();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateRangeColumnCount();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateRangeColumnCount();	  updateColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
268	[BUG]  [BUGGY]  UpdateColumnCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateColumnCount();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateColumnCount();	  updateColumnCount();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
269	[BUG]  [BUGGY]  checkRows();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkRows();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkRows();	  checkRow();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
270	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.matrixFunction.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.matrixFunction.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.matrixFunction.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
271	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  functions.getMatrixFunction(function);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  functions.getMatrixFunction(function);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  functions.getMatrixFunction(function);	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
272	[BUG]  [BUGGY]  ImerialMatrixFunction  ime  =  functions.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ImerialMatrixFunction  ime  =  functions.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ImerialMatrixFunction  ime  =  functions.getMatrixFunction();	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
273	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  function.getMatrixFunction(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  function.getMatrixFunction(null);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  function.getMatrixFunction(null);	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
274	[BUG]  [BUGGY]  ImerialMatrixFunction  ime  =  function.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ImerialMatrixFunction  ime  =  function.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ImerialMatrixFunction  ime  =  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
275	[BUG]  [BUGGY]  checkSquare(cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkSquare(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkSquare(cols);	  checkSquare();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
276	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  Integer  rows  =  Math.min(cols,  0);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  0);  Integer  rows  =  Math.min(cols,  0);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  0);  Integer  rows  =  Math.min(cols,  0);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	64	None	replace
277	[BUG]  [BUGGY]  updateJacobianEvaluations(this.cols);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(this.cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(this.cols);	  updateJacobianEvaluations(rows);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
278	[BUG]  [BUGGY]  checkSquares(rows);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkSquares(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkSquares(rows);	  checkSquares();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
279	[BUG]  [BUGGY]  CheckSquares();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  CheckSquares();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	CheckSquares();	  checkSquares();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(cols,  2);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.max(cols,    cols);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
281	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  2);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  2);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.max(cols,    cols);    	compilable	  [FE]  AssertionFailedError  	65	1	replace
282	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.f.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  this.f.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  this.f.getMatrixFunction();	  InvalidMatrixFunction    ime    =    f.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
283	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  3].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  3].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  -  3].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
284	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  factor);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  factor);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  factor);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction(function);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
285	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
286	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  }  [CE]  variable  row  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  }  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  row  =  new  double[cols][cols];  }	  	non-compiled	[CE]  variable  row  is  already  defined  in  method  getCovariances()	99	None	add
287	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  rows  =  new  double[cols][cols];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][cols];  double[][]  rows  =  new  double[cols][cols];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]    row    =    new    double[cols][cols];    double[][]  rows  =  new  double[cols][cols];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	99	None	add
288	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jTj.length);  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  jTj.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  jTj.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  cannot  find  symbol  jTj	95	None	replace
289	[BUG]  [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(jTj,  cols.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(jTj,  cols.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  cannot  find  symbol  jTj	95	None	replace
290	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length  -  1);  [CE]  cannot  find  symbol  colons  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(colons.length,  cols.length  -  1);	  int    rows    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  colons	24	None	replace
291	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols][0]  +  1);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols][0]  +  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols][0]  +  1);	  int    rows    =    Math.min(cols,    cols][0]);    	non-compiled	[CE]  ')'  expected	69	None	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(cols,  cols  +  2);	  int    rows    =    Math.min(cols,    cols    +    1);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
293	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols  +  2);	  int    rows    =    Math.min(cols,    cols    +    1);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
294	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  cols.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols  +  1,  cols.length);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	20	None	replace
295	[BUG]  [BUGGY]  Integer  rows  =  getColumnCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Integer  rows  =  getColumnCount();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Integer  rows  =  getColumnCount();	  Integer    rows    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
296	[BUG]  [BUGGY]  ensureRows(cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ensureRows(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ensureRows(cols);	  ensureRows();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
297	[BUG]  [BUGGY]  ensureRows(rows);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ensureRows(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ensureRows(rows);	  ensureRows();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
298	[BUG]  [BUGGY]  UpdateZeroEvaluators();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroEvaluators();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroEvaluators();	  updateZeroEvaluators();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
299	[BUG]  [BUGGY]  upgradeZeroEvaluators();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  upgradeZeroEvaluators();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	upgradeZeroEvaluators();	  updateZeroEvaluators();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
300	[BUG]  [BUGGY]  UpdateColumn();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateColumn();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateColumn();	  updateColumn();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
301	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(cols,  cols  -  2);	  int    rows    =    Math.min(cols,    cols    -    1);    	compilable	  [FE]  OptimizationException  	16	1	replace
302	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  2);  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols  -  2);	  int    rows    =    Math.min(cols,    cols    -    1);    	compilable	  [FE]  OptimizationException  	16	1	replace
303	[BUG]  [BUGGY]  updateZeroes(false,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(false,  null);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(false,  null);	  updateZeroes(true);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
304	[BUG]  [BUGGY]  UpdateColumns();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateColumns();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateColumns();	  updateColumns();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
305	[BUG]  [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(rows,  cols,  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(rows,  cols,  1);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(rows,  cols,  1);	          InvalidMatrixFunction    jTj    =    new    InvalidMatrixFunction(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
306	[BUG]  [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(rows,  cols,  0);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(rows,  cols,  0);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(rows,  cols,  0);	          InvalidMatrixFunction    jTj    =    new    InvalidMatrixFunction(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
307	[BUG]  [BUGGY]  UpdateMatrixEvaluations();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateMatrixEvaluations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateMatrixEvaluations();	  updateMatrixEvaluations();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
308	[BUG]  [BUGGY]  MutableMultivariateVectorFunction  function  =  function.getMutableVectorFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorFunction  function  =  function.getMutableVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorFunction  function  =  function.getMutableVectorFunction();	  updateMatrixEvaluations();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
309	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue()  +  cost.doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue()  +  cost.doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue()  +  cost.doubleValue();	  double[][]    jTj    =    new    double[cols][cols].doubleValue().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
310	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue(),  cost.doubleValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue(),  cost.doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue(),  cost.doubleValue();	  double[][]    jTj    =    new    double[cols][cols].doubleValue().doubleValue();    	non-compiled	[CE]  ';'  expected	42	None	replace
311	[BUG]  [BUGGY]  checkError( "Missing  cols: "  +  cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkError( "Missing  cols: "  +  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkError( "Missing  cols: "  +  cols);	  checkError();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
312	[BUG]  [BUGGY]  CheckerChecker  checker  =  checkError();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  CheckerChecker  checker  =  checkError();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	CheckerChecker  checker  =  checkError();	  checkError();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
313	[BUG]  [BUGGY]  checkError( "Missing  cols,  expecting  a  value ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkError( "Missing  cols,  expecting  a  value ");  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkError( "Missing  cols,  expecting  a  value ");	  checkError();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
314	[BUG]  [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(0,  cols);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(0,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  jTj  =  new  InvalidMatrixFunction(0,  cols);	          InvalidMatrixFunction    jTj    =    new    InvalidMatrixFunction(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
315	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  2);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  2);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  2);	  int    rows    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	replace
316	[BUG]  [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColumnsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
317	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[cols][cols].remainder;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[cols][cols].remainder;	  double[][]    cols    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	33	None	replace
318	[BUG]  [BUGGY]  MutableMultivariateVectorialFunctionOptimizer();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunctionOptimizer();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunctionOptimizer();	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
319	[BUG]  [BUGGY]  ValidateZeroesOptimizer();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  ValidateZeroesOptimizer();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	ValidateZeroesOptimizer();	  UpdateZeroesOptimizer();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
320	[BUG]  [BUGGY]  double[][]  rows  =  jTjF.getCols();  [CE]  cannot  find  symbol  jTjF  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jTjF.getCols();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jTjF.getCols();	  double[][]    rows    =    jTj.getCols();    	non-compiled	[CE]  cannot  find  symbol  jTjF	84	None	replace
321	[BUG]  [BUGGY]  int  rows  =  jTjF.getRowCount();  [CE]  cannot  find  symbol  jTjF  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  jTjF.getRowCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  jTjF.getRowCount();	  int    rows    =    jTj.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  jTjF	10	None	replace
322	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(cols,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(cols,  cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(cols,  cols);	  UpdateRow();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
323	[BUG]  [BUGGY]  double[][]  rows  =  this.function.getRows();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  this.function.getRows();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  this.function.getRows();	  double[][]    rows    =    function.getRows();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
324	[BUG]  [BUGGY]  updateZeroes(false,  rows);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroes(false,  rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroes(false,  rows);	  updateZeroes(true);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
325	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  function,  coefficients.getVectorialFunction();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  jf  =  function,  coefficients.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  jf  =  function,  coefficients.getVectorialFunction();	  MutableMultivariateVectorialFunction    jf    =    function.getVectorialFunction();    	non-compiled	[CE]  ';'  expected	90	None	replace
326	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  +  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  +  1].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols.length  +  1].doubleValue();	  double[][]    jTj    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
327	[BUG]  [BUGGY]  MutableMultivariateVectorFunction  function  =  getOptionalVectorialFunction();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorFunction  function  =  getOptionalVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorFunction  function  =  getOptionalVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    getOptionalVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
328	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  1).doubleValue();  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  1).doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(cols,  cols  +  1).doubleValue();	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
329	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  3);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  3);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(cols,  cols  +  3);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
330	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  1).length();  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1);  int  rows  =  Math.min(cols,  cols  +  1).length();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    +    1);    int  rows  =  Math.min(cols,  cols  +  1).length();	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	19	None	add
331	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1,  cols.length].doubleValue();  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1,  cols.length].doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][cols  -  1,  cols.length].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  ']'  expected	28	None	replace
332	[BUG]  [BUGGY]  double[][]  rows  =  jf.getCols();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jf.getCols();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jf.getCols();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  cannot  find  symbol  jf	12	None	replace
333	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][0];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][0];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	76	None	replace
334	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[rows][0];	  double[][]    jTj    =    new    double[cols][0];    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	76	None	replace
335	[BUG]  [BUGGY]  int  rows  =  jf.getColumnCount();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  jf.getColumnCount();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  jf.getColumnCount();	  int    rows    =    jF.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  jf	9	None	replace
336	[BUG]  [BUGGY]  UpdateZeroesStrategy().setValues(new  double[cols][cols]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateZeroesStrategy().setValues(new  double[cols][cols]);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateZeroesStrategy().setValues(new  double[cols][cols]);	  UpdateZeroesStrategy();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
337	[BUG]  [BUGGY]  double[][]  rows  =  jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  jf.getColumns();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  jf.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol  jf	13	None	replace
338	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  _functions.getMutableVectorialFunction();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  _functions.getMutableVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  _functions.getMutableVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getMutableVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
339	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  getColumnCount()  /  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  getColumnCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
340	[BUG]  [BUGGY]  double[][]  rows  =  f.getRows();  [CE]  cannot  find  symbol  f  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  f.getRows();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  f.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  f	75	None	replace
341	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  Integer  rows  =  Math.min(cols,  cols  -  1);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1);  Integer  rows  =  Math.min(cols,  cols  -  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int    rows    =    Math.min(cols,    cols    -    1);    Integer  rows  =  Math.min(cols,  cols  -  1);	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	15	None	add
342	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  cols  =  new  double[rows][cols  -  1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  cols  =  new  double[rows][cols  -  1];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	47	None	replace
343	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  rows);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateJacobianEvaluations(false,  rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateJacobianEvaluations(false,  rows);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
344	[BUG]  [BUGGY]  luateRowStructure();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRowStructure();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRowStructure();	  luateRow();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
345	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue()  *  value.doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].doubleValue()  *  value.doubleValue();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  jTj  =  new  double[cols][cols].doubleValue()  *  value.doubleValue();	  double[][]    jTj    =    new    double[cols][cols].doubleValue().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
346	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  coefficients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  coefficients);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(function,  coefficients);	  MutableMultivariateVectorialFunction    function    =    new    MutableMultivariateVectorialFunction(function);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
347	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols).length  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols).length  -  1;  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols).length  -  1;	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(cols,    cols)-    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	39	None	replace
348	[BUG]  [BUGGY]  luateRows(rows,  jF);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  luateRows(rows,  jF);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	luateRows(rows,  jF);	  luateRows(rows);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
349	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  rows  =  new  double[cols][1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  rows  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	77	None	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	double[][]  row  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    	compilable	  [FE]  AssertionFailedError  	77	2	replace
351	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][1];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  double[][]  row  =  new  double[cols][1];  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	double[][]  row  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    	compilable	  [FE]  AssertionFailedError  	77	2	replace
352	[BUG]  [BUGGY]  updateZeroEvaluations(cols);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateZeroEvaluations(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateZeroEvaluations(cols);	  updateZeroEvaluations();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
353	[BUG]  [BUGGY]  EvaluateVariableRows();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateVariableRows();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateVariableRows();	  EvaluateRows();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
354	[BUG]  [BUGGY]  EvaluateAnnotations();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  EvaluateAnnotations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	EvaluateAnnotations();	  EvaluateRows();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
355	[BUG]  [BUGGY]  Checker  checker();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  Checker  checker();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	Checker  checker();	  checker();    	non-compiled	[CE]  ';'  expected	55	None	replace
356	[BUG]  [BUGGY]  checker(remainings);  [CE]  cannot  find  symbol  remainings  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checker(remainings);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checker(remainings);	  checker();    	non-compiled	[CE]  cannot  find  symbol  remainings	55	None	replace
357	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  function,  jF.getMatrixFunction();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  function,  jF.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  function,  jF.getMatrixFunction();	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	3	None	replace
358	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _function.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  _function.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  _function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
359	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  jf  =  new  MutableMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  jf  =  new  MutableMultivariateVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  jf  =  new  MutableMultivariateVectorialFunction();	  UpdateRows();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
360	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  new  MutableMultivariateVectorialFunction(cols);	  UpdateRows();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
361	[BUG]  [BUGGY]  checkSquares(cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  checkSquares(cols);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	checkSquares(cols);	  checkSquares();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
362	[BUG]  [BUGGY]  updateRows(rows);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  updateRows(rows);  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	updateRows(rows);	  updateJacobianEvaluations(rows);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
363	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  jTj,  jTj.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols.length,  jTj,  jTj.length);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols.length,  jTj,  jTj.length);	  int    rows    =    Math.min(cols.length,    jTj.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
364	[BUG]  [BUGGY]  MutableMultivariateVectorFunction  inverse  =  new  MutableMultivariateVectorFunction();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorFunction  inverse  =  new  MutableMultivariateVectorFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorFunction  inverse  =  new  MutableMultivariateVectorFunction();	  updateMatrixEvaluations();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  *  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	add	int  rows  =  Math.min(cols,  cols  *  1);	  int    rows    =    Math.min(cols,    cols    +    1);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
366	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  *  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  int  rows  =  Math.min(cols,  cols  *  1);  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	int  rows  =  Math.min(cols,  cols  *  1);	  int    rows    =    Math.min(cols,    cols    +    1);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
367	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  jf.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  jf.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  jf.getMatrixFunction();	  InvalidMatrixFunction    ime    =    jF.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
368	[BUG]  [BUGGY]  MutableMultivariateVectorialFunction  function  =  fn.getVectorialFunction();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  MutableMultivariateVectorialFunction  function  =  fn.getVectorialFunction();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	MutableMultivariateVectorialFunction  function  =  fn.getVectorialFunction();	  MutableMultivariateVectorialFunction    function    =    function.getVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
369	[BUG]  [BUGGY]  UpdateJacobianEvaluations  rows  =  new  UpdateJacobianEvaluations();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  UpdateJacobianEvaluations  rows  =  new  UpdateJacobianEvaluations();  [BUGGY]        double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	UpdateJacobianEvaluations  rows  =  new  UpdateJacobianEvaluations();	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
370	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _ioContext.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  _ioContext.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  _ioContext.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
371	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _itemFactory.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {        [BUGGY]  InvalidMatrixFunction  ime  =  _itemFactory.getMatrixFunction();  [BUGGY]      updateJacobian();  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	275	275	1	replace	InvalidMatrixFunction  ime  =  _itemFactory.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
