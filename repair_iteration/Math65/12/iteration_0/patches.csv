bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols));		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
2	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  cannot  find  symbol  i  [FE]      AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  cols));		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
3	[BUG]  [BUGGY]    errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols));  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols));		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
4	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols));  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols));		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
5	[BUG]  [BUGGY]  return  errors[i];  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]  return  errors[i];  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i];	return  errors;  	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
6	[BUG]  [BUGGY]  return  errors.length;  [CE]  incompatible  types  [FE]      AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]  return  errors.length;  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length;	return  errors;  	non-compiled	[CE]  incompatible  types	23	None	replace
7	[BUG]  [BUGGY]  return  errors[i].length;  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]  return  errors[i].length;  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length;	return  errors;  	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
8	[BUG]  [BUGGY]  return  errors[0];  [CE]  incompatible  types  [FE]          AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]  return  errors[0];  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0];	return  errors;  	non-compiled	[CE]  incompatible  types	23	None	replace
9	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(covar[i][i]  *  c);		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
10	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  [CE]  cannot  find  symbol  i  [FE]      AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i].doubleValue());  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(covar[i][i].doubleValue());		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
11	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(covar[i][i])*  c;		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
12	[BUG]  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i]);  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError  [CONTEXT]  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i]);  [BUGGY]  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	    errors[i]  =  Math.sqrt(covar[i][i]);		non-compiled	[CE]  cannot  find  symbol  i	24	None	add
