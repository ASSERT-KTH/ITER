bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  -  1));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(rows  -  1));	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
2	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  1),  cost);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  1),  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  -  1),  cost);	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
3	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(covars  -  cols));  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(covars  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(covars  -  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    *(covars    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	56	None	replace
4	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    *(covars    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	56	None	replace
5	[BUG]  [BUGGY]  return  errors[cols.length  -  1];  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols.length  -  1];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols.length  -  1];	  return    errors[cols.length];    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
6	[BUG]  [BUGGY]  return  errors[rows.length];  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[rows.length];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[rows.length];	  return    errors[cols.length];    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
7	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  error;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  error;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  error;	  errors[i]    =    Math.sqrt(covar[i][i])*    cost;    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
8	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  C;  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  C;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  C;	  errors[i]    =    Math.sqrt(covar[i][i])*    cost;    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
9	[BUG]  [BUGGY]  return  errors[i]  *  covar;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  *  covar;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  *  covar;	  return    errors[i]    *    c;    	non-compiled	[CE]  cannot  find  symbol  i	33	None	replace
10	[BUG]  [BUGGY]  return  errors[i]  /  c;  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  /  c;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  /  c;	  return    errors[i]    *    c;    	non-compiled	[CE]  cannot  find  symbol  i	33	None	replace
11	[BUG]  [BUGGY]  return  errors[i]  *  cost;  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  *  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  *  cost;	  return    errors[i]    *    c;    	non-compiled	[CE]  cannot  find  symbol  i	33	None	replace
12	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	44	None	replace
13	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  2);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  2);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	44	None	replace
14	[BUG]  [BUGGY]  return  errors.length  -  2;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  2;	  return    errors.length    -    1;    	non-compiled	[CE]  incompatible  types	5	None	replace
15	[BUG]  [BUGGY]  return  errors.length  /  1;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  /  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  /  1;	  return    errors.length    -    1;    	non-compiled	[CE]  incompatible  types	5	None	replace
16	[BUG]  [BUGGY]  return  errors.length  -  1L;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  1L;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  1L;	  return    errors.length    -    1;    	non-compiled	[CE]  incompatible  types	5	None	replace
17	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  c);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  c);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
18	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  cost);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
19	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  jTj);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  jTj);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    *    c);    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
20	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
21	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][0],  c);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
22	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
23	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(cols  -  1));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(cols  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  *(cols  -  1));	  errors[i]    =    Math.sqrt(getSquare()    /(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	55	None	replace
24	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  1  -  1));  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  1  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  -  1  -  1));	  errors[i]    =    Math.sqrt(getSquare()    /(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	55	None	replace
25	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(cols  -  cols));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(cols  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(cols  -  cols));	  errors[i]    =    Math.log(getChiSquare()    /(covars    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	52	None	replace
26	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(covars  -  cols));  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(covars  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(covars  -  cols));	  errors[i]    =    Math.log(getChiSquare()    /(covars    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	52	None	replace
27	[BUG]  [BUGGY]  return  errors.length  -  errors[i].length;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  errors[i].length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  errors[i].length;	  return    errors.length    -    errors.length;    	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
28	[BUG]  [BUGGY]  returns  errors.length  -  errors.length;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  returns  errors.length  -  errors.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	returns  errors.length  -  errors.length;	  return    errors.length    -    errors.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
29	[BUG]  [BUGGY]  return  errors.length  -  errors[i];  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  errors[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  errors[i];	  return    errors.length    -    errors.length;    	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
30	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(cols  -  i));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(cols  -  i));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(cols  -  i));	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  find  symbol  i	34	None	replace
31	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  cols));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    *(c    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	27	None	replace
32	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(cols  -  1));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(cols  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(cols  -  1));	  errors[i]    =    Math.log(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	51	None	replace
33	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  1  -  1));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  1  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  -  1  -  1));	  errors[i]    =    Math.log(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	51	None	replace
34	[BUG]  [BUGGY]  return  errors[0]  &&  cols.length  >  1;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols.length  >  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols.length  >  1;	  return    errors[0]    &&    cols.length    >    0;    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
35	[BUG]  [BUGGY]  return  errors[0]  &&  cols.length  >  2;  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols.length  >  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols.length  >  2;	  return    errors[0]    &&    cols.length    >    0;    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
36	[BUG]  [BUGGY]  return  errors[0]  &&  cols.length  >  3;  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols.length  >  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols.length  >  3;	  return    errors[0]    &&    cols.length    >    0;    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
37	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  errors[i]    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	26	None	replace
38	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  1  -  1));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  1  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  1  -  1));	  errors[i]    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	26	None	replace
39	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  -  c));  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  -  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(rows  -  c));	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    c));    	non-compiled	[CE]  cannot  find  symbol  i	47	None	replace
40	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(cols  -  c));  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(cols  -  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(cols  -  c));	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    c));    	non-compiled	[CE]  cannot  find  symbol  i	47	None	replace
41	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  c));  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  *  c));	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    c));    	non-compiled	[CE]  cannot  find  symbol  i	47	None	replace
42	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(c  -  cols));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(c  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(c  -  cols));	  errors[i]    =    Math.log(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
43	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  c);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][0]  *  c);	  errors[i]    =    Math.sqrt(covar[i][0]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
44	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  +  c);  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  +  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][0]  +  c);	  errors[i]    =    Math.sqrt(covar[i][0]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
45	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  /  2);  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  /  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][0]  /  2);	  errors[i]    =    Math.sqrt(covar[i][0]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
46	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(cols  -  i));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(cols  -  i));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(cols  -  i));	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  find  symbol  i	45	None	replace
47	[BUG]  [BUGGY]  return  errors[0]  -  covar[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  -  covar[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  -  covar[i];	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
48	[BUG]  [BUGGY]  return  errors[0]  -  cols[i];  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  -  cols[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  -  cols[i];	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
49	[BUG]  [BUGGY]  return  errors[0]  /  errors[i];  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  /  errors[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  /  errors[i];	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
50	[BUG]  [BUGGY]  return  errors[0]  -  errorSquares[i];  [CE]  cannot  find  symbol  errorSquares  [FE]                          AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  -  errorSquares[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  -  errorSquares[i];	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  errorSquares	13	None	replace
51	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
52	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
53	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  sum);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  sum);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  sum);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
54	[BUG]  [BUGGY]  return  errors[0]  /  c;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  /  c;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  /  c;	  return    errors[0]    *    c;    	non-compiled	[CE]  incompatible  types	36	None	replace
55	[BUG]  [BUGGY]  return  errors[0]  *  c.length;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  *  c.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  *  c.length;	  return    errors[0]    *    c;    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
56	[BUG]  [BUGGY]  return  errors[0]  *  c  +  1;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  *  c  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  *  c  +  1;	  return    errors[0]    *    c;    	non-compiled	[CE]  incompatible  types	36	None	replace
57	[BUG]  [BUGGY]  return  errors[i]  /  1;  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  /  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  /  1;	  return    errors[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  i	50	None	replace
58	[BUG]  [BUGGY]  return  errors[i]  -  2;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  -  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  -  2;	  return    errors[i]    -    1;    	non-compiled	[CE]  cannot  find  symbol  i	50	None	replace
59	[BUG]  [BUGGY]  return  errors[cols]  -  1;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols]  -  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols]  -  1;	  return    errors[i]    -    1;    	non-compiled	[CE]  incompatible  types	50	None	replace
60	[BUG]  [BUGGY]  return  errors[0]  &&  cols.length;  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols.length;	  return    errors[0]    &&    cols;    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
61	[BUG]  [BUGGY]  return  errors[0]  &&  cols,  errorCount;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols,  errorCount;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols,  errorCount;	  return    errors[0]    &&    cols;    	non-compiled	[CE]  ';'  expected	14	None	replace
62	[BUG]  [BUGGY]  return  errors[0]  &&  cols  +  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols  +  1;	  return    errors[0]    &&    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	14	None	replace
63	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  cost);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  +  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c);    	non-compiled	[CE]  cannot  find  symbol  i	53	None	replace
64	[BUG]  [BUGGY]  return  errors[i].length  /  2  +  1;  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  /  2  +  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  /  2  +  1;	  return    errors[i].length    /    2;    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
65	[BUG]  [BUGGY]  return  errors[i].length  /  3;  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  /  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  /  3;	  return    errors[i].length    /    2;    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
66	[BUG]  [BUGGY]  return  errors[i].length  /  2  +  cols;  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  /  2  +  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  /  2  +  cols;	  return    errors[i].length    /    2;    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
67	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols)+  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols)+  1);	  errors[i]    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
68	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(rows  *  cols));  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(rows  *  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  *(rows  *  cols));	  errors[i]    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
69	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols  +  1));  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols  +  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols  +  1));	  errors[i]    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
70	[BUG]  [BUGGY]  return  errors[0]  +  c.length;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  +  c.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  +  c.length;	  return    errors[0]    +    c;    	non-compiled	[CE]  double  cannot  be  dereferenced	58	None	replace
71	[BUG]  [BUGGY]  return  errors[0]  +  cols;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  +  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  +  cols;	  return    errors[0]    +    c;    	non-compiled	[CE]  incompatible  types	58	None	replace
72	[BUG]  [BUGGY]  return  errors[i].length  /  1;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  /  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  /  1;	  return    errors[i].length    -    1;    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
73	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  find  symbol  i	43	None	replace
74	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  factor;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  factor;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  factor;	  errors[i]    =    Math.sqrt(covar[i][i])*    sum;    	non-compiled	[CE]  cannot  find  symbol  i	38	None	replace
75	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  -  cols)+  1);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  -  cols)+  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(rows  -  cols)+  1);	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	46	None	replace
76	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  2);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  2);	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	46	None	replace
77	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  3);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  3);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  3);	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	46	None	replace
78	[BUG]  [BUGGY]  return  errors[i].length  -  3;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  -  3;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  -  3;	  return    errors[i].length    -    2;    	non-compiled	[CE]  cannot  find  symbol  i	48	None	replace
79	[BUG]  [BUGGY]  return  errors[cols].length  -  1;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols].length  -  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols].length  -  1;	  return    errors[cols].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
80	[BUG]  [BUGGY]  return  errors[cols.length  -  1].length;  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols.length  -  1].length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols.length  -  1].length;	  return    errors[cols].length;    	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	replace
81	[BUG]  [BUGGY]  return  errors[cols].length  -  2;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols].length  -  2;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols].length  -  2;	  return    errors[cols].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
82	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  sum);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  sum);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  sum);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue(),    cost);    	non-compiled	[CE]  cannot  find  symbol  i	16	None	replace
83	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  coefficient);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  coefficient);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  coefficient);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue(),    cost);    	non-compiled	[CE]  cannot  find  symbol  i	16	None	replace
84	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  cost);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
85	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
86	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
87	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
88	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols  +  1));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols  +  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols  +  1));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
89	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  cost);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  cost);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    +    c);    	non-compiled	[CE]  cannot  find  symbol  i	41	None	replace
90	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  value);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  value);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  value);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue(),    c);    	non-compiled	[CE]  cannot  find  symbol  i	54	None	replace
91	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  cols);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  cols);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue(),  cols);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue(),    c);    	non-compiled	[CE]  cannot  find  symbol  i	54	None	replace
92	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(rows  -  cols)+  1);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(rows  -  cols)+  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  *(rows  -  cols)+  1);	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
93	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols)+  2);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols)+  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols)+  2);	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
94	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  1);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  /  1);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    +    1);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
95	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  1);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  1);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    +    1);    	non-compiled	[CE]  cannot  find  symbol  i	40	None	replace
96	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  *  cols));  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(rows  *  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(rows  *  cols));	  errors[i]    =    Math.log(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
97	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols)+  1);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols)+  1);	  errors[i]    =    Math.log(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
98	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols  +  1));  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols  +  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols  +  1));	  errors[i]    =    Math.log(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
99	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  *  c);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  *  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][jTj]  *  c);	  errors[i]    =    Math.sqrt(covar[i][jTj]);    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
100	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  +  cost);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  +  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][jTj]  +  cost);	  errors[i]    =    Math.sqrt(covar[i][jTj]);    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
101	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  *  cost);  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  *  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][jTj]  *  cost);	  errors[i]    =    Math.sqrt(covar[i][jTj]);    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
102	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  C);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  C);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  C);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
103	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(rows  -  1));  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(rows  -  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  *(rows  -  1));	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	20	None	replace
104	[BUG]  [BUGGY]  return  errors[i]  -  covar[i];  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  -  covar[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  -  covar[i];	  return    errors[i]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
105	[BUG]  [BUGGY]  return  errors[i]  -  cols[i];  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  -  cols[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  -  cols[i];	  return    errors[i]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
106	[BUG]  [BUGGY]  return  errors[i]  /  errors[i];  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  /  errors[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  /  errors[i];	  return    errors[i]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
107	[BUG]  [BUGGY]  return  errors[cols]  -  errors[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols]  -  errors[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols]  -  errors[i];	  return    errors[i]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
108	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  2);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  *  2);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    /    2);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
109	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  2);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  2);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i].doubleValue()  +  2);	  errors[i]    =    Math.sqrt(covar[i][i].doubleValue()    /    2);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
110	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  COST;  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  COST;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  COST;	  errors[i]    =    Math.sqrt(covar[i][i])*    Cost;    	non-compiled	[CE]  cannot  find  symbol  i	30	None	replace
111	[BUG]  [BUGGY]  return  errors[rows];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[rows];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[rows];	  return    errors[cols];    	non-compiled	[CE]  incompatible  types	31	None	replace
112	[BUG]  [BUGGY]  return  errors[cols]  &  cols;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols]  &  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols]  &  cols;	  return    errors[cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	31	None	replace
113	[BUG]  [BUGGY]  return  errors[cols  -  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols  -  1];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols  -  1];	  return    errors[cols];    	non-compiled	[CE]  incompatible  types	31	None	replace
114	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(c  -  cols));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  *(c  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  *(c  -  cols));	  errors[i]    =    Math.sqrt(getSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
115	[BUG]  [BUGGY]  return  errors[cols.length  -  2].length;  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols.length  -  2].length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols.length  -  2].length;	  return    errors[cols.length].length;    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
116	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  c));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  c));	  errors[i]    =    Math.sqrt(getChiSquare()    *(c    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	27	None	replace
117	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(cols  -  c));  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  *(cols  -  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  *(cols  -  c));	  errors[i]    =    Math.log(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
118	[BUG]  [BUGGY]  return  errors[0]  +  covar;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  +  covar;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  +  covar;	  return    errors[0]    +    c;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	58	None	replace
119	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols)-  1);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols)-  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  *  cols)-  1);	  errors[i]    =    Math.sqrt(getSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
120	[BUG]  [BUGGY]  return  errors[cols.length  -  1;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[cols.length  -  1;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[cols.length  -  1;	  return    errors[i].length    -    1;    	non-compiled	[CE]  ']'  expected	21	None	replace
121	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  1  +  1));  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  1  +  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  1  +  1));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	24	None	replace
122	[BUG]  [BUGGY]  return  errors[i]  -  cols;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  -  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  -  cols;	  return    errors[i]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
123	[BUG]  [BUGGY]  return  errors[i]  -  coefficients[i];  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  -  coefficients[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  -  coefficients[i];	  return    errors[i]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
124	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  1  +  1));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  1  +  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  -  1  +  1));	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
125	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  1)*  1;  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  1)*  1;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  1)*  1;	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	44	None	replace
126	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  jTj  +  1;  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  jTj  +  1;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  jTj  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  find  symbol  i	29	None	replace
127	[BUG]  [BUGGY]  return  errors[0]  *  covar;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  *  covar;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  *  covar;	  return    errors[0]    *    c;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	36	None	replace
128	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  sum);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  sum);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  sum);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
129	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  1);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  +  1);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
130	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  c));  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  -  c));	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  find  symbol  i	34	None	replace
131	[BUG]  [BUGGY]  return  errors[0]  &&  cols  >  0;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  cols  >  0;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  cols  >  0;	  return    errors[0]    &&    cols.length    >    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	12	None	replace
132	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
133	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
134	[BUG]  [BUGGY]  return  errors[0]  |  cols;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  |  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  |  cols;	  return    errors[0]    &&    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	14	None	replace
135	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  cost);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  cost);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
136	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  +  c);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj]  +  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][jTj]  +  c);	  errors[i]    =    Math.sqrt(covar[i][jTj]);    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
137	[BUG]  [BUGGY]  return  errors[i]  *  covar.length;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i]  *  covar.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i]  *  covar.length;	  return    errors[i]    *    c;    	non-compiled	[CE]  cannot  find  symbol  i	33	None	replace
138	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols)+  3);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols)+  3);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  -  cols)+  3);	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
139	[BUG]  [BUGGY]  return  errors[0]  -  cols;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  -  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  -  cols;	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  incompatible  types	13	None	replace
140	[BUG]  [BUGGY]  return  errors[0]  -  coefficients[i];  [CE]  cannot  find  symbol  coefficients  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  -  coefficients[i];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  -  coefficients[i];	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  cannot  find  symbol  coefficients	13	None	replace
141	[BUG]  [BUGGY]  return  errors[0]  -  covar[1];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  -  covar[1];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  -  covar[1];	  return    errors[0]    -    errors[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
142	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols)-  1);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols)-  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  *  cols)-  1);	  errors[i]    =    Math.log(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
143	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
144	[BUG]  [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  1)*  1;  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  1)*  1;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.log(getChiSquare()  /(rows  -  cols)+  1)*  1;	  errors[i]    =    Math.log(getChiSquare()    /(rows    -    cols)+    1);    	non-compiled	[CE]  cannot  find  symbol  i	46	None	replace
145	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  c));  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  c));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  c));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  find  symbol  i	43	None	replace
146	[BUG]  [BUGGY]  return  errors.length  -  covar.length;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  covar.length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  covar.length;	  return    errors.length    -    errors.length;    	non-compiled	[CE]  incompatible  types	4	None	replace
147	[BUG]  [BUGGY]  return  errors[rows.length].length;  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[rows.length].length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[rows.length].length;	  return    errors[cols.length].length;    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
148	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  1  +  1));  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(getSquare()  /(rows  -  1  +  1));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(getSquare()  /(rows  -  1  +  1));	  errors[i]    =    Math.sqrt(getSquare()    /(rows    -    1));    	non-compiled	[CE]  cannot  find  symbol  i	20	None	replace
149	[BUG]  [BUGGY]  mistakes[i]  =  Math.log(getChiSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  mistakes  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  mistakes[i]  =  Math.log(getChiSquare()  /(rows  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	mistakes[i]  =  Math.log(getChiSquare()  /(rows  -  cols));	  errors[i]    =    Math.log(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  mistakes	51	None	replace
150	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c]);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c]);	  errors[i]    =    Math.sqrt(covar[i][c]);    	non-compiled	[CE]  ')'  expected	9	None	replace
151	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  c);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  c);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  c);	  errors[i]    =    Math.sqrt(covar[i][c]);    	non-compiled	[CE]  ';'  expected	9	None	replace
152	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj  -  1]);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][jTj  -  1]);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][jTj  -  1]);	  errors[i]    =    Math.sqrt(covar[i][jTj]);    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
153	[BUG]  [BUGGY]  return  errors[rows,  cols.length];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[rows,  cols.length];  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[rows,  cols.length];	  return    errors[cols.length];    	non-compiled	[CE]  ']'  expected	22	None	replace
154	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  offset);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  offset);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  offset);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
155	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [CE]  cannot  find  symbol  mistakes  [FE]            AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  cannot  find  symbol  mistakes	57	None	replace
156	[BUG]  [BUGGY]  return  errors.length  -  errorCount;  [CE]  cannot  find  symbol  errorCount  [FE]              AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  errorCount;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  errorCount;	  return    errors.length    -    errors.length;    	non-compiled	[CE]  cannot  find  symbol  errorCount	4	None	replace
157	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  coefficient;  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  coefficient;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  coefficient;	  errors[i]    =    Math.sqrt(covar[i][i])*    sum;    	non-compiled	[CE]  cannot  find  symbol  i	38	None	replace
158	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  CATEGORY;  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  CATEGORY;  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  CATEGORY;	  errors[i]    =    Math.sqrt(covar[i][i])*    Cost;    	non-compiled	[CE]  cannot  find  symbol  i	30	None	replace
159	[BUG]  [BUGGY]  return  errors[i].length  /  2  +  Math.sqrt(covar[i].length);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  /  2  +  Math.sqrt(covar[i].length);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  /  2  +  Math.sqrt(covar[i].length);	  return    errors[i].length    /    2;    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
160	[BUG]  [BUGGY]  return  errors[i].length  /  2  +  Math.sqrt(covar[i].doubleValue());  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[i].length  /  2  +  Math.sqrt(covar[i].doubleValue());  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[i].length  /  2  +  Math.sqrt(covar[i].doubleValue());	  return    errors[i].length    /    2;    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
161	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  jTj);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  jTj);  [BUGGY]      return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  jTj);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  i	42	None	replace
162	[BUG]  [BUGGY]  return  errors[0]  +  cost;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  +  cost;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  +  cost;	  return    errors[0]    +    c;    	non-compiled	[CE]  incompatible  types	58	None	replace
163	[BUG]  [BUGGY]  return  errors[rows].length;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[rows].length;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[rows].length;	  return    errors[cols].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
164	[BUG]  [BUGGY]  return  errors[0]  ||  cols;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  ||  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  ||  cols;	  return    errors[0]    &&    cols;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	14	None	replace
165	[BUG]  [BUGGY]  return  errors[0]  &&  errorCount;  [CE]  cannot  find  symbol  errorCount  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors[0]  &&  errorCount;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors[0]  &&  errorCount;	  return    errors[0]    &&    cols;    	non-compiled	[CE]  cannot  find  symbol  errorCount	14	None	replace
166	[BUG]  [BUGGY]  return  errors.length  -  1,  cols;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }      [BUGGY]  return  errors.length  -  1,  cols;  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	323	323	1	replace	return  errors.length  -  1,  cols;	  return    errors.length    -    1;    	non-compiled	[CE]  ';'  expected	5	None	replace
