bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
2	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
3	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	14	None	replace
4	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	14	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	2	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	2	None	replace
7	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  residuals[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	2	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	2	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  i  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	2	replace
10	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	2	replace
11	[BUG]  [BUGGY]  criterion  +=  residual  *  jF  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  jF  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jF  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
12	[BUG]  [BUGGY]  criterion  +=  residual  *  jf  *  residuals[i];  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  jf  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jf  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jf	17	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	6	replace
14	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	6	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  3  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	2	replace
16	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  3  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	2	replace
17	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  remaining[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  remaining[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  remaining[i];	  criterion    +=    residual    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	8	None	replace
18	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  ji;  [CE]  cannot  find  symbol  ji  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  ji;  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  ji;	  criterion    +=    residual    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	8	None	replace
19	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(variant  *  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.rint(variant  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(variant  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	9	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  Math.rint(i  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	9	2	replace
21	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(i  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	9	2	replace
22	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residuals  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	9	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	12	None	replace
24	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
25	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	12	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	15	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	15	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	15	None	replace
30	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residual);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
31	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  remaining  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  remaining  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  remaining  *  residuals[i]);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
32	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji[i]);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  ji[i]);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	21	None	replace
34	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
35	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
36	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	21	None	replace
37	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(reciterion  *  residuals[i]);  [CE]  cannot  find  symbol  reciterion  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(reciterion  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(reciterion  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  reciterion	16	None	replace
38	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(variant  *  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(variant  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(variant  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	16	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	16	4	replace
40	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	compilable	  [FE]  AssertionFailedError  	16	4	replace
41	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  factor  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	16	None	replace
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
43	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
44	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
45	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
46	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(variant  *  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(variant  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(variant  *  residuals[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	11	None	replace
47	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residuals[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
48	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residual);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residual);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residual);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
49	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  ji[i]);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  ji[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  ji[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
54	[BUG]  [BUGGY]  criterion  +=  residual  *  /  jacobian[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  /  jacobian[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  jacobian[i];	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  criterion  +=  residual  *  /  rows[i];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  /  rows[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  rows[i];	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  criterion  +=  residuals  *  /  residuals[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residuals  *  /  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  /  residuals[i];	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  criterion  +=  residual  *  /  parameters[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  /  parameters[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  parameters[i];	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWidths.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residualsWidths.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWidths.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
66	[BUG]  [BUGGY]  quarters  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	4	None	replace
67	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  '.class'  expected	5	None	replace
68	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
69	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
70	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	5	None	replace
71	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	22	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	22	None	replace
73	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	22	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	22	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
76	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
77	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	13	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  criterion  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  criterion  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	4	replace
80	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  criterion  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	4	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  cost  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  cost  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	6	replace
82	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  cost  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	6	replace
83	[BUG]  [BUGGY]  criterion  +=  criterion  *  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  criterion  *  remaining  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  remaining  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	10	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	7	2	add
85	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	7	2	add
86	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  remaining  *  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	7	None	add
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	7	5	add
88	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	7	5	add
89	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  red  *  2  *  residuals[i];  [CE]  cannot  find  symbol  red  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  red  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  red  *  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  red	7	None	add
90	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residue  *  2  *  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residue  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residue  *  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	7	None	add
91	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  ji);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
92	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  maxIterations[i]);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  maxIterations[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  maxIterations[i]);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
93	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
94	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i]  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
95	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  double  criterion  +=  residual  *  2  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  double  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    2    *    residuals[i];    double  criterion  +=  residual  *  2  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	7	None	add
96	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	2	None	replace
97	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	2	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  i  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	6	replace
101	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  i  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	6	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	2	replace
103	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	17	2	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	22	None	replace
105	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  ji);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  ji);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  ji);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
106	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  maxIterations[i]);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  maxIterations[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  maxIterations[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
107	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  jF[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  jF[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  jF[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  residual  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	2	replace
109	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  residual  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	2	replace
110	[BUG]  [BUGGY]  criterion  +=  gram  *  residuals[i];  [CE]  cannot  find  symbol  gram  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  gram  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  gram  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  gram	10	None	replace
111	[BUG]  [BUGGY]  criterion  +=  msg  *  residual  *  residuals[i];  [CE]  cannot  find  symbol  msg  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  msg  *  residual  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  msg  *  residual  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  msg	10	None	replace
112	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	15	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
114	[BUG]  [BUGGY]  remaining  >  0.0  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0.0  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0.0  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	4	None	replace
115	[BUG]  [BUGGY]  criterion  +=  coefficient  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  coefficient  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  coefficient  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  coefficient  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	16	None	replace
116	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(value  *  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(value  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(value  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	16	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	14	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  4  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	2	replace
120	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  4  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	8	2	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
122	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
123	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
126	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	13	None	replace
127	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	13	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	3	None	replace
129	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
130	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
131	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
132	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  factor  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	9	None	replace
133	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(results[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  factor  *  Math.rint(results[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(results[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	9	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	21	None	replace
136	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	3	None	replace
137	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
138	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
139	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
140	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i]  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
141	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	15	None	replace
142	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	15	None	replace
143	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor,  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor,  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  factor,  residuals[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
144	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  2  *  residuals[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
145	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  msg[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remainder  *  msg[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  msg[i]);	      criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	11	None	replace
146	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  Criterion  +=  factor  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	9	None	replace
147	[BUG]  [BUGGY]  criterion  +=  metric  *  residuals[i];  [CE]  cannot  find  symbol  metric  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  metric  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  metric  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  metric	10	None	replace
148	[BUG]  [BUGGY]  criterion  +=  grammatic  *  residuals[i];  [CE]  cannot  find  symbol  grammatic  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  grammatic  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  grammatic  *  residuals[i];	  criterion    +=    residual    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  grammatic	10	None	replace
149	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	22	None	replace
150	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	22	None	replace
151	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	22	None	replace
152	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i]);	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	6	None	replace
153	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  residuals[i];  [CE]  cannot  find  symbol  remainders  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  residuals[i];	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	6	None	replace
154	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  residuals[i];  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  residuals[i];	  criterion    +=    residual    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	6	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  /  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  /  residuals[i];	  criterion    +=    residual    *    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	6	12	replace
156	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  /  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /  residuals[i];	  criterion    +=    residual    *    /    residuals[i];    	compilable	  [FE]  AssertionFailedError  	6	12	replace
157	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor,  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor,  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  factor,  residuals[i]);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
158	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residuals[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residuals[i]);	      criterion    +=    Math.sqrt(remaining    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }	      for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	20	None	replace
160	[BUG]  [BUGGY]  criterion  +=  residual  *  factor  *  residuals[i];  [CE]  cannot  find  symbol  factor  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residual  *  factor  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  factor  *  residuals[i];	  criterion    +=    residual    *    ji    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	17	None	replace
161	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	13	None	replace
162	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	13	None	replace
163	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	13	None	replace
164	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	13	None	replace
165	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	2	None	replace
166	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	2	None	replace
167	[BUG]  [BUGGY]  criterion  +=  residuals  *  2  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  criterion  +=  residuals  *  2  *  residuals[i];  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
168	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
169	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
170	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  Criterion  +=  factor  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]    }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	16	None	replace
171	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
172	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	14	None	replace
173	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  final  double  criterion  =  Math.sqrt(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	14	None	replace
174	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
175	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
176	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i  [BUGGY]    criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
