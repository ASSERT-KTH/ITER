bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  criterion  +=  residual  *  2  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	double  criterion  +=  residual  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    double    criterion    +=    residual    *    2    *    residuals[i];    	non-compiled	[CE]  ';'  expected	95	None	replace
2	[BUG]  [BUGGY]  double  criterion  +=  2  *  residuals[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  double  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	double  criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    double    criterion    +=    residual    *    2    *    residuals[i];    	non-compiled	[CE]  ';'  expected	95	None	replace
3	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	127	None	replace
4	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	127	None	replace
5	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residual  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residual	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	127	None	replace
6	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i]	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	127	None	replace
7	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residuals	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	161	None	replace
8	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	161	None	replace
9	[BUG]  [BUGGY]  quarters  >  1.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  quarters    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	66	None	replace
10	[BUG]  [BUGGY]  criterion  +=  residual  *  /  jacobian[i],  cost;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  /  jacobian[i],  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  jacobian[i],  cost;	  criterion    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
11	[BUG]  [BUGGY]  criterion  +=  residual  *  /  jacobian[i].remainder;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  /  jacobian[i].remainder;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  jacobian[i].remainder;	  criterion    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	25	None	replace
17	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	25	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	25	None	replace
19	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	25	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  residuals[i];	  criterion    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	109	2	replace
21	[BUG]  [BUGGY]  criterion  +=  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  residuals[i];	  criterion    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	109	2	replace
22	[BUG]  [BUGGY]  criterion  +=  i  *  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  remaining  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  remaining  *  residuals[i];	  criterion    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	109	None	replace
23	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  residual  *  remainings[i];	  criterion    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	109	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	39	5	add
25	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	39	5	add
26	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(remaining  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(remaining  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residual  *  Math.sqrt(remaining  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	39	None	add
27	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  remaining  *  Math.sqrt(criterion  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  remaining  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  remaining  *  Math.sqrt(criterion  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	39	None	add
28	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residue  *  Math.sqrt(criterion  *  residuals[i]);  [CE]  cannot  find  symbol  residue  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residue  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residue  *  Math.sqrt(criterion  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  residue	39	None	add
29	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remainder	39	None	add
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	74	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	74	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	74	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	74	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	135	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	135	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	135	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	135	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }	  for(int    i    =    0;    i    <    residual.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	53	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	  for(int    i    =    0;    i    <    residual.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }	  for(int    i    =    0;    i    <    residual.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	53	None	replace
45	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  parameters[i]);  [CE]  cannot  find  symbol  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  parameters[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(i  *  parameters[i]);	  criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  parameters	21	None	replace
46	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  remaining[i]);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  remaining[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(i  *  remaining[i]);	  criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	21	None	replace
47	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remaining  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remaining  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remaining  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	21	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  residual  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  residual  *  4  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	2	add
49	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  residual  *  4  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  residual  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  residual  *  4  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	2	add
50	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  remaining  *  4  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  remaining  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  remaining  *  4  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	119	None	add
51	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  red  *  4  *  residuals[i];  [CE]  cannot  find  symbol  red  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  red  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  red  *  4  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  red	119	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  4  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	6	add
53	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  4  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  4  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	6	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	5	add
55	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	5	add
56	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(result  *  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(result  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(result  *  residuals[i]);	  criterion    +=    Math.sqrt(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	46	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	87	6	add
59	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	87	6	add
60	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  remaining  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	87	None	add
61	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residues[i];  criterion  +=  2  *  residuals[i];  [CE]  cannot  find  symbol  residues  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residues[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  residual  *  2  *  residues[i];  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	87	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  2  *  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	87	5	add
63	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  2  *  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	87	5	add
64	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	87	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  residual  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  residual  *  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	2	add
66	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  residual  *  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  residual  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  residual  *  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	2	add
67	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  remaining  *  3  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  remaining  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  remaining  *  3  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	15	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	6	add
69	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	6	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  2  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  2  *  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	6	add
71	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  2  *  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  2  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  2  *  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	6	add
72	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  pattern  *  3  *  residuals[i];  [CE]  cannot  find  symbol  pattern  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  pattern  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  pattern  *  3  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  pattern	15	None	add
73	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	94	None	replace
74	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residual  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residual	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	94	None	replace
75	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	94	None	replace
76	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    	non-compiled	[CE]  not  a  statement	69	None	replace
77	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  '.class'  expected	112	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    i    *    residuals[i];    criterion  +=  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	100	6	add
79	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    criterion  +=  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	100	6	add
80	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  final  double  criterion  +=  i  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  final  double  criterion  +=  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    final  double  criterion  +=  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	100	None	add
81	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  double  criterion  +=  i  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  double  criterion  +=  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    double  criterion  +=  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	100	None	add
82	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    criterion  +=  i  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	100	None	add
83	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  criterion  +=  i  *  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    criterion  +=  i  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	100	None	add
84	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  criterion);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	159	None	replace
85	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    }    	non-compiled	[CE]  '.class'  expected	159	None	replace
86	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
87	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
88	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
89	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  '.class  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  '.class  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  '.class	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  i;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  2  *  i;	  criterion    +=    residual    *    2    *    ji;    	compilable	  [FE]  AssertionFailedError  	18	6	replace
91	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  i;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  i;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  i;	  criterion    +=    residual    *    2    *    ji;    	compilable	  [FE]  AssertionFailedError  	18	6	replace
92	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  jF;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  jF;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  jF;	  criterion    +=    residual    *    2    *    ji;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
93	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  jacobian;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  jacobian;	  criterion    +=    residual    *    2    *    ji;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
94	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  result;  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  result;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  result;	  criterion    +=    residual    *    2    *    ji;    	non-compiled	[CE]  cannot  find  symbol  result	18	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	102	2	add
96	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	102	2	add
97	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  double  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  double  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    double  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	102	None	add
98	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    criterion  +=  residual  *  jacobianEvaluations  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	102	None	add
99	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  residual  *  jacobianEvaluations  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    criterion  +=  residual  *  jacobianEvaluations  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	102	None	add
100	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  remaining  *  jacobianEvaluations  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  remaining  *  jacobianEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    criterion  +=  remaining  *  jacobianEvaluations  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	102	None	add
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	72	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	72	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	72	None	replace
104	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(result  *  residualsWeights[i]);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(result  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(result  *  residualsWeights[i]);	  criterion    +=    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	47	None	replace
105	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residual,  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residual,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residual,  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
106	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(variant  *  residual,  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(variant  *  residual,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(variant  *  residual,  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	143	None	replace
107	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residual,  residualsWeights[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residual,  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residual,  residualsWeights[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
108	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  result,  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  result,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  result,  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
109	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residuals    	non-compiled	[CE]  not  a  statement	93	None	replace
110	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residual  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	140	None	replace
111	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residual  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	140	None	replace
112	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  result);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  result);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  result);	  criterion    +=    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	48	None	replace
113	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  ji,  residual);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  ji,  residual);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  ji,  residual);	  criterion    +=    Math.sqrt(remainder    *    ji);    	non-compiled	[CE]  cannot  find  symbol  remainder	105	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	78	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	78	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	78	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	78	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	6	add
119	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	6	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	2	add
121	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	2	add
122	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	84	None	add
123	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  remaining  *  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	84	None	add
124	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  second  *  residuals[i];  [CE]  cannot  find  symbol  second  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  second  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  second  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  second	84	None	add
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	65	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
128	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residual  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights    	non-compiled	[CE]  not  a  statement	163	None	replace
129	[BUG]  [BUGGY]  criterion  +=  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  remaining  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  remaining  *  residuals[i];	  criterion    +=    cost    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	82	None	replace
130	[BUG]  [BUGGY]  criterion  +=(remaining  *  residuals[i])/  2;  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=(remaining  *  residuals[i])/  2;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=(remaining  *  residuals[i])/  2;	  criterion    +=    cost    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	82	None	replace
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  2];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residuals[i  *  2];	  criterion    +=    residuals    *    2    *    residuals[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	167	13	replace
132	[BUG]  [BUGGY]  criterion  +=  residuals[i  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  2];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals[i  *  2];	  criterion    +=    residuals    *    2    *    residuals[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	167	13	replace
133	[BUG]  [BUGGY]  criterion  +=  residuals  *  2  *  ji[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  2  *  ji[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  2  *  ji[i];	  criterion    +=    residuals    *    2    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	167	None	replace
134	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residual  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residuals    	non-compiled	[CE]  not  a  statement	45	None	replace
135	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(Remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	169	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	29	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	29	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	29	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	29	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	23	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	23	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	23	None	replace
143	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	23	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
146	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	58	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
148	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterio    	non-compiled	[CE]  not  a  statement	123	None	replace
149	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterio    	non-compiled	[CE]  not  a  statement	123	None	replace
150	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterio	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterio    	non-compiled	[CE]  not  a  statement	123	None	replace
151	[BUG]  [BUGGY]  criterion  +=  residuals  *  /  jacobian[i];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  /  jacobian[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  /  jacobian[i];	  criterion    +=    residuals    *    /    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
152	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
153	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
154	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
155	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
156	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(results[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(results[i]);	  criterion    +=    residual    *    Math.sqrt(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	38	None	replace
157	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(remaining  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(remaining  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(remaining  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	38	None	replace
158	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  2  *  residualsWeights[i]);	  criterion    +=    Math.sqrt(remainder    *    2    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	144	None	replace
159	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2  *  residualsWidths[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  2  *  residualsWidths[i]);	  criterion    +=    Math.sqrt(remainder    *    2    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	144	None	replace
160	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
161	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
162	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residual  *  residualsWeights[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	31	None	replace
163	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  remaining  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  remaining  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  remaining  *  residualsWeights[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	31	None	replace
164	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual  *  residuesWeights[i]);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual  *  residuesWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residual  *  residuesWeights[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	31	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  criterion  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	90	4	replace
166	[BUG]  [BUGGY]  criterion  +=  criterion  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	90	4	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	90	6	replace
168	[BUG]  [BUGGY]  criterion  +=  i  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	90	6	replace
169	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
170	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
171	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    }    	non-compiled	[CE]  ')'  expected	28	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    }    	non-compiled	[CE]  ')'  expected	28	None	replace
174	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    }    	non-compiled	[CE]  ')'  expected	28	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    }    	non-compiled	[CE]  ')'  expected	28	None	replace
176	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainders[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	141	None	replace
177	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder,  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder,  residuals[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	141	None	replace
178	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i],  residual);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder[i],  residual);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i],  residual);	  final    double    criterion    =    Math.rint(remainder[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	141	None	replace
179	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	141	None	replace
180	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	174	None	replace
181	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	174	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuesWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	118	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuesWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	118	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuesWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	118	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuesWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	118	None	replace
186	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	171	None	replace
187	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder,  residuals[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder,  residuals[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder,  residuals[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	171	None	replace
188	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  result);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  result);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  result);	  criterion    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	30	None	replace
189	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  remaining);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  remaining);	  criterion    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	30	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
192	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
193	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
194	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	26	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  grams;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	26	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	26	None	replace
198	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
199	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
200	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
201	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
202	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    columns;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	166	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	128	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	128	None	replace
205	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rectors.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rectors.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rectors.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	165	None	replace
206	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
207	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
208	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
209	[BUG]  [BUGGY]  remaining  >  0.0  &&  residual.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0.0  &&  residual.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0.0  &&  residual.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0.0    &&    residuals.length    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	114	None	replace
210	[BUG]  [BUGGY]  remainder  >  0.0  &&  residual.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0.0  &&  residual.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0.0  &&  residual.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0.0    &&    residuals.length    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	114	None	replace
211	[BUG]  [BUGGY]  remaining  >  0.0  &&  residual  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0.0  &&  residual  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0.0  &&  residual  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0.0    &&    residuals.length    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residual  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    /    residuals[i];    criterion  +=  residual  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	155	12	add
213	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residual  /  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residual  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    criterion  +=  residual  /  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	155	12	add
214	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  final  double  criterion  +=  residual  /  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  final  double  criterion  +=  residual  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    final  double  criterion  +=  residual  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	155	None	add
215	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  int  criterion  +=  residual  /  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  int  criterion  +=  residual  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    int  criterion  +=  residual  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	155	None	add
216	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  remaining  /  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  remaining  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    criterion  +=  remaining  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	155	None	add
217	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  double  criterion  +=  residual  /  residuals[i];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  double  criterion  +=  residual  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    double  criterion  +=  residual  /  residuals[i];	  	non-compiled	[CE]  ';'  expected	155	None	add
218	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(variant  *  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(variant  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(variant  *  residuals[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
219	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(variables[i]  *  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(variables[i]  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(variables[i]  *  residuals[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
220	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i],  cost);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i],  cost);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  residuals[i],  cost);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
221	[BUG]  [BUGGY]  criterion  +=  coefficient  *  residuals[i];  [CE]  cannot  find  symbol  coefficient  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  coefficient  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  coefficient  *  residuals[i];	  criterion    +=    grammatic    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  coefficient	148	None	replace
222	[BUG]  [BUGGY]  criterion  +=  factor  *  residuals[i];  [CE]  cannot  find  symbol  factor  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  residuals[i];	  criterion    +=    grammatic    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	148	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  criterion  *  cost  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
224	[BUG]  [BUGGY]  criterion  +=  criterion  *  cost  *  residuals[i];  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  cost  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
225	[BUG]  [BUGGY]  criterion  +=  criterion  *  factor  *  residuals[i];  [CE]  cannot  find  symbol  factor  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  factor  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  factor  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	83	None	replace
226	[BUG]  [BUGGY]  criterion  +=  criterion  *  ji  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  ji  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  ji  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	83	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  '  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  '  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  '	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  ')'  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  ')'  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  ')'	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  >>  '  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  >>  '	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  illegal  line  end  in  character  literal	134	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	117	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	117	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	117	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainingsWeights.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	117	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  3  *  residuals[i];	  criterion    +=    residual    *    3    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	16	6	replace
236	[BUG]  [BUGGY]  criterion  +=  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  3  *  residuals[i];	  criterion    +=    residual    *    3    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	16	6	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residual    	non-compiled	[CE]  ')'  expected	142	None	replace
238	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residual    	non-compiled	[CE]  '.class'  expected	142	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residual    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    criterion    *    residuals[i];    criterion  +=  criterion  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	79	2	add
241	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    criterion  +=  criterion  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	79	2	add
242	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  final  double  criterion  +=  criterion  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  final  double  criterion  +=  criterion  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    final  double  criterion  +=  criterion  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	79	None	add
243	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  double  criterion  +=  criterion  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  double  criterion  +=  criterion  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    double  criterion  +=  criterion  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	79	None	add
244	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    criterion  +=  criterion  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	79	None	add
245	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  criterion  +=  criterion  *  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    criterion  +=  criterion  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	79	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  cost  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    remaining    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	86	6	replace
247	[BUG]  [BUGGY]  criterion  +=  cost  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    remaining    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	86	6	replace
248	[BUG]  [BUGGY]  criterion  +=  residuals  *  jF  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  jF  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  jF  *  residuals[i];	  criterion    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
249	[BUG]  [BUGGY]  criterion  +=  residual  *  jF,  residuals[i];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jF,  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jF,  residuals[i];	  criterion    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  ';'  expected	11	None	replace
250	[BUG]  [BUGGY]  criterion  +=  residual  *  jF  *  ji,  residuals[i];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jF  *  ji,  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jF  *  ji,  residuals[i];	  criterion    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  ';'  expected	11	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  cost  *  residuals[i];	  criterion    +=    residual    *    factor    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	160	2	replace
252	[BUG]  [BUGGY]  criterion  +=  residual  *  cost  *  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  cost  *  residuals[i];	  criterion    +=    residual    *    factor    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	160	2	replace
253	[BUG]  [BUGGY]  criterion  +=  residual  *  sum  *  residuals[i];  [CE]  cannot  find  symbol  sum  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  sum  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  sum  *  residuals[i];	  criterion    +=    residual    *    factor    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  sum	160	None	replace
254	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.rint(variant  *  residuals[i]);  [CE]  cannot  find  symbol  variant  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  Math.rint(variant  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.rint(variant  *  residuals[i]);	  criterion    +=    residuals    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  variant	22	None	replace
255	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.rint(i  *  residuals[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.rint(i  *  residuals[i]);	  criterion    +=    residuals    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
256	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobian[i];  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobian[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobian[i];	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	153	None	replace
257	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  parameters[i];  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  parameters[i];	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	153	None	replace
258	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  maxIterations;  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  maxIterations;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  maxIterations;	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	153	None	replace
259	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobianSquares[i];  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobianSquares[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobianSquares[i];	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	153	None	replace
260	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	172	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
265	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder);	  final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	36	None	replace
266	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(i);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(i);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(i);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	36	None	replace
267	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(variant  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(variant  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(variant  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	36	None	replace
268	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  i);  criterion  +=  jF  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  i);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  i);  criterion  +=  jF  *  residualsWeights[i];	  final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	164	None	replace
269	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  i);  criterion  +=  residual  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  i);  criterion  +=  residual  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  i);  criterion  +=  residual  *  residualsWeights[i];	  final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	164	None	replace
270	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  ji);  criterion  +=  jF  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  ji);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  ji);  criterion  +=  jF  *  residualsWeights[i];	  final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	164	None	replace
271	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  jF);  criterion  +=  jF  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  jF);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  jF);  criterion  +=  jF  *  residualsWeights[i];	  final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	164	None	replace
272	[BUG]  [BUGGY]  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.rint(remainder  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	136	None	replace
273	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(variant  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(variant  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(variant  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
274	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(variables  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(variables  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(variables  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
275	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  criterion);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  }	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	98	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
278	[BUG]  [BUGGY]  criterion  +=  cost  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	41	None	replace
279	[BUG]  [BUGGY]  criterion  +=  reimbursement  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  reimbursement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  reimbursement  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  reimbursement  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  reimbursement	41	None	replace
280	[BUG]  [BUGGY]  criterion  +=  residuals[i  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals[i  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  ']'  expected	41	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  residual  *  Math.rint(i  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	20	2	add
282	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  residual  *  Math.rint(i  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	20	2	add
283	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  remaining  *  Math.rint(i  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  remaining  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  remaining  *  Math.rint(i  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  remaining	20	None	add
284	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residue  *  Math.rint(i  *  residuals[i]);  [CE]  cannot  find  symbol  residue  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residue  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  residue  *  Math.rint(i  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  residue	20	None	add
285	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  residues[i]);  [CE]  cannot  find  symbol  residues  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  residues[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  residual  *  Math.rint(i  *  residues[i]);	  	non-compiled	[CE]  cannot  find  symbol  residues	20	None	add
286	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  remainings[i]);  [CE]  cannot  find  symbol  remainings  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  residual  *  Math.rint(i  *  remainings[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  residual  *  Math.rint(i  *  remainings[i]);	  	non-compiled	[CE]  cannot  find  symbol  remainings	20	None	add
287	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]);	  criterion    +=    Math.sqrt(remainder    *    msg[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	145	None	replace
288	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWights[i]);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residualsWights[i]);	  criterion    +=    Math.sqrt(remaining    *    ji[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	32	None	replace
289	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWidths[i]);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residualsWidths[i]);	  criterion    +=    Math.sqrt(remaining    *    ji[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	32	None	replace
290	[BUG]  [BUGGY]  criterion  +=  residual  *  /  jacobianEvaluations[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  /  jacobianEvaluations[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  jacobianEvaluations[i];	  criterion    +=    residual    *    /    rows[i];    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
291	[BUG]  [BUGGY]  criterion  +=  residual  *  /  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  /  2;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  2;	  criterion    +=    residual    *    /    rows[i];    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  residual  *  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	9	2	add
293	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  residual  *  i  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	9	2	add
294	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  residual  *  i  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	9	None	add
295	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  remaining  *  i  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  remaining  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  remaining  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	9	None	add
296	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residual  *  i  *  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  residual  *  i  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	9	None	add
297	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residue  *  i  *  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  residue  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  residue  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	9	None	add
298	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights    	non-compiled	[CE]  not  a  statement	138	None	replace
299	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights    	non-compiled	[CE]  not  a  statement	138	None	replace
300	[BUG]  [BUGGY]  criterion  +=  cost  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	132	None	replace
301	[BUG]  [BUGGY]  criterion  +=  residuals[i  *  Math.rint(remainder  *  residuals[i]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals[i  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  ']'  expected	132	None	replace
302	[BUG]  [BUGGY]  criterion  +=  reimbursement  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  reimbursement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  reimbursement  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  reimbursement  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  reimbursement	132	None	replace
303	[BUG]  [BUGGY]  remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *=  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    	non-compiled	[CE]  ';'  expected	129	None	replace
304	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    	non-compiled	[CE]  not  a  statement	129	None	replace
305	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    	non-compiled	[CE]  not  a  statement	129	None	replace
306	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  '.class'  expected	62	None	replace
307	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	77	None	replace
308	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	77	None	replace
309	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	77	None	replace
310	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variables  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variables  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variables  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	70	None	replace
311	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variant  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variant  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variant  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	70	None	replace
312	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion,  cost);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion,  cost);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion,  cost);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	70	None	replace
313	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobian  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobian  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jacobian  *  residuals[i];	  criterion    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
315	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	42	None	replace
316	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	42	None	replace
317	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(residun  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.rint(residun  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(residun  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	19	None	replace
318	[BUG]  [BUGGY]  Criterion  +=  residual  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  residual  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  residual  *  Math.rint(remainder  *  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
319	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.rint(criterion  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.rint(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.rint(criterion  *  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
320	[BUG]  [BUGGY]  Criterion  +=  coefficient  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  coefficient  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  coefficient  *  Math.rint(remainder  *  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
321	[BUG]  [BUGGY]  Criterion  +=  cost  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  cost  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  cost  *  Math.rint(remainder  *  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  1  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
323	[BUG]  [BUGGY]  criterion  +=  1  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  1  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
324	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  '.class'  expected	8	None	replace
325	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  '.class'  expected	8	None	replace
326	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  '.class'  expected	8	None	replace
327	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  iterations;  ++i)  {  final  double  criterion  =  residuals[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  '.class'  expected	8	None	replace
328	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	131	None	replace
329	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	131	None	replace
330	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	131	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    i    *    residual    *    residuals[i];    criterion  +=  i  *  residual  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	108	2	add
332	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residual    *    residuals[i];    criterion  +=  i  *  residual  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	108	2	add
333	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  remaining  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residual    *    residuals[i];    criterion  +=  i  *  remaining  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  remaining	108	None	add
334	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residual    *    residuals[i];    criterion  +=  i  *  residual  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	108	None	add
335	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residual  *  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residual    *    residuals[i];    criterion  +=  i  *  residual  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	108	None	add
336	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residue  *  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  criterion  +=  i  *  residue  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residual    *    residuals[i];    criterion  +=  i  *  residue  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	108	None	add
337	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	104	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	104	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	104	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	104	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	113	None	replace
342	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	149	None	replace
343	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  not  a  statement	150	None	replace
344	[BUG]  [BUGGY]  criterion  +=  cost  *  Math.sqrt(results[i]);  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  Math.sqrt(results[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  Math.sqrt(results[i]);	  criterion    +=    residual    *    Math.sqrt(reciterion    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  results	37	None	replace
345	[BUG]  [BUGGY]  criterion  +=  cost  *  Math.sqrt(residun  *  residuals[i]);  [CE]  cannot  find  symbol  residun  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  Math.sqrt(residun  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  Math.sqrt(residun  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(reciterion    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  residun	37	None	replace
346	[BUG]  [BUGGY]  criterion  +=  residuals[i  *  /  parameters[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  /  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals[i  *  /  parameters[i];	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
347	[BUG]  [BUGGY]  criterion  +=  residual  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  parameters[i];	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	57	None	replace
348	[BUG]  [BUGGY]  criterion  +=  residual  *(parameters[i]  /  residual);  [CE]  cannot  find  symbol  parameters  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *(parameters[i]  /  residual);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *(parameters[i]  /  residual);	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	57	None	replace
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
352	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	  for(int    i    =    0;    i    <    remaining.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	64	None	replace
353	[BUG]  [BUGGY]  criterion  +=  sum  *  residuals[i];  [CE]  cannot  find  symbol  sum  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  sum  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  sum  *  residuals[i];	  criterion    +=    gram    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  sum	110	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	75	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jf  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jf  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jf  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	75	None	replace
356	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	68	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  criterion  +=  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    cost    *    residuals[i];    criterion  +=  cost  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	81	5	add
358	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  criterion  +=  cost  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  criterion  +=  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    criterion  +=  cost  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	81	5	add
359	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  final  double  criterion  +=  cost  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  final  double  criterion  +=  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    final  double  criterion  +=  cost  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	81	None	add
360	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  int  criterion  +=  cost  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  int  criterion  +=  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    int  criterion  +=  cost  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	81	None	add
361	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  double  criterion  +=  cost  *  residuals[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  double  criterion  +=  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    double  criterion  +=  cost  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	81	None	add
362	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  criterion  +=  Cost  *  residuals[i];  [CE]  cannot  find  symbol  Cost  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  criterion  +=  Cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    criterion  +=  Cost  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  Cost	81	None	add
363	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	130	None	replace
364	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
365	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	130	None	replace
366	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	130	None	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    2    *    residuals[i];    criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	13	5	add
368	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	13	5	add
369	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  int  criterion  +=  2  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  int  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    int  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	13	None	add
370	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  double  criterion  +=  2  *  residuals[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  double  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    double  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	13	None	add
371	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    criterion  +=  2  *  remainings[i];	  	non-compiled	[CE]  cannot  find  symbol  remainings	13	None	add
372	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residues[i];  [CE]  cannot  find  symbol  residues  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  2  *  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    criterion  +=  2  *  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	13	None	add
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  2  *  residual;	  criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	14	6	replace
374	[BUG]  [BUGGY]  criterion  +=  2  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  2  *  residual;	  criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	14	6	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	1	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	1	None	replace
377	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	1	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residual.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	1	None	replace
379	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  jacobian[i];  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  jacobian[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  jacobian[i];	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	154	None	replace
380	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  parameters[i];  [CE]  cannot  find  symbol  remainders  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  parameters[i];	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	154	None	replace
381	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  maxIterations;  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  maxIterations;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  maxIterations;	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	154	None	replace
382	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  factor;  [CE]  cannot  find  symbol  remainders  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  factor;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  factor;	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	154	None	replace
383	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    	non-compiled	[CE]  not  a  statement	126	None	replace
384	[BUG]  [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    	non-compiled	[CE]  not  a  statement	126	None	replace
385	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    	non-compiled	[CE]  not  a  statement	126	None	replace
386	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
387	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
388	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  ji;  [CE]  cannot  find  symbol  ji  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  ji;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  4  *  ji;	  criterion    +=    residual    *    4    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	120	None	replace
389	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
390	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
391	[BUG]  [BUGGY]  criterion  +=  residual  *  residuals  *  jacobianEvaluations[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  residuals  *  jacobianEvaluations[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  residuals  *  jacobianEvaluations[i];	  criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	103	None	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  maxIterations  *  residuals[i];	  criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	103	2	replace
393	[BUG]  [BUGGY]  criterion  +=  residual  *  maxIterations  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  maxIterations  *  residuals[i];	  criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	103	2	replace
394	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	76	None	replace
395	[BUG]  [BUGGY]  Criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);	  Criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	170	None	replace
396	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.sqrt(criterion  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.sqrt(criterion  *  residuals[i]);	  Criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	170	None	replace
397	[BUG]  [BUGGY]  Criterion  +=  coefficient  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  coefficient  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  coefficient  *  Math.sqrt(remainder  *  residuals[i]);	  Criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	170	None	replace
398	[BUG]  [BUGGY]  Criterion  +=  cost  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  cost  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  cost  *  Math.sqrt(remainder  *  residuals[i]);	  Criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	170	None	replace
399	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i  +  1];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i  +  1];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i  +  1];	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
400	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.rint(remainings[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.rint(remainings[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i]  *  Math.rint(remainings[i]);	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
401	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  /  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i]  /  2;  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i]  /  2;	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
402	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
403	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
404	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
405	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
406	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  remainings[i];	  criterion    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  2;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  i  *  2;	  criterion    +=    residual    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	6	replace
408	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  2;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  2;	  criterion    +=    residual    *    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	10	6	replace
409	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  jF[i];  [CE]  array  required,  but  MultivariateMatrixFunction  found  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  jF[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  jF[i];	  criterion    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  array  required,  but  MultivariateMatrixFunction  found	10	None	replace
410	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residuals    	non-compiled	[CE]  not  a  statement	139	None	replace
411	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
412	[BUG]  [BUGGY]  criterion  +=  residual  /  rows[i];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  rows[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /  rows[i];	  criterion    +=    residual    /    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	156	None	replace
413	[BUG]  [BUGGY]  criterion  +=  residual  /  remainings[i];  [CE]  cannot  find  symbol  remainings  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  remainings[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /  remainings[i];	  criterion    +=    residual    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainings	156	None	replace
414	[BUG]  [BUGGY]  criterion  +=  residual  /  other.remainders[i];  [CE]  cannot  find  symbol  other  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  other.remainders[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /  other.remainders[i];	  criterion    +=    residual    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  other	156	None	replace
415	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    coefficient    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	115	None	replace
416	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(criterion  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(criterion  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	40	None	replace
417	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(result,  criterion  *  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(result,  criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(result,  criterion  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	40	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  residual;	  criterion    +=    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	101	6	replace
419	[BUG]  [BUGGY]  criterion  +=  i  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  residual;	  criterion    +=    i    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	101	6	replace
420	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(Remaining    *    criterion);    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	124	None	replace
421	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(Remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	124	None	replace
422	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(Remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	124	None	replace
423	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(results[i]);  [CE]  cannot  find  symbol  results  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(results[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(results[i]);	  criterion    +=    factor    *    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	133	None	replace
424	[BUG]  [BUGGY]  criterion  +=  cost  *  Math.rint(results[i]);  [CE]  cannot  find  symbol  results  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  Math.rint(results[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  Math.rint(results[i]);	  criterion    +=    factor    *    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  results	133	None	replace
425	[BUG]  [BUGGY]  criterion  +=  result  *  Math.rint(results[i]);  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  result  *  Math.rint(results[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  result  *  Math.rint(results[i]);	  criterion    +=    factor    *    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  result	133	None	replace
426	[BUG]  [BUGGY]  criterion  +=  reimbursement  *  Math.rint(results[i]);  [CE]  cannot  find  symbol  reimbursement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  reimbursement  *  Math.rint(results[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  reimbursement  *  Math.rint(results[i]);	  criterion    +=    factor    *    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  reimbursement	133	None	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  criterion  *  residual;	  criterion    +=    criterion    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	80	4	replace
428	[BUG]  [BUGGY]  criterion  +=  criterion  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  residual;	  criterion    +=    criterion    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	80	4	replace
429	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i],  cost;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i],  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  residuals[i],  cost;	  criterion    +=    criterion    *    residuals[i];    	non-compiled	[CE]  ';'  expected	80	None	replace
430	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual,  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residual,  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	157	None	replace
431	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  result,  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  result,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  result,  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	157	None	replace
432	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor,  jacobian[i]);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor,  jacobian[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  factor,  jacobian[i]);	  criterion    +=    Math.sqrt(remaining    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	157	None	replace
433	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  ji[i];  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  ji[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  ji[i];	  criterion    +=    residual    *    2    *    remaining[i];    	non-compiled	[CE]  cannot  find  symbol  ji	17	None	replace
434	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  jacobian[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  jacobian[i];	  criterion    +=    residual    *    2    *    remaining[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
435	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  rows[i];  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  rows[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  rows[i];	  criterion    +=    residual    *    2    *    remaining[i];    	non-compiled	[CE]  array  required,  but  int  found	17	None	replace
436	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i]);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	152	None	replace
437	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.cos(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.cos(remainders[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.cos(remainders[i]);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	152	None	replace
438	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i],  coefficient);  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i],  coefficient);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i],  coefficient);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	152	None	replace
439	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    	non-compiled	[CE]  not  a  statement	69	None	replace
440	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
441	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
442	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
443	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variable  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variable  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(variable  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	70	None	replace
444	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion,  factor);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion,  factor);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion,  factor);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	70	None	replace
445	[BUG]  [BUGGY]  final  double  criterion  =  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residualsWeights[i];	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
446	[BUG]  [BUGGY]  final  double  criterion  =  parameters[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  parameters[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  parameters[i];	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
447	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	75	None	replace
448	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	75	None	replace
449	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(resistances  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.rint(resistances  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(resistances  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	19	None	replace
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1.0  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  1.0  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	85	6	replace
451	[BUG]  [BUGGY]  criterion  +=  1.0  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1.0  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  1.0  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residual    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	85	6	replace
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	135	None	replace
453	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  int  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  int  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    int  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	102	None	add
454	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  period  *  jacobianEvaluations  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobianEvaluations  *  residuals[i];  criterion  +=  period  *  jacobianEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    criterion  +=  period  *  jacobianEvaluations  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	102	None	add
455	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainden  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remainden  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainden  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainden  *  residualsWeights[i]);	  criterion    +=    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainden	47	None	replace
456	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  ji,  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  ji,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  ji,  residuals[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
457	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  ji,  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  ji,  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  ji,  residualsWeights[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
458	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(value  *  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(value  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(value  *  residuals[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
459	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residues.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuesWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	118	None	replace
460	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuesWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuesWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	118	None	replace
461	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(remainders[i])/  residuals[i];  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.rint(remainders[i])/  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(remainders[i])/  residuals[i];	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	154	None	replace
462	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainder)/  parameters[i];  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainder)/  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainder)/  parameters[i];	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	154	None	replace
463	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  jacobianSquares[i];  [CE]  cannot  find  symbol  remainders  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  jacobianSquares[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  jacobianSquares[i];	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	154	None	replace
464	[BUG]  [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  ';'  expected	131	None	replace
465	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(redev  *  residuals[i]);  [CE]  cannot  find  symbol  redev  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(redev  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(redev  *  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  redev	158	None	replace
466	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
467	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
468	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    	non-compiled	[CE]  not  a  statement	126	None	replace
469	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterio    	non-compiled	[CE]  not  a  statement	123	None	replace
470	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(Remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	124	None	replace
471	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(Remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(Remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	124	None	replace
472	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	77	None	replace
473	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	77	None	replace
474	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    	non-compiled	[CE]  not  a  statement	129	None	replace
475	[BUG]  [BUGGY]  criterion  +=  residual  *  jF  *  jacobianEvaluations[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jF  *  jacobianEvaluations[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jF  *  jacobianEvaluations[i];	  criterion    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
476	[BUG]  [BUGGY]  criterion  +=  residual  *  jF  *  parameters[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jF  *  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jF  *  parameters[i];	  criterion    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
477	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(result  *  2  *  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(result  *  2  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(result  *  2  *  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    2    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	144	None	replace
478	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  3  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  3  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  3  *  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    2    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	144	None	replace
479	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residualsWhees[i]);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residualsWhees[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residualsWhees[i]);	  criterion    +=    Math.sqrt(remainder    *    ji[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	49	None	replace
480	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(result,  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(result,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(result,  residuals[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	141	None	replace
481	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder,  residuals[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder,  residuals[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder,  residuals[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	172	None	replace
482	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  i);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  i);	  criterion    +=    Math.sqrt(remainder    *    ji);    	non-compiled	[CE]  cannot  find  symbol  remainder	105	None	replace
483	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  i  *  residuals[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  i  *  residuals[i];  }  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  i  *  residuals[i];  }	  	non-compiled	[CE]  ';'  expected	100	None	add
484	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  i  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	100	None	add
485	[BUG]  [BUGGY]  criterion  +=  i  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  i  *  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  i  *  residuals[i];  }  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  criterion  +=  i  *  residuals[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	100	None	add
486	[BUG]  [BUGGY]  criterion  +=  residuals  *  /  rows[i];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  /  rows[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  /  rows[i];	  criterion    +=    residual    *    /    rows[i];    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
487	[BUG]  [BUGGY]  criterion  +=  residual  *  /(rows[i]  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  /(rows[i]  -  1];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /(rows[i]  -  1];	  criterion    +=    residual    *    /    rows[i];    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
488	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    }    	non-compiled	[CE]  ')'  expected	28	None	replace
489	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    }    	non-compiled	[CE]  ')'  expected	28	None	replace
490	[BUG]  [BUGGY]  criterion  +=  residuals  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  residuals[i];	  criterion    +=    i    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	101	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  4  *  residuals[i];	  criterion    +=    residual    *    4    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	120	6	replace
492	[BUG]  [BUGGY]  criterion  +=  i  *  4  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  4  *  residuals[i];	  criterion    +=    residual    *    4    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	120	6	replace
493	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  maxEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  maxEvaluations  *  residuals[i];	  criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	103	3	replace
495	[BUG]  [BUGGY]  criterion  +=  residual  *  maxEvaluations  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  maxEvaluations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  maxEvaluations  *  residuals[i];	  criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	103	3	replace
496	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainder)*  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainder)*  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainder)*  residuals[i];	  criterion    +=    residual    *    jacobianEvaluations    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	103	None	replace
497	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights    	non-compiled	[CE]  not  a  statement	163	None	replace
498	[BUG]  [BUGGY]  criterion  +=  parameters  *  /  residuals[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  parameters  *  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  parameters  *  /  residuals[i];	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
499	[BUG]  [BUGGY]  criterion  +=  residuals  *  /  parameters[i];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  /  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  /  parameters[i];	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
500	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
501	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
502	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  6;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  6;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
503	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights[i];  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  not  a  statement	137	None	replace
504	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
505	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
506	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  factor);	  criterion    +=    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	48	None	replace
507	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2);  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  2);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  2);	  criterion    +=    Math.sqrt(remainder    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remainder	48	None	replace
508	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  residual  *  parameters[i];	  criterion    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	109	None	replace
509	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(result)*  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(result)*  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(result)*  residuals[i];	  criterion    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	12	None	replace
510	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
511	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	5	None	replace
512	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
513	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  >>  ')'  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  >>  ')'  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  >>  ')'	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
514	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(result);  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(result);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(result);	  criterion    +=    factor    *    Math.rint(results[i]);    	non-compiled	[CE]  cannot  find  symbol  result	133	None	replace
515	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(residun  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(residun  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(residun  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	38	None	replace
516	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  double  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  double  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    double  criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	87	None	add
517	[BUG]  [BUGGY]  criterion  +=  grammatic  *  2  *  residuals[i];  criterion  +=  grammatic  *  2  *  residuals[i];  [CE]  cannot  find  symbol  grammatic  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  grammatic  *  2  *  residuals[i];  criterion  +=  grammatic  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  grammatic  *  2  *  residuals[i];  criterion  +=  grammatic  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    remaining    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  grammatic	86	None	replace
518	[BUG]  [BUGGY]  criterion  +=  msg.length  *  2  *  residuals[i];  criterion  +=  msg.length  *  2  *  residuals[i];  [CE]  cannot  find  symbol  msg  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  msg.length  *  2  *  residuals[i];  criterion  +=  msg.length  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  msg.length  *  2  *  residuals[i];  criterion  +=  msg.length  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    remaining    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  msg	86	None	replace
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residuals[i];  criterion  +=  i  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  2  *  residuals[i];  criterion  +=  i  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    remaining    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	86	6	replace
520	[BUG]  [BUGGY]  criterion  +=  i  *  2  *  residuals[i];  criterion  +=  i  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residuals[i];  criterion  +=  i  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  2  *  residuals[i];  criterion  +=  i  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    remaining    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	86	6	replace
521	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  final  double  criterion  +=  2  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  final  double  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    final  double  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	13	None	add
522	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	23	None	replace
523	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	23	None	replace
524	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	23	None	replace
525	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residual  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residual	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	94	None	replace
526	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights[i]  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residualsWeights[i]	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	94	None	replace
527	[BUG]  [BUGGY]  criterion  +=  residual  /  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /  parameters[i];	  criterion    +=    residual    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	156	None	replace
528	[BUG]  [BUGGY]  criterion  +=  residual  /(remaining  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /(remaining  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /(remaining  *  residuals[i]);	  criterion    +=    residual    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remaining	156	None	replace
529	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
530	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  not  a  statement	149	None	replace
531	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	117	None	replace
532	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  remainingsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	117	None	replace
533	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.rint(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.rint(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i]  *  Math.rint(remainder  *  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  1  *  residuals[i];  criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
535	[BUG]  [BUGGY]  criterion  +=  1  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  1  *  residuals[i];  criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  3  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  3  *  residuals[i];  criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
537	[BUG]  [BUGGY]  criterion  +=  3  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  3  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  3  *  residuals[i];  criterion  +=  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  3  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  3  *  residuals[i];  criterion  +=  3  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
539	[BUG]  [BUGGY]  criterion  +=  3  *  residuals[i];  criterion  +=  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  3  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  3  *  residuals[i];  criterion  +=  3  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	88	6	replace
540	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainder)/  residuals[i];  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainder)/  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainder)/  residuals[i];	  criterion    +=    residuals    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	56	None	replace
541	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(result)/  residuals[i];  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(result)/  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(result)/  residuals[i];	  criterion    +=    residuals    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  result	56	None	replace
542	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainder);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainder);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainder);	  criterion    +=    residuals    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	56	None	replace
543	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  residuals[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  residuals[i];  }  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  residuals[i];  }	  	non-compiled	[CE]  ';'  expected	79	None	add
544	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	79	None	add
545	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  }  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  }	  	non-compiled	[CE]  ';'  expected	81	None	add
546	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	81	None	add
547	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
548	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  i  *  2  *  residual;	  criterion    +=    residual    *    2    *    ji;    	compilable	  [FE]  AssertionFailedError  	18	6	replace
550	[BUG]  [BUGGY]  criterion  +=  i  *  2  *  residual;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  2  *  residual;	  criterion    +=    residual    *    2    *    ji;    	compilable	  [FE]  AssertionFailedError  	18	6	replace
551	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  period;  [CE]  cannot  find  symbol  period  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  period;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  period;	  criterion    +=    residual    *    2    *    ji;    	non-compiled	[CE]  cannot  find  symbol  period	18	None	replace
552	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	44	None	replace
553	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    	non-compiled	[CE]  '.class'  expected	25	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	128	None	replace
555	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.rint(value  *  residuals[i]);  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  Math.rint(value  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.rint(value  *  residuals[i]);	  criterion    +=    residuals    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  value	22	None	replace
556	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  not  a  statement	97	None	replace
557	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	42	None	replace
558	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	42	None	replace
559	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	72	None	replace
560	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	72	None	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  criterion  *  maxIterations  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
562	[BUG]  [BUGGY]  criterion  +=  criterion  *  maxIterations  *  residuals[i];  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  maxIterations  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  maxIterations  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
563	[BUG]  [BUGGY]  criterion  +=  criterion  *  MATRIX_SIZE  *  residuals[i];  [CE]  cannot  find  symbol  MATRIX_SIZE  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  MATRIX_SIZE  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  MATRIX_SIZE  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  MATRIX_SIZE	83	None	replace
564	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
565	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
566	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
567	[BUG]  [BUGGY]  Quarterquarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Quarterquarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Quarterquarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	165	None	replace
568	[BUG]  [BUGGY]  criterion  +=  residuals  *  2  *  parameters[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  2  *  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  2  *  parameters[i];	  criterion    +=    residuals    *    2    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	167	None	replace
569	[BUG]  [BUGGY]  criterion  +=  gram  *  2  *  residuals[i];  [CE]  cannot  find  symbol  gram  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  gram  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  gram  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    red    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  gram	89	None	replace
570	[BUG]  [BUGGY]  criterion  +=  msg.length  *  2  *  residuals[i];  [CE]  cannot  find  symbol  msg  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  msg.length  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  msg.length  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    red    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  msg	89	None	replace
571	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  factor);	  criterion    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	30	None	replace
572	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  i);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  i);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  i);	  criterion    +=    Math.sqrt(remaining    *    residual);    	non-compiled	[CE]  cannot  find  symbol  remaining	30	None	replace
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  criterion  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  criterion  *  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	3	add
574	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  criterion  *  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  criterion  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  criterion  *  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	15	3	add
575	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  double  criterion  +=  residual  *  3  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  double  criterion  +=  residual  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    double  criterion  +=  residual  *  3  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	15	None	add
576	[BUG]  [BUGGY]  criterion  +=  coefficient  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  coefficient  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  coefficient  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  coefficient  *  Math.rint(remainder  *  residuals[i]);	  criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	132	None	replace
577	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.sqrt(jacobian  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.sqrt(jacobian  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.sqrt(jacobian  *  residuals[i]);	  Criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	170	None	replace
578	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residuals    	non-compiled	[CE]  not  a  statement	139	None	replace
579	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1.0  *  residuals[i];  criterion  +=  1.0  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  1.0  *  residuals[i];  criterion  +=  1.0  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	90	6	replace
580	[BUG]  [BUGGY]  criterion  +=  1.0  *  residuals[i];  criterion  +=  1.0  *  residuals[i];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  1.0  *  residuals[i];  criterion  +=  1.0  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  1.0  *  residuals[i];  criterion  +=  1.0  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	90	6	replace
581	[BUG]  [BUGGY]  criterion  +=  /  2  *  residuals[i];  criterion  +=  /  2  *  residuals[i];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  /  2  *  residuals[i];  criterion  +=  /  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  /  2  *  residuals[i];  criterion  +=  /  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
582	[BUG]  [BUGGY]  criterion  +=  ji  *  residual  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  ji  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  ji  *  residual  *  residuals[i];	  criterion    +=    msg    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	111	None	replace
583	[BUG]  [BUGGY]  criterion  +=  coefficient  *  residual  *  residuals[i];  [CE]  cannot  find  symbol  coefficient  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  coefficient  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  coefficient  *  residual  *  residuals[i];	  criterion    +=    msg    *    residual    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  coefficient	111	None	replace
584	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residuals    	non-compiled	[CE]  not  a  statement	93	None	replace
585	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
586	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
587	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWhees[i]);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWhees[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residualsWhees[i]);	  criterion    +=    Math.sqrt(remaining    *    ji[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	32	None	replace
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	4	add
589	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  residual  *  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	4	add
590	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji,  residual);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji,  residual);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  ji,  residual);	  criterion    +=    Math.sqrt(remaining    *    ji);    	non-compiled	[CE]  cannot  find  symbol  remaining	91	None	replace
591	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  double  criterion  +=  residual  *  i  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  double  criterion  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    double  criterion  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	9	None	add
592	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  final  double  criterion  +=  residual  *  i  *  residuals[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  final  double  criterion  +=  residual  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    final  double  criterion  +=  residual  *  i  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	9	None	add
593	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(result  *  factor,  residuals[i]);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(result  *  factor,  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(result  *  factor,  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  result	143	None	replace
594	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor,  jacobian[i]);  [CE]  cannot  find  symbol  remainder  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor,  jacobian[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  factor,  jacobian[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
595	[BUG]  [BUGGY]  if(remaining  <  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  <  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	if(remaining  <  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residual    	non-compiled	[CE]  ')'  expected	142	None	replace
596	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	26	None	replace
597	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  parameters[i];  [CE]  cannot  find  symbol  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  parameters[i];	  criterion    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  parameters	10	None	replace
598	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  Math.rint(remainder);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  Math.rint(remainder);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  Math.rint(remainder);	  criterion    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	10	None	replace
599	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
600	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  numWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  numWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  numWeights;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	96	None	replace
601	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(reciterion  *  residuals[i]);  [CE]  cannot  find  symbol  reciterion  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(reciterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residual  *  Math.sqrt(reciterion  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  reciterion	39	None	add
602	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(region  *  residuals[i]);  [CE]  cannot  find  symbol  region  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  residual  *  Math.sqrt(region  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  residual  *  Math.sqrt(region  *  residuals[i]);	  	non-compiled	[CE]  cannot  find  symbol  region	39	None	add
603	[BUG]  [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  double  criterion  +=  i  *  residual  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residual  *  residuals[i];  double  criterion  +=  i  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    i    *    residual    *    residuals[i];    double  criterion  +=  i  *  residual  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	108	None	add
604	[BUG]  [BUGGY]  criterion  +=  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.rint(remainder  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.rint(remainder  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	21	None	replace
605	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainder  *  parameters[i]);  [CE]  cannot  find  symbol  remainder  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainder  *  parameters[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainder  *  parameters[i]);	  criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	21	None	replace
606	[BUG]  [BUGGY]  remaining  >  1.0  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  1.0  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  1.0  &&  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0.0    &&    residuals.length    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	114	None	replace
607	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  not  a  statement	175	None	replace
608	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	  for(int    i    =    0;    i    <    residual.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
609	[BUG]  [BUGGY]  criterion  +=  i  *  2  *  residual[i];  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  2  *  residual[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  2  *  residual[i];	  criterion    +=    residual    *    2    *    remaining[i];    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
610	[BUG]  [BUGGY]  criterion  +=  gram  *  2  *  residual[i];  [CE]  cannot  find  symbol  gram  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  gram  *  2  *  residual[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  gram  *  2  *  residual[i];	  criterion    +=    residual    *    2    *    remaining[i];    	non-compiled	[CE]  cannot  find  symbol  gram	17	None	replace
611	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual,  residualsWeights[i]);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual,  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residual,  residualsWeights[i]);	  criterion    +=    Math.sqrt(remaining    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	157	None	replace
612	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  }	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	159	None	replace
613	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(result  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(result  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(result  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(reciterion    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	37	None	replace
614	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(reciterion  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(reciterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(reciterion  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(reciterion    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	37	None	replace
615	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
616	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.cols;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	121	None	replace
617	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder)+  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder)+  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder)+  Math.sqrt(remainder  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	36	None	replace
618	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder,  i);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder,  i);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder,  i);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	36	None	replace
619	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  remainings[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    remainings[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	104	None	replace
620	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  residualsWeights.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    residuals.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  Math.rint(i  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	20	4	add
622	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  Math.rint(i  *  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  criterion  +=  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    criterion  +=  Math.rint(i  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	20	4	add
623	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  double  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  double  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    double  criterion  +=  residual  *  Math.rint(i  *  residuals[i]);	  	non-compiled	[CE]  ';'  expected	20	None	add
624	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  residuals[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  '.class'  expected	8	None	replace
625	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.rint(jF,  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.rint(jF,  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.rint(jF,  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
626	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.rint(remainder  *  ji);  [CE]  cannot  find  symbol  Criterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.rint(remainder  *  ji);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.rint(remainder  *  ji);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
627	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	78	None	replace
628	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
629	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	74	None	replace
630	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
631	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  remaining;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
632	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  ji  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  ji  *  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	31	None	replace
633	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  i  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  i  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  i  *  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	31	None	replace
634	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  double  criterion  +=  residual  *  4  *  residuals[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  double  criterion  +=  residual  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    double  criterion  +=  residual  *  4  *  residuals[i];	  	non-compiled	[CE]  ';'  expected	119	None	add
635	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  '.class'  expected	76	None	replace
636	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(remainders[i])/  residuals[i];  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(remainders[i])/  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(remainders[i])/  residuals[i];	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	153	None	replace
637	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(variables[i])/  residuals[i];  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(variables[i])/  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(variables[i])/  residuals[i];	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  	153	None	replace
638	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(values[i])/  residuals[i];  [CE]  cannot  find  symbol  values  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(values[i])/  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(values[i])/  residuals[i];	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  values	153	None	replace
639	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	29	None	replace
640	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(variables[i]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(variables[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(variables[i]);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  	152	None	replace
641	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(remainders[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(remainders[i]);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	152	None	replace
642	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(values[i]);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(values[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(values[i]);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  values	152	None	replace
643	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor  *  residuals[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  factor  *  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	31	None	replace
644	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  /  residuals[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  /  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  /  residuals[i]);	  criterion    +=    Math.sqrt(remaining    *    remaining    *    residuals[i]);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
645	[BUG]  [BUGGY]  remaining  *  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  *  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  *  residuals.length  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0.0    &&    residuals.length    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	114	None	replace
646	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(variant  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.rint(variant  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(variant  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	19	None	replace
647	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  rows[i];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  rows[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  4  *  rows[i];	  criterion    +=    residual    *    4    *    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	120	None	replace
648	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
649	[BUG]  [BUGGY]  quarters  >  0.0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0.0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0.0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  }	  quarters    >    0.0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  not  a  statement	66	None	replace
650	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  rows[i];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  rows[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  i  *  rows[i];	  criterion    +=    residual    *    i    *    residuals[i];    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
651	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  this.rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	75	None	replace
652	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor,  jacobianEvaluations[i]);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  factor,  jacobianEvaluations[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  factor,  jacobianEvaluations[i]);	  criterion    +=    Math.sqrt(remainder    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	replace
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  Math.sqrt(criterion  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	39	5	add
654	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  Math.sqrt(criterion  *  residuals[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(criterion  *  residuals[i]);  criterion  +=  Math.sqrt(criterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    Math.sqrt(criterion    *    residuals[i]);    criterion  +=  Math.sqrt(criterion  *  residuals[i]);	  	compilable	  [FE]  AssertionFailedError  	39	5	add
655	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	130	None	replace
656	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
657	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residualsWeights);  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remainder  *  residualsWeights);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remainder  *  residualsWeights);	  criterion    +=    Math.sqrt(remainder    *    ji);    	non-compiled	[CE]  cannot  find  symbol  remainder	105	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  2  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  2  *  4  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	6	add
659	[BUG]  [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  2  *  4  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  4  *  residuals[i];  criterion  +=  2  *  4  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    4    *    residuals[i];    criterion  +=  2  *  4  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	119	6	add
660	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(remainders[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.sqrt(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i]  *  Math.sqrt(remainders[i]);	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
661	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.rint(remainders[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i]  *  Math.rint(remainders[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i]  *  Math.rint(remainders[i]);	  final    double    criterion    =    residuals[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	7	None	replace
662	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  jacobianEvaluations[i];  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.rint(remainders[i])/  jacobianEvaluations[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainders[i])/  jacobianEvaluations[i];	  criterion    +=    residual    *    Math.rint(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	154	None	replace
663	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	27	None	replace
664	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.max(remainder,  gram);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.max(remainder,  gram);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.max(remainder,  gram);  criterion  +=  gram  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i]    	non-compiled	[CE]  not  a  statement	94	None	replace
665	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals[i]  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
666	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
667	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	35	None	replace
668	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  2  *  residual  *  residuals[i];	  criterion    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	109	1	replace
669	[BUG]  [BUGGY]  criterion  +=  2  *  residual  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residual  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  2  *  residual  *  residuals[i];	  criterion    +=    i    *    residual    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	109	1	replace
670	[BUG]  [BUGGY]  criterion  +=  i  *  residuals  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  i  *  residuals  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  i  *  residuals  *  residuals[i];	  criterion    +=    i    *    residual    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	109	None	replace
671	[BUG]  [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  period  *  i  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  i  *  residuals[i];  criterion  +=  period  *  i  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    i    *    residuals[i];    criterion  +=  period  *  i  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	9	None	add
672	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);	  for(int    i    =    0;    i    <    residualsWeights.length;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWidths[i]);    	non-compiled	[CE]  '.class'  expected	65	None	replace
673	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	1	None	replace
674	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	1	None	replace
675	[BUG]  [BUGGY]  criterion  +=  criterion  *  coefficients  *  residuals[i];  [CE]  cannot  find  symbol  coefficients  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  coefficients  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  criterion  *  coefficients  *  residuals[i];	  criterion    +=    criterion    *    remaining    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  coefficients	83	None	replace
676	[BUG]  [BUGGY]  criterion  +=  ji  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  ji  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  ji  *  residuals[i];	  criterion    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  ji	12	None	replace
677	[BUG]  [BUGGY]  criterion  +=  jf  *  residuals[i];  [CE]  cannot  find  symbol  jf  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  jf  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  jf  *  residuals[i];	  criterion    +=    residual    *    jf    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  jf	12	None	replace
678	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.rint(remainder);  [CE]  cannot  find  symbol  remainder  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  Math.rint(remainder);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.rint(remainder);	  criterion    +=    residuals    *    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	56	None	replace
679	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor,  jacobianEvaluations[i]);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  factor,  jacobianEvaluations[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  factor,  jacobianEvaluations[i]);	  criterion    +=    Math.sqrt(remaining    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	157	None	replace
680	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual,  jacobian[i]);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residual,  jacobian[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residual,  jacobian[i]);	  criterion    +=    Math.sqrt(remaining    *    factor,    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  remaining	157	None	replace
681	[BUG]  [BUGGY]  Criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  Math.sqrt(remainder  *  residuals[i]);	  criterion    +=    Math.sqrt(remainder    *    jF[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	107	None	replace
682	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterio    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
683	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterio    	non-compiled	[CE]  not  a  statement	123	None	replace
684	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	68	None	replace
685	[BUG]  [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  period  *  3  *  residuals[i];  [CE]  cannot  find  symbol  period  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  3  *  residuals[i];  criterion  +=  period  *  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    *    3    *    residuals[i];    criterion  +=  period  *  3  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  period	15	None	add
686	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	74	None	replace
687	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  msg,  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  msg,  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  msg,  residualsWeights[i]);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
688	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  1.0);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  1.0);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  1.0);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	136	None	replace
689	[BUG]  [BUGGY]  criterion  +=  residuals  *  Math.sqrt(remainders[i]);  [CE]  cannot  find  symbol  remainders  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  Math.sqrt(remainders[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  Math.sqrt(remainders[i]);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	152	None	replace
690	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i],  factor);  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i],  factor);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i],  factor);	  criterion    +=    residual    *    Math.sqrt(remainders[i]);    	non-compiled	[CE]  cannot  find  symbol  remainders	152	None	replace
691	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	128	None	replace
692	[BUG]  [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  2);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  2);	  final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	70	None	replace
693	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  factor;  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  2  *  factor;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  factor;	  criterion    +=    residual    *    2    *    ji;    	non-compiled	[CE]  cannot  find  symbol  factor	18	None	replace
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	6	add
695	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  residual  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	84	6	add
696	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);	  for(int    i    =    0;    i    <    2;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  '.class'  expected	59	None	replace
697	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  columns;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.sqrt(remaining    *    criterion);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
698	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(redev  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(redev  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(redev  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(value    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	116	None	replace
699	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(results  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(results  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(results  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(value    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	116	None	replace
700	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);	  for(int    i    =    0;    i    <    residualsWeights;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    	non-compiled	[CE]  '.class'  expected	125	None	replace
701	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	33	None	replace
702	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder  *  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder  *  residuals[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	141	None	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion    +=    2    *    residuals[i];    criterion  +=  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	13	5	add
704	[BUG]  [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  2  *  residuals[i];  criterion  +=  3  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    2    *    residuals[i];    criterion  +=  3  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	13	5	add
705	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.rint(i  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.rint(i  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.rint(i  *  residuals[i]);	  criterion    +=    residual    *    Math.rint(i    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	21	None	replace
706	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  rows];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residuals[i  *  rows];	  criterion    +=    residual    *    /    rows[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	13	replace
707	[BUG]  [BUGGY]  criterion  +=  residuals[i  *  rows];  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  rows];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals[i  *  rows];	  criterion    +=    residual    *    /    rows[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	13	replace
708	[BUG]  [BUGGY]  final  double  criterion  =  Math.min(remainder,  jF);  criterion  +=  residual  *  residualsWeights[i];  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.min(remainder,  jF);  criterion  +=  residual  *  residualsWeights[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.min(remainder,  jF);  criterion  +=  residual  *  residualsWeights[i];	  final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    jF    *    residualsWeights[i];    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	164	None	replace
709	[BUG]  [BUGGY]  if(remainder  >  0.0)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  cannot  find  symbol  remainder  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remainder  >  0.0)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	if(remainder  >  0.0)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }	  final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  cannot  find  symbol  remainder	171	None	replace
710	[BUG]  [BUGGY]  criterion  +=  coefficient  *  Math.sqrt(reciterion  *  residuals[i]);  [CE]  cannot  find  symbol  coefficient  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  coefficient  *  Math.sqrt(reciterion  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  coefficient  *  Math.sqrt(reciterion  *  residuals[i]);	  criterion    +=    coefficient    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	115	None	replace
711	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
712	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  residuals.length;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residuals[i]);  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    }    	non-compiled	[CE]  '.class'  expected	71	None	replace
713	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  gram  =  Math.min(remainder,  gram);  criterion  +=  gram  *  residuals	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.min(remainder,    criterion);    criterion    +=    gram    *    residuals    	non-compiled	[CE]  not  a  statement	93	None	replace
714	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  remainings.length;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	29	None	replace
715	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residual  /  residues[i];  [CE]  cannot  find  symbol  residues  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residual  /  residues[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    criterion  +=  residual  /  residues[i];	  	non-compiled	[CE]  cannot  find  symbol  residues	155	None	add
716	[BUG]  [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residue  /  residuals[i];  [CE]  cannot  find  symbol  residue  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  residuals[i];  criterion  +=  residue  /  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    residual    /    residuals[i];    criterion  +=  residue  /  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  residue	155	None	add
717	[BUG]  [BUGGY]  criterion  +=  residual  /  others[i];  [CE]  cannot  find  symbol  others  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  /  others[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  /  others[i];	  criterion    +=    residual    /    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  others	156	None	replace
718	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  cost  *  residuals  *  residuals[i];	  criterion    +=    msg    *    residual    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	111	None	replace
719	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.rint(remainder  /  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.rint(remainder  /  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.rint(remainder  /  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
720	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.rint(criterion  /  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.rint(criterion  /  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.rint(criterion  /  residuals[i]);	  Criterion    +=    factor    *    Math.rint(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	146	None	replace
721	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  2  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	87	6	add
722	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  2  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  2  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	compilable	  [FE]  AssertionFailedError  	87	6	add
723	[BUG]  [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  result  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [CE]  cannot  find  symbol  result  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion    +=    residual    *    2    *    residuals[i];    criterion  +=  2  *  residuals[i];  criterion  +=  result  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion        +=        residual        *        2        *        residuals[i];        criterion    +=    2    *    residuals[i];    criterion  +=  result  *  2  *  residuals[i];  criterion  +=  2  *  residuals[i];	  	non-compiled	[CE]  cannot  find  symbol  result	87	None	add
724	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  factor,  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  factor,  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  factor,  residualsWeights[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
725	[BUG]  [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  variables[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.sqrt(remainder  *  variables[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.sqrt(remainder  *  variables[i]);	  final    double    criterion    =    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	73	None	replace
726	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  factor;  [CE]  cannot  find  symbol  remainders  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  factor;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  factor;	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	153	None	replace
727	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobian;  [CE]  cannot  find  symbol  remainders  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobian;  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainders[i])/  jacobian;	  criterion    +=    residual    *    Math.sqrt(remainders[i])/    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  remainders	153	None	replace
728	[BUG]  [BUGGY]  criterion  +=  residuals  *  2  *  rows[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals  *  2  *  rows[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals  *  2  *  rows[i];	  criterion    +=    residuals    *    2    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	167	None	replace
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals.length  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residuals.length  *  2  *  residuals[i];	  criterion    +=    residuals    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	167	6	replace
730	[BUG]  [BUGGY]  criterion  +=  residuals.length  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals.length  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals.length  *  2  *  residuals[i];	  criterion    +=    residuals    *    2    *    residuals[i];    	compilable	  [FE]  AssertionFailedError  	167	6	replace
731	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
732	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  '.class'  expected	2	None	replace
733	[BUG]  [BUGGY]  criterion  +=  gramin  *  2  *  residuals[i];  criterion  +=  gramin  *  2  *  residuals[i];  [CE]  cannot  find  symbol  gramin  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  gramin  *  2  *  residuals[i];  criterion  +=  gramin  *  2  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  gramin  *  2  *  residuals[i];  criterion  +=  gramin  *  2  *  residuals[i];	  criterion    +=    residual    *    2    *    residuals[i];    criterion    +=    residue    *    2    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  gramin	90	None	replace
734	[BUG]  [BUGGY]  criterion  +=  cost  *  residuals[i];  for(int  i  =  0;  i  <  rows.size();  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  cost  *  residuals[i];  for(int  i  =  0;  i  <  rows.size();  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  }  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    cost    *    residuals[i];    for(int  i  =  0;  i  <  rows.size();  ++i)  {  final  double  criterion  +=  cost  *  residuals[i];  }	  	non-compiled	[CE]  ';'  expected	81	None	add
735	[BUG]  [BUGGY]  criterion  +=  residual  *  factor  /  parameters[i];  [CE]  cannot  find  symbol  factor  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  factor  /  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  factor  /  parameters[i];	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  factor	57	None	replace
736	[BUG]  [BUGGY]  criterion  +=  residuals[i  *  parameters[i];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residuals[i  *  parameters[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residuals[i  *  parameters[i];	  criterion    +=    residual    *    /    parameters[i];    	non-compiled	[CE]  ']'  expected	57	None	replace
737	[BUG]  [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWeights);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  Math.sqrt(remaining  *  residualsWeights);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  Math.sqrt(remaining  *  residualsWeights);	  criterion    +=    Math.sqrt(remaining    *    ji);    	non-compiled	[CE]  cannot  find  symbol  remaining	91	None	replace
738	[BUG]  [BUGGY]  criterion  +=  factor  *  Math.sqrt(variant  *  residuals[i]);  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  Math.sqrt(variant  *  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  Math.sqrt(variant  *  residuals[i]);	  criterion    +=    residual    *    Math.sqrt(variant    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	38	None	replace
739	[BUG]  [BUGGY]  criterion  +=  jF  *  residuals[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  jF  *  residuals[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  jF  *  residuals[i];	  criterion    +=    residual    *    jF    *    residuals[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
740	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residuals	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residuals    	non-compiled	[CE]  ')'  expected	112	None	replace
741	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(variant);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(variant);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(variant);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	  final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	36	None	replace
742	[BUG]  [BUGGY]  criterion  +=  criterion  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  remainings[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  criterion  *  residuals[i];  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  remainings[i];  }  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion    +=    criterion    *    residuals[i];    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  +=  criterion  *  remainings[i];  }	  	non-compiled	[CE]  ';'  expected	79	None	add
743	[BUG]  [BUGGY]  criterion  +=  residual  *  factor  *  jacobianEvaluations[i];  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  factor  *  jacobianEvaluations[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  factor  *  jacobianEvaluations[i];	  criterion    +=    residual    *    factor    *    residuals[i];    	non-compiled	[CE]  cannot  find  symbol  factor	160	None	replace
744	[BUG]  [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	remaining  <  =  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *	  remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    criterion    +=    Math.rint(remainder    *    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
745	[BUG]  [BUGGY]  criterion  +=  factor  *  /  jacobian[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  factor  *  /  jacobian[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  factor  *  /  jacobian[i];	  criterion    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
746	[BUG]  [BUGGY]  criterion  +=  residual  *  jacobian[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  residual  *  jacobian[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  jacobian[i];	  criterion    +=    residual    *    /    jacobian[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
747	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  }	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
748	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  variable  i  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  Math.max(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.max(remainder,    criterion);    criterion    +=    gram    *    residualsWeights[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS()	26	None	replace
749	[BUG]  [BUGGY]  criterion  +=  grammatic  *  2  *  residual[i];  [CE]  cannot  find  symbol  grammatic  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  criterion  +=  grammatic  *  2  *  residual[i];  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  grammatic  *  2  *  residual[i];	  criterion    +=    residual    *    2    *    remaining[i];    	non-compiled	[CE]  cannot  find  symbol  grammatic	17	None	replace
750	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	For(int  i  =  0;  i  <  3;  ++i)  {  final  double  criterion  =  residuals[i];	  For(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    residuals[i];    	non-compiled	[CE]  '.class'  expected	8	None	replace
751	[BUG]  [BUGGY]  Criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  cannot  find  symbol  Criterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);	  criterion    +=    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	47	None	replace
752	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residual    	non-compiled	[CE]  ')'  expected	142	None	replace
753	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residual	  if(remaining    >    0)    {    for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    residual    	non-compiled	[CE]  ')'  expected	142	None	replace
754	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals[i]  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residuals[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
755	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	for(int  i  =  0;  i  <  2;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWidths[i]	  for(int    i    =    0;    i    <    rows;    ++i)    {    final    double    criterion    =    Math.rint(remainder);    criterion    +=    Math.sqrt(remainder    *    residualsWeights[i]    	non-compiled	[CE]  ')'  expected	134	None	replace
756	[BUG]  [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS()  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]      criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	final  double  criterion  =  Math.rint(remainders[i]);  criterion  +=  Math.sqrt(remainder  *  residuals[i]);	  final    double    criterion    =    Math.rint(remainder[i]);    criterion    +=    Math.sqrt(remainder    *    remainingsWeights[i]);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS()	172	None	replace
757	[BUG]  [BUGGY]  Criterion  +=  factor  *  Math.sqrt(criterion  /  residuals[i]);  [CE]  cannot  find  symbol  Criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];      [BUGGY]  Criterion  +=  factor  *  Math.sqrt(criterion  /  residuals[i]);  [BUGGY]      }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	Criterion  +=  factor  *  Math.sqrt(criterion  /  residuals[i]);	  Criterion    +=    factor    *    Math.sqrt(remainder    *    residuals[i]);    	non-compiled	[CE]  cannot  find  symbol  Criterion	170	None	replace
