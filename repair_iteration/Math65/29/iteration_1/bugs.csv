bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    criterion  +=  Math.sqrt(remaining  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remaining  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    criterion  +=  Math.sqrt(remaining  *  residualsWeights[i]);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    criterion  +=  Math.sqrt(remaining  *  residualsWeights[i]);		non-compiled	[CE]  cannot  find  symbol  remaining	58	None	add
2	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
3	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.rint(remainder  *  residualsWeights[i]);  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
4	[BUG]  [BUGGY]    if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0.0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
5	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  residuals[i];  criterion  +=  Math.sqrt(remaining  *  criterion);  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
6	[BUG]  [BUGGY]  criterion  +=  residual  *  /  residuals[i];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  /  residuals[i];  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  /  residuals[i];	criterion  +=  residual  *  residual  *  residualsWeights[i];  	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	add	criterion  +=  residual  *  2  *  residuals[i];	criterion  +=  residual  *  residual  *  residualsWeights[i];  	compilable	  [FE]  AssertionFailedError  	57	1	replace
8	[BUG]  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  2  *  residuals[i];  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  2  *  residuals[i];	criterion  +=  residual  *  residual  *  residualsWeights[i];  	compilable	  [FE]  AssertionFailedError  	57	1	replace
9	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.rint(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  Math.rint(remainder  *  residuals[i]);  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.rint(remainder  *  residuals[i]);	criterion  +=  residual  *  residual  *  residualsWeights[i];  	non-compiled	[CE]  cannot  find  symbol  remainder	57	None	replace
10	[BUG]  [BUGGY]  criterion  +=  residual  *  remaining  *  residuals[i];  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  remaining  *  residuals[i];  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  remaining  *  residuals[i];	criterion  +=  residual  *  residual  *  residualsWeights[i];  	non-compiled	[CE]  cannot  find  symbol  remaining	57	None	replace
11	[BUG]  [BUGGY]    criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);		non-compiled	[CE]  cannot  find  symbol  remainder	58	None	add
12	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  gram  *  residualsWeights[i];  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
13	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  criterion  +=  jF  *  residualsWeights[i];  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
14	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
15	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder[i]);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]		non-compiled	[CE]  ')'  expected	58	None	add
16	[BUG]  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [CE]  cannot  find  symbol  remainder  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  Math.sqrt(remainder  *  residuals[i]);	criterion  +=  residual  *  residual  *  residualsWeights[i];  	non-compiled	[CE]  cannot  find  symbol  remainder	57	None	replace
17	[BUG]  [BUGGY]  criterion  +=  residual  *  ji  *  residuals[i];  [CE]  cannot  find  symbol  ji  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]  criterion  +=  residual  *  ji  *  residuals[i];  [BUGGY]  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	criterion  +=  residual  *  ji  *  residuals[i];	criterion  +=  residual  *  residual  *  residualsWeights[i];  	non-compiled	[CE]  cannot  find  symbol  ji	57	None	replace
18	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);		non-compiled	[CE]  illegal  start  of  expression	58	None	add
19	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWidths[i]);		non-compiled	[CE]  illegal  start  of  expression	58	None	add
20	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.min(remainder,  criterion);		non-compiled	[CE]  illegal  start  of  expression	58	None	add
21	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.rint(remainder);  criterion  +=  Math.sqrt(remainder  *  residualsWeights[i]);  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
22	[BUG]  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  double  getRMS()  {  double  criterion  =  0;  for  (int  i  =  0;  i  <  rows;  ++i)  {  final  double  residual  =  residuals[i];  [BUGGY]    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }  [BUGGY]  criterion  +=  residual  *  residual  *  residualsWeights[i];  }  return  Math.sqrt(criterion  /  rows);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getRMS  [RETURN_TYPE]  double  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  criterion  factor  residual  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.2672612419124244	243	243	1	replace	    if(remaining  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  final  double  criterion  =  Math.sqrt(remainder  *  residualsWeights[i]);  }		non-compiled	[CE]  illegal  start  of  expression	58	None	add
