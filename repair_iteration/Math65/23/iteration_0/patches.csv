bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][j]  =  sum;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	jTj[i][j]  =  sum;	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
2	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][j]  =  sum;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	jTj[i][j]  =  sum;	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
3	[BUG]  [BUGGY]  jTj[i][j]  =  total;  [CE]  cannot  find  symbol  total  [FE]      AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][j]  =  total;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	jTj[i][j]  =  total;	jTj[j][i]  =  sum;  	non-compiled	[CE]  cannot  find  symbol  total	45	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][j]  =  sum  +  1;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	jTj[i][j]  =  sum  +  1;	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
5	[BUG]  [BUGGY]  jTj[i][j]  =  sum  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][j]  =  sum  +  1;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	jTj[i][j]  =  sum  +  1;	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	  	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
7	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	  	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
8	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[		non-compiled	[CE]  ']'  expected	46	None	add
9	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[		non-compiled	[CE]  ']'  expected	46	None	add
10	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]        AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  jacobian[		non-compiled	[CE]  ']'  expected	46	None	add
11	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
12	[BUG]  [BUGGY]  jTj[i][j]  =  value;  [CE]  cannot  find  symbol  value  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][j]  =  value;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	jTj[i][j]  =  value;	jTj[j][i]  =  sum;  	non-compiled	[CE]  cannot  find  symbol  value	45	None	replace
13	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]      AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][0]  =  sum;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	jTj[i][0]  =  sum;	jTj[j][i]  =  sum;  	compilable	  [FE]  OptimizationException  	45	1	replace
14	[BUG]  [BUGGY]  jTj[i][0]  =  sum;  [FE]  OptimizationException  [FE]      AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[i][0]  =  sum;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	jTj[i][0]  =  sum;	jTj[j][i]  =  sum;  	compilable	  [FE]  OptimizationException  	45	1	replace
15	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {		non-compiled	[CE]  illegal  start  of  expression	46	None	add
16	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  jacobian[		non-compiled	[CE]  ']'  expected	46	None	add
17	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  i  =  0;  i  <  cols;  ++i)  {  for(int  j  =  i;  j  <  cols;  ++j)  {  sum  +=  j		non-compiled	[CE]  ';'  expected	46	None	add
18	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[cols][cols  +  1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[cols][cols  +  1];  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[cols][cols  +  1];		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[0][i]  =  sum;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	jTj[0][i]  =  sum;	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
20	[BUG]  [BUGGY]  jTj[0][i]  =  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]  jTj[0][i]  =  sum;  [BUGGY]  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	jTj[0][i]  =  sum;	jTj[j][i]  =  sum;  	compilable	  [FE]  AssertionFailedError  	45	2	replace
21	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    jTj  =  new  double[rows][cols];  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	add	    jTj  =  new  double[rows][cols];		compilable	  [FE]  OptimizationException  	46	1	add
22	[BUG]  [BUGGY]    jTj  =  new  double[rows][cols];  [FE]  OptimizationException  [FE]    AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    jTj  =  new  double[rows][cols];  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    jTj  =  new  double[rows][cols];		compilable	  [FE]  OptimizationException  	46	1	add
23	[BUG]  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  j  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  j  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  jTj  =  new  double[rows][cols];  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  j		non-compiled	[CE]  ';'  expected	46	None	add
24	[BUG]  [BUGGY]    double[][]  rows  =  sum.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError  [CONTEXT]    double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  [BUGGY]    double[][]  rows  =  sum.doubleValue();  [BUGGY]  jTj[j][i]  =  sum;  }  }  try  {  RealMatrix  inverse  =  new  LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();  return  inverse.getData();  }  catch  (InvalidMatrixException  ime)  {  throw  new  OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	286	286	1	replace	    double[][]  rows  =  sum.doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	46	None	add
